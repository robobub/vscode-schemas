{
  "id": "vscode://schemas/launch",
  "type": "object",
  "title": "Launch",
  "allowTrailingCommas": true,
  "allowComments": true,
  "required": [],
  "default": {
    "version": "0.2.0",
    "configurations": [],
    "compounds": []
  },
  "properties": {
    "version": {
      "type": "string",
      "description": "Version of this file format.",
      "default": "0.2.0"
    },
    "configurations": {
      "type": "array",
      "description": "List of configurations. Add new configurations or edit existing ones by using IntelliSense.",
      "items": {
        "defaultSnippets": [
          {
            "body": {
              "name": "${1:Attach}",
              "port": 9229,
              "request": "attach",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Attach to a running node program",
            "label": "Node.js: Attach"
          },
          {
            "body": {
              "address": "${2:TCP/IP address of process to be debugged}",
              "localRoot": "^\"\\${workspaceFolder}\"",
              "name": "${1:Attach to Remote}",
              "port": 9229,
              "remoteRoot": "${3:Absolute path to the remote directory containing the program}",
              "request": "attach",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Attach to the debug port of a remote node program",
            "label": "Node.js: Attach to Remote Program"
          },
          {
            "body": {
              "name": "${1:Attach by Process ID}",
              "processId": "^\"\\${command:PickProcess}\"",
              "request": "attach",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Open process picker to select node process to attach to",
            "label": "Node.js: Attach to Process"
          },
          {
            "body": {
              "name": "${2:Launch Program}",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Launch a node program in debug mode",
            "label": "Node.js: Launch Program"
          },
          {
            "body": {
              "name": "${1:Launch via NPM}",
              "request": "launch",
              "runtimeArgs": [
                "run-script",
                "debug"
              ],
              "runtimeExecutable": "npm",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "label": "Node.js: Launch via NPM",
            "markdownDescription": "Launch a node program through an npm `debug` script"
          },
          {
            "body": {
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "name": "nodemon",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "request": "launch",
              "restart": true,
              "runtimeExecutable": "nodemon",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Use nodemon to relaunch a debug session on source changes",
            "label": "Node.js: Nodemon Setup"
          },
          {
            "body": {
              "args": [
                "-u",
                "tdd",
                "--timeout",
                "999999",
                "--colors",
                "^\"\\${workspaceFolder}/${1:test}\""
              ],
              "internalConsoleOptions": "openOnSessionStart",
              "name": "Mocha Tests",
              "program": "^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Debug mocha tests",
            "label": "Node.js: Mocha Tests"
          },
          {
            "body": {
              "args": [
                "${1:generator}"
              ],
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "name": "Yeoman ${1:generator}",
              "program": "^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "label": "Node.js: Yeoman generator",
            "markdownDescription": "Debug yeoman generator (install by running `npm link` in project folder)"
          },
          {
            "body": {
              "args": [
                "${1:task}"
              ],
              "name": "Gulp ${1:task}",
              "program": "^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Debug gulp task (make sure to have a local gulp installed in your project)",
            "label": "Node.js: Gulp task"
          },
          {
            "body": {
              "name": "Electron Main",
              "program": "^\"\\${workspaceFolder}/main.js\"",
              "request": "launch",
              "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/electron\"",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Debug the Electron main process",
            "label": "Node.js: Electron Main"
          },
          {
            "body": {
              "command": "npm start",
              "name": "Run npm start",
              "request": "launch",
              "type": "node-terminal"
            },
            "description": "Run \"npm start\" in a debug terminal",
            "label": "Run \"npm start\" in a debug terminal"
          },
          {
            "body": {
              "args": [
                "^\"--extensionDevelopmentPath=\\${workspaceFolder}\""
              ],
              "name": "Launch Extension",
              "outFiles": [
                "^\"\\${workspaceFolder}/out/**/*.js\""
              ],
              "preLaunchTask": "npm",
              "request": "launch",
              "type": "pwa-extensionHost"
            },
            "description": "Launch a VS Code extension in debug mode",
            "label": "VS Code Extension Development"
          },
          {
            "body": {
              "name": "Launch Chrome",
              "request": "launch",
              "type": "pwa-chrome",
              "url": "http://localhost:8080",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Launch Chrome to debug a URL",
            "label": "Chrome: Launch"
          },
          {
            "body": {
              "name": "Attach to Chrome",
              "port": 9222,
              "request": "attach",
              "type": "pwa-chrome",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Attach to an instance of Chrome already in debug mode",
            "label": "Chrome: Attach"
          },
          {
            "body": {
              "name": "Launch Edge",
              "request": "launch",
              "type": "pwa-msedge",
              "url": "http://localhost:8080",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Launch Edge to debug a URL",
            "label": "Edge: Launch"
          },
          {
            "body": {
              "name": "Attach to Edge",
              "port": 9222,
              "request": "attach",
              "type": "pwa-msedge",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Attach to an instance of Edge already in debug mode",
            "label": "Edge: Attach"
          },
          {
            "label": "Node.js: Launch Program",
            "description": "Launch a node program in debug mode",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "${2:Launch Program}",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Launch via NPM",
            "markdownDescription": "Launch a node program through an npm `debug` script",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "${1:Launch via NPM}",
              "runtimeExecutable": "npm",
              "runtimeArgs": [
                "run-script",
                "debug"
              ],
              "port": 9229,
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Attach",
            "description": "Attach to a running node program",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "${1:Attach}",
              "port": 9229,
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Attach to Remote Program",
            "description": "Attach to the debug port of a remote node program",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "${1:Attach to Remote}",
              "address": "${2:TCP/IP address of process to be debugged}",
              "port": 9229,
              "localRoot": "^\"\\${workspaceFolder}\"",
              "remoteRoot": "${3:Absolute path to the remote directory containing the program}",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Attach to Process",
            "description": "Open process picker to select node process to attach to",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "${1:Attach by Process ID}",
              "processId": "^\"\\${command:PickProcess}\"",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Nodemon Setup",
            "description": "Use nodemon to relaunch a debug session on source changes",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "nodemon",
              "runtimeExecutable": "nodemon",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "restart": true,
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Mocha Tests",
            "description": "Debug mocha tests",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Mocha Tests",
              "program": "^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"",
              "args": [
                "-u",
                "tdd",
                "--timeout",
                "999999",
                "--colors",
                "^\"\\${workspaceFolder}/${1:test}\""
              ],
              "internalConsoleOptions": "openOnSessionStart",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Yeoman generator",
            "markdownDescription": "Debug yeoman generator (install by running `npm link` in project folder)",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Yeoman ${1:generator}",
              "program": "^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"",
              "args": [
                "${1:generator}"
              ],
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Gulp task",
            "description": "Debug gulp task (make sure to have a local gulp installed in your project)",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Gulp ${1:task}",
              "program": "^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"",
              "args": [
                "${1:task}"
              ],
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Electron Main",
            "description": "Debug the Electron main process",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Electron Main",
              "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/electron\"",
              "program": "^\"\\${workspaceFolder}/main.js\"",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "VS Code Extension Development",
            "description": "Launch a VS Code extension in debug mode",
            "body": {
              "type": "extensionHost",
              "request": "launch",
              "name": "Launch Extension",
              "runtimeExecutable": "^\"\\${execPath}\"",
              "args": [
                "^\"--extensionDevelopmentPath=\\${workspaceFolder}\""
              ],
              "outFiles": [
                "^\"\\${workspaceFolder}/out/**/*.js\""
              ],
              "preLaunchTask": "npm"
            }
          }
        ],
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "address": {
                "default": "localhost",
                "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "attachExistingChildren": {
                "default": false,
                "description": "Whether to attempt to attach to already-spawned child processes.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "autoAttachChildProcesses": {
                "default": true,
                "description": "Attach debugger to new child processes automatically.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "continueOnAttach": {
                "default": true,
                "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "default": "${workspaceFolder}",
                "description": "Absolute path to the working directory of the program being debugged.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "default": {},
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "default": "${workspaceFolder}/.env",
                "description": "Absolute path to a file containing environment variable definitions.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "default": null,
                "description": "Path to the local directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "nodeVersionHint": {
                "default": 12,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "minimum": 8,
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "default": 9229,
                "description": "Debug port to attach to. Default is 5858.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "processId": {
                "default": "${command:PickProcess}",
                "description": "ID of process to attach to.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "default": null,
                "description": "Absolute path to the remote directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": [
                  "${workspaceFolder}/**",
                  "!**/node_modules/**"
                ],
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "default": true,
                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "delay": {
                        "default": 1000,
                        "minimum": 0,
                        "type": "number"
                      },
                      "maxAttempts": {
                        "default": 10,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeSourcemapPausePatterns": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "websocketAddress": {
                "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "pwa-node"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "attach"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                    "type": "string"
                  },
                  "attachExistingChildren": {
                    "default": false,
                    "description": "Whether to attempt to attach to already-spawned child processes.",
                    "type": "boolean"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "continueOnAttach": {
                    "default": true,
                    "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                    "type": "boolean"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Debug port to attach to. Default is 5858.",
                    "type": "number"
                  },
                  "processId": {
                    "default": "${command:PickProcess}",
                    "description": "ID of process to attach to.",
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "websocketAddress": {
                    "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    }
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                    "type": "string"
                  },
                  "attachExistingChildren": {
                    "default": false,
                    "description": "Whether to attempt to attach to already-spawned child processes.",
                    "type": "boolean"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "continueOnAttach": {
                    "default": true,
                    "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                    "type": "boolean"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Debug port to attach to. Default is 5858.",
                    "type": "number"
                  },
                  "processId": {
                    "default": "${command:PickProcess}",
                    "description": "ID of process to attach to.",
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "websocketAddress": {
                    "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    }
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                    "type": "string"
                  },
                  "attachExistingChildren": {
                    "default": false,
                    "description": "Whether to attempt to attach to already-spawned child processes.",
                    "type": "boolean"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "continueOnAttach": {
                    "default": true,
                    "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                    "type": "boolean"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Debug port to attach to. Default is 5858.",
                    "type": "number"
                  },
                  "processId": {
                    "default": "${command:PickProcess}",
                    "description": "ID of process to attach to.",
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "websocketAddress": {
                    "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    }
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "args": {
                "default": [],
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "attachSimplePort": {
                "default": 9229,
                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                "type": "integer",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "autoAttachChildProcesses": {
                "default": true,
                "description": "Attach debugger to new child processes automatically.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "console": {
                "default": "internalConsole",
                "description": "Where to launch the debug target.",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "VS Code Debug Console (which doesn't support to read input from a program)",
                  "VS Code's integrated terminal",
                  "External terminal that can be configured via user settings"
                ],
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "default": "${workspaceFolder}",
                "description": "Absolute path to the working directory of the program being debugged.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "default": {},
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "default": "${workspaceFolder}/.env",
                "description": "Absolute path to a file containing environment variable definitions.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "default": null,
                "description": "Path to the local directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "nodeVersionHint": {
                "default": 12,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "minimum": 8,
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "profileStartup": {
                "default": true,
                "description": "If true, will start profiling soon as the process launches",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "program": {
                "default": "",
                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "default": null,
                "description": "Absolute path to the remote directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": [
                  "${workspaceFolder}/**",
                  "!**/node_modules/**"
                ],
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "default": true,
                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "delay": {
                        "default": 1000,
                        "minimum": 0,
                        "type": "number"
                      },
                      "maxAttempts": {
                        "default": 10,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeArgs": {
                "default": [],
                "description": "Optional arguments passed to the runtime executable.",
                "items": {
                  "type": "string"
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "default": "node",
                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeSourcemapPausePatterns": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeVersion": {
                "default": "default",
                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "default": true,
                "description": "Automatically stop program after launch.",
                "type": [
                  "boolean",
                  "string"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "pwa-node"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "type": "integer"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ]
                  },
                  "type": {
                    "enum": [
                      "pwa-node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "type": "integer"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ]
                  },
                  "type": {
                    "enum": [
                      "pwa-node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "type": "integer"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ]
                  },
                  "type": {
                    "enum": [
                      "pwa-node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "autoAttachChildProcesses": {
                "default": true,
                "description": "Attach debugger to new child processes automatically.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "command": {
                "default": "npm start",
                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "default": "${workspaceFolder}",
                "description": "Absolute path to the working directory of the program being debugged.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "default": {},
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "default": "${workspaceFolder}/.env",
                "description": "Absolute path to a file containing environment variable definitions.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "default": null,
                "description": "Path to the local directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "nodeVersionHint": {
                "default": 12,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "minimum": 8,
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "default": null,
                "description": "Absolute path to the remote directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": [
                  "${workspaceFolder}/**",
                  "!**/node_modules/**"
                ],
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeSourcemapPausePatterns": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node-terminal"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node-terminal"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node-terminal"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node-terminal"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "args": {
                "default": [
                  "--extensionDevelopmentPath=${workspaceFolder}"
                ],
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "autoAttachChildProcesses": {
                "default": true,
                "description": "Attach debugger to new child processes automatically.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "default": "${workspaceFolder}",
                "description": "Absolute path to the working directory of the program being debugged.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugWebWorkerHost": {
                "default": true,
                "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                "type": [
                  "boolean"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugWebviews": {
                "default": true,
                "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. **Note:** at the moment this requires the setting `\"webview.experimental.useExternalEndpoint\": true` to work properly, and will only work in desktop VS Code.",
                "type": [
                  "boolean"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "default": {},
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "default": "${workspaceFolder}/.env",
                "description": "Absolute path to a file containing environment variable definitions.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "default": null,
                "description": "Path to the local directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "nodeVersionHint": {
                "default": 12,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "minimum": 8,
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "default": null,
                "description": "Absolute path to the remote directory containing the program.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "rendererDebugOptions": {
                "default": {
                  "webRoot": "${workspaceFolder}"
                },
                "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string"
                  },
                  "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean"
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "targetSelection": {
                    "default": "automatic",
                    "enum": [
                      "pick",
                      "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": [
                  "${workspaceFolder}/**",
                  "!**/node_modules/**"
                ],
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "default": "node",
                "markdownDescription": "Absolute path to VS Code.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeSourcemapPausePatterns": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "pwa-extensionHost"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "args": {
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ],
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "debugWebWorkerHost": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                    "type": [
                      "boolean"
                    ]
                  },
                  "debugWebviews": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. **Note:** at the moment this requires the setting `\"webview.experimental.useExternalEndpoint\": true` to work properly, and will only work in desktop VS Code.",
                    "type": [
                      "boolean"
                    ]
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "rendererDebugOptions": {
                    "default": {
                      "webRoot": "${workspaceFolder}"
                    },
                    "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                    "properties": {
                      "address": {
                        "default": "localhost",
                        "description": "IP address or hostname the debugged browser is listening on.",
                        "type": "string"
                      },
                      "browserAttachLocation": {
                        "default": null,
                        "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "enum": [
                              "ui",
                              "workspace"
                            ],
                            "type": "string"
                          }
                        ]
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "disableNetworkCache": {
                        "default": true,
                        "description": "Controls whether to skip the network cache for each request",
                        "type": "boolean"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "inspectUri": {
                        "default": null,
                        "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pathMapping": {
                        "default": {},
                        "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                        "type": "object"
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "port": {
                        "default": 9229,
                        "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                        "type": "number"
                      },
                      "resolveSourceMapLocations": {
                        "default": null,
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": false,
                        "markdownDescription": "Whether to reconnect if the browser connection is closed",
                        "type": "boolean"
                      },
                      "server": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "default": {
                              "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                              "args": {
                                "default": [],
                                "description": "Command line arguments passed to the program.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "attachSimplePort": {
                                "default": 9229,
                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                "type": "integer"
                              },
                              "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean"
                              },
                              "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                  "type": "string",
                                  "uniqueItems": true
                                },
                                "type": "array"
                              },
                              "console": {
                                "default": "internalConsole",
                                "description": "Where to launch the debug target.",
                                "enum": [
                                  "internalConsole",
                                  "integratedTerminal",
                                  "externalTerminal"
                                ],
                                "enumDescriptions": [
                                  "VS Code Debug Console (which doesn't support to read input from a program)",
                                  "VS Code's integrated terminal",
                                  "External terminal that can be configured via user settings"
                                ],
                                "type": "string"
                              },
                              "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string"
                              },
                              "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged.",
                                "type": "string"
                              },
                              "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean"
                              },
                              "env": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object"
                              },
                              "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string"
                              },
                              "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "nodeVersionHint": {
                                "default": 12,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "minimum": 8,
                                "type": "number"
                              },
                              "outFiles": {
                                "default": [
                                  "${workspaceFolder}/**/*.js",
                                  "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array"
                                ]
                              },
                              "outputCapture": {
                                "default": "console",
                                "enum": [
                                  "console",
                                  "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                              },
                              "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean"
                              },
                              "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling soon as the process launches",
                                "type": "boolean"
                              },
                              "program": {
                                "default": "",
                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                "type": "string"
                              },
                              "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "resolveSourceMapLocations": {
                                "default": [
                                  "${workspaceFolder}/**",
                                  "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "restart": {
                                "default": true,
                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "delay": {
                                        "default": 1000,
                                        "minimum": 0,
                                        "type": "number"
                                      },
                                      "maxAttempts": {
                                        "default": 10,
                                        "minimum": 0,
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array"
                              },
                              "runtimeVersion": {
                                "default": "default",
                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                "type": "string"
                              },
                              "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "onAttach": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onAttach"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "onceBreakpointResolved": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "skipFiles": {
                                "default": [
                                  "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array"
                              },
                              "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean"
                              },
                              "sourceMapPathOverrides": {
                                "default": {
                                  "meteor://💻app/*": "${workspaceFolder}/*",
                                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                  "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object"
                              },
                              "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean"
                              },
                              "stopOnEntry": {
                                "default": true,
                                "description": "Automatically stop program after launch.",
                                "type": [
                                  "boolean",
                                  "string"
                                ]
                              },
                              "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number"
                              },
                              "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations",
                                "markdownDescription": "Timeouts for several debugger operations",
                                "properties": {
                                  "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                  },
                                  "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                  {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "console": {
                                        "description": "Whether to return trace data from the launched application or browser.",
                                        "type": "boolean"
                                      },
                                      "level": {
                                        "description": "Configures the level of logs recorded.",
                                        "enum": [
                                          "fatal",
                                          "error",
                                          "warn",
                                          "info",
                                          "verbose"
                                        ]
                                      },
                                      "logFile": {
                                        "description": "Configures where on disk logs are written.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "stdio": {
                                        "description": "Configures whether logs are also returned to the debug console.",
                                        "type": "boolean"
                                      },
                                      "tags": {
                                        "description": "Configures what types of logs are recorded.",
                                        "items": {
                                          "enum": [
                                            "cdp",
                                            "dap",
                                            "runtime"
                                          ]
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "default": {
                              "program": "npm start"
                            },
                            "description": "Create JavaScript Debug Terminal",
                            "properties": {
                              "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean"
                              },
                              "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                  "type": "string",
                                  "uniqueItems": true
                                },
                                "type": "array"
                              },
                              "command": {
                                "default": "npm start",
                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string"
                              },
                              "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged.",
                                "type": "string"
                              },
                              "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean"
                              },
                              "env": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object"
                              },
                              "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string"
                              },
                              "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "nodeVersionHint": {
                                "default": 12,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "minimum": 8,
                                "type": "number"
                              },
                              "outFiles": {
                                "default": [
                                  "${workspaceFolder}/**/*.js",
                                  "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array"
                                ]
                              },
                              "outputCapture": {
                                "default": "console",
                                "enum": [
                                  "console",
                                  "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                              },
                              "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean"
                              },
                              "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "resolveSourceMapLocations": {
                                "default": [
                                  "${workspaceFolder}/**",
                                  "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array"
                              },
                              "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "onAttach": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onAttach"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "onceBreakpointResolved": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "skipFiles": {
                                "default": [
                                  "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array"
                              },
                              "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean"
                              },
                              "sourceMapPathOverrides": {
                                "default": {
                                  "meteor://💻app/*": "${workspaceFolder}/*",
                                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                  "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object"
                              },
                              "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean"
                              },
                              "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number"
                              },
                              "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations",
                                "markdownDescription": "Timeouts for several debugger operations",
                                "properties": {
                                  "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                  },
                                  "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                  {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "console": {
                                        "description": "Whether to return trace data from the launched application or browser.",
                                        "type": "boolean"
                                      },
                                      "level": {
                                        "description": "Configures the level of logs recorded.",
                                        "enum": [
                                          "fatal",
                                          "error",
                                          "warn",
                                          "info",
                                          "verbose"
                                        ]
                                      },
                                      "logFile": {
                                        "description": "Configures where on disk logs are written.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "stdio": {
                                        "description": "Configures whether logs are also returned to the debug console.",
                                        "type": "boolean"
                                      },
                                      "tags": {
                                        "description": "Configures what types of logs are recorded.",
                                        "items": {
                                          "enum": [
                                            "cdp",
                                            "dap",
                                            "runtime"
                                          ]
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "targetSelection": {
                        "default": "automatic",
                        "enum": [
                          "pick",
                          "automatic"
                        ],
                        "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                        "type": "string"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "url": {
                        "default": "http://localhost:8080",
                        "description": "Will search for a tab with this exact url and attach to it, if found",
                        "type": "string"
                      },
                      "urlFilter": {
                        "default": "",
                        "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                        "type": "string"
                      },
                      "vueComponentPaths": {
                        "default": [
                          "${workspaceFolder}/**/*.vue"
                        ],
                        "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                        "type": "array"
                      },
                      "webRoot": {
                        "default": "${workspaceFolder}",
                        "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Absolute path to VS Code.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "args": {
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ],
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "debugWebWorkerHost": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                    "type": [
                      "boolean"
                    ]
                  },
                  "debugWebviews": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. **Note:** at the moment this requires the setting `\"webview.experimental.useExternalEndpoint\": true` to work properly, and will only work in desktop VS Code.",
                    "type": [
                      "boolean"
                    ]
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "rendererDebugOptions": {
                    "default": {
                      "webRoot": "${workspaceFolder}"
                    },
                    "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                    "properties": {
                      "address": {
                        "default": "localhost",
                        "description": "IP address or hostname the debugged browser is listening on.",
                        "type": "string"
                      },
                      "browserAttachLocation": {
                        "default": null,
                        "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "enum": [
                              "ui",
                              "workspace"
                            ],
                            "type": "string"
                          }
                        ]
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "disableNetworkCache": {
                        "default": true,
                        "description": "Controls whether to skip the network cache for each request",
                        "type": "boolean"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "inspectUri": {
                        "default": null,
                        "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pathMapping": {
                        "default": {},
                        "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                        "type": "object"
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "port": {
                        "default": 9229,
                        "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                        "type": "number"
                      },
                      "resolveSourceMapLocations": {
                        "default": null,
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": false,
                        "markdownDescription": "Whether to reconnect if the browser connection is closed",
                        "type": "boolean"
                      },
                      "server": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "default": {
                              "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                              "args": {
                                "default": [],
                                "description": "Command line arguments passed to the program.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "attachSimplePort": {
                                "default": 9229,
                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                "type": "integer"
                              },
                              "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean"
                              },
                              "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                  "type": "string",
                                  "uniqueItems": true
                                },
                                "type": "array"
                              },
                              "console": {
                                "default": "internalConsole",
                                "description": "Where to launch the debug target.",
                                "enum": [
                                  "internalConsole",
                                  "integratedTerminal",
                                  "externalTerminal"
                                ],
                                "enumDescriptions": [
                                  "VS Code Debug Console (which doesn't support to read input from a program)",
                                  "VS Code's integrated terminal",
                                  "External terminal that can be configured via user settings"
                                ],
                                "type": "string"
                              },
                              "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string"
                              },
                              "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged.",
                                "type": "string"
                              },
                              "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean"
                              },
                              "env": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object"
                              },
                              "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string"
                              },
                              "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "nodeVersionHint": {
                                "default": 12,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "minimum": 8,
                                "type": "number"
                              },
                              "outFiles": {
                                "default": [
                                  "${workspaceFolder}/**/*.js",
                                  "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array"
                                ]
                              },
                              "outputCapture": {
                                "default": "console",
                                "enum": [
                                  "console",
                                  "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                              },
                              "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean"
                              },
                              "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling soon as the process launches",
                                "type": "boolean"
                              },
                              "program": {
                                "default": "",
                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                "type": "string"
                              },
                              "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "resolveSourceMapLocations": {
                                "default": [
                                  "${workspaceFolder}/**",
                                  "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "restart": {
                                "default": true,
                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "delay": {
                                        "default": 1000,
                                        "minimum": 0,
                                        "type": "number"
                                      },
                                      "maxAttempts": {
                                        "default": 10,
                                        "minimum": 0,
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array"
                              },
                              "runtimeVersion": {
                                "default": "default",
                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                "type": "string"
                              },
                              "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "onAttach": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onAttach"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "onceBreakpointResolved": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "skipFiles": {
                                "default": [
                                  "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array"
                              },
                              "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean"
                              },
                              "sourceMapPathOverrides": {
                                "default": {
                                  "meteor://💻app/*": "${workspaceFolder}/*",
                                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                  "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object"
                              },
                              "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean"
                              },
                              "stopOnEntry": {
                                "default": true,
                                "description": "Automatically stop program after launch.",
                                "type": [
                                  "boolean",
                                  "string"
                                ]
                              },
                              "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number"
                              },
                              "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations",
                                "markdownDescription": "Timeouts for several debugger operations",
                                "properties": {
                                  "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                  },
                                  "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                  {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "console": {
                                        "description": "Whether to return trace data from the launched application or browser.",
                                        "type": "boolean"
                                      },
                                      "level": {
                                        "description": "Configures the level of logs recorded.",
                                        "enum": [
                                          "fatal",
                                          "error",
                                          "warn",
                                          "info",
                                          "verbose"
                                        ]
                                      },
                                      "logFile": {
                                        "description": "Configures where on disk logs are written.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "stdio": {
                                        "description": "Configures whether logs are also returned to the debug console.",
                                        "type": "boolean"
                                      },
                                      "tags": {
                                        "description": "Configures what types of logs are recorded.",
                                        "items": {
                                          "enum": [
                                            "cdp",
                                            "dap",
                                            "runtime"
                                          ]
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "default": {
                              "program": "npm start"
                            },
                            "description": "Create JavaScript Debug Terminal",
                            "properties": {
                              "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean"
                              },
                              "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                  "type": "string",
                                  "uniqueItems": true
                                },
                                "type": "array"
                              },
                              "command": {
                                "default": "npm start",
                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string"
                              },
                              "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged.",
                                "type": "string"
                              },
                              "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean"
                              },
                              "env": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object"
                              },
                              "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string"
                              },
                              "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "nodeVersionHint": {
                                "default": 12,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "minimum": 8,
                                "type": "number"
                              },
                              "outFiles": {
                                "default": [
                                  "${workspaceFolder}/**/*.js",
                                  "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array"
                                ]
                              },
                              "outputCapture": {
                                "default": "console",
                                "enum": [
                                  "console",
                                  "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                              },
                              "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean"
                              },
                              "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "resolveSourceMapLocations": {
                                "default": [
                                  "${workspaceFolder}/**",
                                  "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array"
                              },
                              "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "onAttach": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onAttach"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "onceBreakpointResolved": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "skipFiles": {
                                "default": [
                                  "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array"
                              },
                              "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean"
                              },
                              "sourceMapPathOverrides": {
                                "default": {
                                  "meteor://💻app/*": "${workspaceFolder}/*",
                                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                  "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object"
                              },
                              "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean"
                              },
                              "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number"
                              },
                              "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations",
                                "markdownDescription": "Timeouts for several debugger operations",
                                "properties": {
                                  "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                  },
                                  "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                  {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "console": {
                                        "description": "Whether to return trace data from the launched application or browser.",
                                        "type": "boolean"
                                      },
                                      "level": {
                                        "description": "Configures the level of logs recorded.",
                                        "enum": [
                                          "fatal",
                                          "error",
                                          "warn",
                                          "info",
                                          "verbose"
                                        ]
                                      },
                                      "logFile": {
                                        "description": "Configures where on disk logs are written.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "stdio": {
                                        "description": "Configures whether logs are also returned to the debug console.",
                                        "type": "boolean"
                                      },
                                      "tags": {
                                        "description": "Configures what types of logs are recorded.",
                                        "items": {
                                          "enum": [
                                            "cdp",
                                            "dap",
                                            "runtime"
                                          ]
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "targetSelection": {
                        "default": "automatic",
                        "enum": [
                          "pick",
                          "automatic"
                        ],
                        "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                        "type": "string"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "url": {
                        "default": "http://localhost:8080",
                        "description": "Will search for a tab with this exact url and attach to it, if found",
                        "type": "string"
                      },
                      "urlFilter": {
                        "default": "",
                        "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                        "type": "string"
                      },
                      "vueComponentPaths": {
                        "default": [
                          "${workspaceFolder}/**/*.vue"
                        ],
                        "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                        "type": "array"
                      },
                      "webRoot": {
                        "default": "${workspaceFolder}",
                        "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Absolute path to VS Code.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "args": {
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ],
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "type": "string"
                  },
                  "debugWebWorkerHost": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                    "type": [
                      "boolean"
                    ]
                  },
                  "debugWebviews": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. **Note:** at the moment this requires the setting `\"webview.experimental.useExternalEndpoint\": true` to work properly, and will only work in desktop VS Code.",
                    "type": [
                      "boolean"
                    ]
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "rendererDebugOptions": {
                    "default": {
                      "webRoot": "${workspaceFolder}"
                    },
                    "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                    "properties": {
                      "address": {
                        "default": "localhost",
                        "description": "IP address or hostname the debugged browser is listening on.",
                        "type": "string"
                      },
                      "browserAttachLocation": {
                        "default": null,
                        "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "enum": [
                              "ui",
                              "workspace"
                            ],
                            "type": "string"
                          }
                        ]
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "disableNetworkCache": {
                        "default": true,
                        "description": "Controls whether to skip the network cache for each request",
                        "type": "boolean"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "inspectUri": {
                        "default": null,
                        "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pathMapping": {
                        "default": {},
                        "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                        "type": "object"
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "port": {
                        "default": 9229,
                        "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                        "type": "number"
                      },
                      "resolveSourceMapLocations": {
                        "default": null,
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": false,
                        "markdownDescription": "Whether to reconnect if the browser connection is closed",
                        "type": "boolean"
                      },
                      "server": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "default": {
                              "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                              "args": {
                                "default": [],
                                "description": "Command line arguments passed to the program.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "attachSimplePort": {
                                "default": 9229,
                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                "type": "integer"
                              },
                              "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean"
                              },
                              "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                  "type": "string",
                                  "uniqueItems": true
                                },
                                "type": "array"
                              },
                              "console": {
                                "default": "internalConsole",
                                "description": "Where to launch the debug target.",
                                "enum": [
                                  "internalConsole",
                                  "integratedTerminal",
                                  "externalTerminal"
                                ],
                                "enumDescriptions": [
                                  "VS Code Debug Console (which doesn't support to read input from a program)",
                                  "VS Code's integrated terminal",
                                  "External terminal that can be configured via user settings"
                                ],
                                "type": "string"
                              },
                              "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string"
                              },
                              "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged.",
                                "type": "string"
                              },
                              "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean"
                              },
                              "env": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object"
                              },
                              "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string"
                              },
                              "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "nodeVersionHint": {
                                "default": 12,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "minimum": 8,
                                "type": "number"
                              },
                              "outFiles": {
                                "default": [
                                  "${workspaceFolder}/**/*.js",
                                  "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array"
                                ]
                              },
                              "outputCapture": {
                                "default": "console",
                                "enum": [
                                  "console",
                                  "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                              },
                              "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean"
                              },
                              "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling soon as the process launches",
                                "type": "boolean"
                              },
                              "program": {
                                "default": "",
                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                "type": "string"
                              },
                              "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "resolveSourceMapLocations": {
                                "default": [
                                  "${workspaceFolder}/**",
                                  "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "restart": {
                                "default": true,
                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "delay": {
                                        "default": 1000,
                                        "minimum": 0,
                                        "type": "number"
                                      },
                                      "maxAttempts": {
                                        "default": 10,
                                        "minimum": 0,
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array"
                              },
                              "runtimeVersion": {
                                "default": "default",
                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                "type": "string"
                              },
                              "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "onAttach": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onAttach"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "onceBreakpointResolved": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "skipFiles": {
                                "default": [
                                  "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array"
                              },
                              "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean"
                              },
                              "sourceMapPathOverrides": {
                                "default": {
                                  "meteor://💻app/*": "${workspaceFolder}/*",
                                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                  "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object"
                              },
                              "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean"
                              },
                              "stopOnEntry": {
                                "default": true,
                                "description": "Automatically stop program after launch.",
                                "type": [
                                  "boolean",
                                  "string"
                                ]
                              },
                              "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number"
                              },
                              "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations",
                                "markdownDescription": "Timeouts for several debugger operations",
                                "properties": {
                                  "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                  },
                                  "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                  {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "console": {
                                        "description": "Whether to return trace data from the launched application or browser.",
                                        "type": "boolean"
                                      },
                                      "level": {
                                        "description": "Configures the level of logs recorded.",
                                        "enum": [
                                          "fatal",
                                          "error",
                                          "warn",
                                          "info",
                                          "verbose"
                                        ]
                                      },
                                      "logFile": {
                                        "description": "Configures where on disk logs are written.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "stdio": {
                                        "description": "Configures whether logs are also returned to the debug console.",
                                        "type": "boolean"
                                      },
                                      "tags": {
                                        "description": "Configures what types of logs are recorded.",
                                        "items": {
                                          "enum": [
                                            "cdp",
                                            "dap",
                                            "runtime"
                                          ]
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "default": {
                              "program": "npm start"
                            },
                            "description": "Create JavaScript Debug Terminal",
                            "properties": {
                              "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean"
                              },
                              "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                  "type": "string",
                                  "uniqueItems": true
                                },
                                "type": "array"
                              },
                              "command": {
                                "default": "npm start",
                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string"
                              },
                              "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged.",
                                "type": "string"
                              },
                              "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean"
                              },
                              "env": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object"
                              },
                              "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string"
                              },
                              "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "nodeVersionHint": {
                                "default": 12,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "minimum": 8,
                                "type": "number"
                              },
                              "outFiles": {
                                "default": [
                                  "${workspaceFolder}/**/*.js",
                                  "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array"
                                ]
                              },
                              "outputCapture": {
                                "default": "console",
                                "enum": [
                                  "console",
                                  "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                              },
                              "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean"
                              },
                              "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "resolveSourceMapLocations": {
                                "default": [
                                  "${workspaceFolder}/**",
                                  "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                  "type": "string"
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array"
                              },
                              "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "properties": {
                                      "onAttach": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onAttach"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "onceBreakpointResolved": {
                                        "default": 32,
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "skipFiles": {
                                "default": [
                                  "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array"
                              },
                              "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean"
                              },
                              "sourceMapPathOverrides": {
                                "default": {
                                  "meteor://💻app/*": "${workspaceFolder}/*",
                                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                  "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object"
                              },
                              "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean"
                              },
                              "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number"
                              },
                              "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations",
                                "markdownDescription": "Timeouts for several debugger operations",
                                "properties": {
                                  "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                  },
                                  "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                  {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "console": {
                                        "description": "Whether to return trace data from the launched application or browser.",
                                        "type": "boolean"
                                      },
                                      "level": {
                                        "description": "Configures the level of logs recorded.",
                                        "enum": [
                                          "fatal",
                                          "error",
                                          "warn",
                                          "info",
                                          "verbose"
                                        ]
                                      },
                                      "logFile": {
                                        "description": "Configures where on disk logs are written.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "stdio": {
                                        "description": "Configures whether logs are also returned to the debug console.",
                                        "type": "boolean"
                                      },
                                      "tags": {
                                        "description": "Configures what types of logs are recorded.",
                                        "items": {
                                          "enum": [
                                            "cdp",
                                            "dap",
                                            "runtime"
                                          ]
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "targetSelection": {
                        "default": "automatic",
                        "enum": [
                          "pick",
                          "automatic"
                        ],
                        "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                        "type": "string"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "url": {
                        "default": "http://localhost:8080",
                        "description": "Will search for a tab with this exact url and attach to it, if found",
                        "type": "string"
                      },
                      "urlFilter": {
                        "default": "",
                        "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                        "type": "string"
                      },
                      "vueComponentPaths": {
                        "default": [
                          "${workspaceFolder}/**/*.vue"
                        ],
                        "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                        "type": "array"
                      },
                      "webRoot": {
                        "default": "${workspaceFolder}",
                        "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${workspaceFolder}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Absolute path to VS Code.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request",
              "args"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "address": {
                "default": "localhost",
                "description": "IP address or hostname the debugged browser is listening on.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "browserAttachLocation": {
                "default": null,
                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "enum": [
                      "ui",
                      "workspace"
                    ],
                    "type": "string"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableNetworkCache": {
                "default": true,
                "description": "Controls whether to skip the network cache for each request",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "inspectUri": {
                "default": null,
                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pathMapping": {
                "default": {},
                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "default": 9229,
                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": null,
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "default": false,
                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "server": {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "node my-server.js"
                    },
                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                    "properties": {
                      "args": {
                        "default": [],
                        "description": "Command line arguments passed to the program.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attachSimplePort": {
                        "default": 9229,
                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                        "type": "integer"
                      },
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "console": {
                        "default": "internalConsole",
                        "description": "Where to launch the debug target.",
                        "enum": [
                          "internalConsole",
                          "integratedTerminal",
                          "externalTerminal"
                        ],
                        "enumDescriptions": [
                          "VS Code Debug Console (which doesn't support to read input from a program)",
                          "VS Code's integrated terminal",
                          "External terminal that can be configured via user settings"
                        ],
                        "type": "string"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "profileStartup": {
                        "default": true,
                        "description": "If true, will start profiling soon as the process launches",
                        "type": "boolean"
                      },
                      "program": {
                        "default": "",
                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": true,
                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "delay": {
                                "default": 1000,
                                "minimum": 0,
                                "type": "number"
                              },
                              "maxAttempts": {
                                "default": 10,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "runtimeArgs": {
                        "default": [],
                        "description": "Optional arguments passed to the runtime executable.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "runtimeExecutable": {
                        "default": "node",
                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "runtimeVersion": {
                        "default": "default",
                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                        "type": "string"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "stopOnEntry": {
                        "default": true,
                        "description": "Automatically stop program after launch.",
                        "type": [
                          "boolean",
                          "string"
                        ]
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "npm start"
                    },
                    "description": "Create JavaScript Debug Terminal",
                    "properties": {
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "command": {
                        "default": "npm start",
                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "targetSelection": {
                "default": "automatic",
                "enum": [
                  "pick",
                  "automatic"
                ],
                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "url": {
                "default": "http://localhost:8080",
                "description": "Will search for a tab with this exact url and attach to it, if found",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "urlFilter": {
                "default": "",
                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "vueComponentPaths": {
                "default": [
                  "${workspaceFolder}/**/*.vue"
                ],
                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "webRoot": {
                "default": "${workspaceFolder}",
                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "pwa-chrome"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "attach"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string"
                  },
                  "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean"
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "targetSelection": {
                    "default": "automatic",
                    "enum": [
                      "pick",
                      "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-chrome"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string"
                  },
                  "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean"
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "targetSelection": {
                    "default": "automatic",
                    "enum": [
                      "pick",
                      "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-chrome"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string"
                  },
                  "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean"
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "targetSelection": {
                    "default": "automatic",
                    "enum": [
                      "pick",
                      "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-chrome"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "browserLaunchLocation": {
                "default": null,
                "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "enum": [
                      "ui",
                      "workspace"
                    ],
                    "type": "string"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cleanUp": {
                "default": "wholeBrowser",
                "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                "enum": [
                  "wholeBrowser",
                  "onlyTab"
                ],
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "default": null,
                "description": "Optional working directory for the runtime executable.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableNetworkCache": {
                "default": true,
                "description": "Controls whether to skip the network cache for each request",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "default": {},
                "description": "Optional dictionary of environment key/value pairs for the browser.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "file": {
                "default": "${workspaceFolder}/index.html",
                "description": "A local html file to open in the browser",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "includeDefaultArgs": {
                "default": true,
                "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "inspectUri": {
                "default": null,
                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pathMapping": {
                "default": {},
                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "default": 0,
                "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "profileStartup": {
                "default": true,
                "description": "If true, will start profiling soon as the process launches",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": null,
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeArgs": {
                "default": [],
                "description": "Optional arguments passed to the runtime executable.",
                "items": {
                  "type": "string"
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "default": "stable",
                "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "server": {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "node my-server.js"
                    },
                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                    "properties": {
                      "args": {
                        "default": [],
                        "description": "Command line arguments passed to the program.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attachSimplePort": {
                        "default": 9229,
                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                        "type": "integer"
                      },
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "console": {
                        "default": "internalConsole",
                        "description": "Where to launch the debug target.",
                        "enum": [
                          "internalConsole",
                          "integratedTerminal",
                          "externalTerminal"
                        ],
                        "enumDescriptions": [
                          "VS Code Debug Console (which doesn't support to read input from a program)",
                          "VS Code's integrated terminal",
                          "External terminal that can be configured via user settings"
                        ],
                        "type": "string"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "profileStartup": {
                        "default": true,
                        "description": "If true, will start profiling soon as the process launches",
                        "type": "boolean"
                      },
                      "program": {
                        "default": "",
                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": true,
                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "delay": {
                                "default": 1000,
                                "minimum": 0,
                                "type": "number"
                              },
                              "maxAttempts": {
                                "default": 10,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "runtimeArgs": {
                        "default": [],
                        "description": "Optional arguments passed to the runtime executable.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "runtimeExecutable": {
                        "default": "node",
                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "runtimeVersion": {
                        "default": "default",
                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                        "type": "string"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "stopOnEntry": {
                        "default": true,
                        "description": "Automatically stop program after launch.",
                        "type": [
                          "boolean",
                          "string"
                        ]
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "npm start"
                    },
                    "description": "Create JavaScript Debug Terminal",
                    "properties": {
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "command": {
                        "default": "npm start",
                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "url": {
                "default": "http://localhost:8080",
                "description": "Will search for a tab with this exact url and attach to it, if found",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "urlFilter": {
                "default": "",
                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "userDataDir": {
                "default": true,
                "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                "type": [
                  "string",
                  "boolean"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "vueComponentPaths": {
                "default": [
                  "${workspaceFolder}/**/*.vue"
                ],
                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "webRoot": {
                "default": "${workspaceFolder}",
                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "pwa-chrome"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                      "wholeBrowser",
                      "onlyTab"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object"
                  },
                  "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string"
                  },
                  "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 0,
                    "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                    "type": "number"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                    "type": [
                      "string",
                      "boolean"
                    ]
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-chrome"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                      "wholeBrowser",
                      "onlyTab"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object"
                  },
                  "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string"
                  },
                  "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 0,
                    "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                    "type": "number"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                    "type": [
                      "string",
                      "boolean"
                    ]
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-chrome"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                      "wholeBrowser",
                      "onlyTab"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object"
                  },
                  "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string"
                  },
                  "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 0,
                    "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                    "type": "number"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                    "type": [
                      "string",
                      "boolean"
                    ]
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-chrome"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "address": {
                "default": "localhost",
                "description": "IP address or hostname the debugged browser is listening on.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "browserAttachLocation": {
                "default": null,
                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "enum": [
                      "ui",
                      "workspace"
                    ],
                    "type": "string"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableNetworkCache": {
                "default": true,
                "description": "Controls whether to skip the network cache for each request",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "inspectUri": {
                "default": null,
                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pathMapping": {
                "default": {},
                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "default": 9229,
                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": null,
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "default": false,
                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "server": {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "node my-server.js"
                    },
                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                    "properties": {
                      "args": {
                        "default": [],
                        "description": "Command line arguments passed to the program.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attachSimplePort": {
                        "default": 9229,
                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                        "type": "integer"
                      },
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "console": {
                        "default": "internalConsole",
                        "description": "Where to launch the debug target.",
                        "enum": [
                          "internalConsole",
                          "integratedTerminal",
                          "externalTerminal"
                        ],
                        "enumDescriptions": [
                          "VS Code Debug Console (which doesn't support to read input from a program)",
                          "VS Code's integrated terminal",
                          "External terminal that can be configured via user settings"
                        ],
                        "type": "string"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "profileStartup": {
                        "default": true,
                        "description": "If true, will start profiling soon as the process launches",
                        "type": "boolean"
                      },
                      "program": {
                        "default": "",
                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": true,
                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "delay": {
                                "default": 1000,
                                "minimum": 0,
                                "type": "number"
                              },
                              "maxAttempts": {
                                "default": 10,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "runtimeArgs": {
                        "default": [],
                        "description": "Optional arguments passed to the runtime executable.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "runtimeExecutable": {
                        "default": "node",
                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "runtimeVersion": {
                        "default": "default",
                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                        "type": "string"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "stopOnEntry": {
                        "default": true,
                        "description": "Automatically stop program after launch.",
                        "type": [
                          "boolean",
                          "string"
                        ]
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "npm start"
                    },
                    "description": "Create JavaScript Debug Terminal",
                    "properties": {
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "command": {
                        "default": "npm start",
                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "targetSelection": {
                "default": "automatic",
                "enum": [
                  "pick",
                  "automatic"
                ],
                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "url": {
                "default": "http://localhost:8080",
                "description": "Will search for a tab with this exact url and attach to it, if found",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "urlFilter": {
                "default": "",
                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "useWebView": {
                "default": false,
                "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "vueComponentPaths": {
                "default": [
                  "${workspaceFolder}/**/*.vue"
                ],
                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "webRoot": {
                "default": "${workspaceFolder}",
                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "pwa-msedge"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "attach"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string"
                  },
                  "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean"
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "targetSelection": {
                    "default": "automatic",
                    "enum": [
                      "pick",
                      "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "useWebView": {
                    "default": false,
                    "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean"
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-msedge"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string"
                  },
                  "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean"
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "targetSelection": {
                    "default": "automatic",
                    "enum": [
                      "pick",
                      "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "useWebView": {
                    "default": false,
                    "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean"
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-msedge"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string"
                  },
                  "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean"
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "targetSelection": {
                    "default": "automatic",
                    "enum": [
                      "pick",
                      "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "useWebView": {
                    "default": false,
                    "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean"
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "pwa-msedge"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "address": {
                "default": "localhost",
                "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "browserLaunchLocation": {
                "default": null,
                "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "enum": [
                      "ui",
                      "workspace"
                    ],
                    "type": "string"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cleanUp": {
                "default": "wholeBrowser",
                "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                "enum": [
                  "wholeBrowser",
                  "onlyTab"
                ],
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "default": null,
                "description": "Optional working directory for the runtime executable.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableNetworkCache": {
                "default": true,
                "description": "Controls whether to skip the network cache for each request",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "default": {},
                "description": "Optional dictionary of environment key/value pairs for the browser.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "file": {
                "default": "${workspaceFolder}/index.html",
                "description": "A local html file to open in the browser",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "includeDefaultArgs": {
                "default": true,
                "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "inspectUri": {
                "default": null,
                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "default": [
                  "${workspaceFolder}/**/*.js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pathMapping": {
                "default": {},
                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "default": 9229,
                "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "profileStartup": {
                "default": true,
                "description": "If true, will start profiling soon as the process launches",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "resolveSourceMapLocations": {
                "default": null,
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeArgs": {
                "default": [],
                "description": "Optional arguments passed to the runtime executable.",
                "items": {
                  "type": "string"
                },
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "default": "stable",
                "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "server": {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "node my-server.js"
                    },
                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                    "properties": {
                      "args": {
                        "default": [],
                        "description": "Command line arguments passed to the program.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attachSimplePort": {
                        "default": 9229,
                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                        "type": "integer"
                      },
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "console": {
                        "default": "internalConsole",
                        "description": "Where to launch the debug target.",
                        "enum": [
                          "internalConsole",
                          "integratedTerminal",
                          "externalTerminal"
                        ],
                        "enumDescriptions": [
                          "VS Code Debug Console (which doesn't support to read input from a program)",
                          "VS Code's integrated terminal",
                          "External terminal that can be configured via user settings"
                        ],
                        "type": "string"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "profileStartup": {
                        "default": true,
                        "description": "If true, will start profiling soon as the process launches",
                        "type": "boolean"
                      },
                      "program": {
                        "default": "",
                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": true,
                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "delay": {
                                "default": 1000,
                                "minimum": 0,
                                "type": "number"
                              },
                              "maxAttempts": {
                                "default": 10,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "runtimeArgs": {
                        "default": [],
                        "description": "Optional arguments passed to the runtime executable.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "runtimeExecutable": {
                        "default": "node",
                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "runtimeVersion": {
                        "default": "default",
                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                        "type": "string"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "stopOnEntry": {
                        "default": true,
                        "description": "Automatically stop program after launch.",
                        "type": [
                          "boolean",
                          "string"
                        ]
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "npm start"
                    },
                    "description": "Create JavaScript Debug Terminal",
                    "properties": {
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "command": {
                        "default": "npm start",
                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${workspaceFolder}",
                        "description": "Absolute path to the working directory of the program being debugged.",
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${workspaceFolder}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${workspaceFolder}/**/*.js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${workspaceFolder}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "<node_internals>/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${workspaceFolder}/*",
                          "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                          "webpack://?:*/*": "${workspaceFolder}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations",
                        "markdownDescription": "Timeouts for several debugger operations",
                        "properties": {
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "console": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              },
                              "level": {
                                "description": "Configures the level of logs recorded.",
                                "enum": [
                                  "fatal",
                                  "error",
                                  "warn",
                                  "info",
                                  "verbose"
                                ]
                              },
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Configures whether logs are also returned to the debug console.",
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "Configures what types of logs are recorded.",
                                "items": {
                                  "enum": [
                                    "cdp",
                                    "dap",
                                    "runtime"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "default": [
                  "<node_internals>/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "webpack://?:*/*": "${workspaceFolder}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations",
                "markdownDescription": "Timeouts for several debugger operations",
                "properties": {
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "console": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      },
                      "level": {
                        "description": "Configures the level of logs recorded.",
                        "enum": [
                          "fatal",
                          "error",
                          "warn",
                          "info",
                          "verbose"
                        ]
                      },
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Configures whether logs are also returned to the debug console.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Configures what types of logs are recorded.",
                        "items": {
                          "enum": [
                            "cdp",
                            "dap",
                            "runtime"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "url": {
                "default": "http://localhost:8080",
                "description": "Will search for a tab with this exact url and attach to it, if found",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "urlFilter": {
                "default": "",
                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "useWebView": {
                "default": false,
                "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                "type": "boolean",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "userDataDir": {
                "default": true,
                "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                "type": [
                  "string",
                  "boolean"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "vueComponentPaths": {
                "default": [
                  "${workspaceFolder}/**/*.vue"
                ],
                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                "type": "array",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "webRoot": {
                "default": "${workspaceFolder}",
                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                "type": "string",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "pwa-msedge"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                    "type": "string"
                  },
                  "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                      "wholeBrowser",
                      "onlyTab"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object"
                  },
                  "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string"
                  },
                  "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                    "type": "number"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "useWebView": {
                    "default": false,
                    "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean"
                  },
                  "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                    "type": [
                      "string",
                      "boolean"
                    ]
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-msedge"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                    "type": "string"
                  },
                  "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                      "wholeBrowser",
                      "onlyTab"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object"
                  },
                  "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string"
                  },
                  "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                    "type": "number"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "useWebView": {
                    "default": false,
                    "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean"
                  },
                  "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                    "type": [
                      "string",
                      "boolean"
                    ]
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-msedge"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "address": {
                    "default": "localhost",
                    "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                    "type": "string"
                  },
                  "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "enum": [
                          "ui",
                          "workspace"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                      "wholeBrowser",
                      "onlyTab"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string"
                  },
                  "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object"
                  },
                  "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string"
                  },
                  "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean"
                  },
                  "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "outFiles": {
                    "default": [
                      "${workspaceFolder}/**/*.js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object"
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "port": {
                    "default": 9229,
                    "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                    "type": "number"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean"
                  },
                  "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "server": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "properties": {
                          "args": {
                            "default": [],
                            "description": "Command line arguments passed to the program.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "attachSimplePort": {
                            "default": 9229,
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "type": "integer"
                          },
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "console": {
                            "default": "internalConsole",
                            "description": "Where to launch the debug target.",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "type": "string"
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "profileStartup": {
                            "default": true,
                            "description": "If true, will start profiling soon as the process launches",
                            "type": "boolean"
                          },
                          "program": {
                            "default": "",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "type": "string"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "restart": {
                            "default": true,
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                  },
                                  "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "runtimeArgs": {
                            "default": [],
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "runtimeExecutable": {
                            "default": "node",
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "runtimeVersion": {
                            "default": "default",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "type": "string"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "stopOnEntry": {
                            "default": true,
                            "description": "Automatically stop program after launch.",
                            "type": [
                              "boolean",
                              "string"
                            ]
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "description": "Create JavaScript Debug Terminal",
                        "properties": {
                          "autoAttachChildProcesses": {
                            "default": true,
                            "description": "Attach debugger to new child processes automatically.",
                            "type": "boolean"
                          },
                          "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "type": "array"
                          },
                          "command": {
                            "default": "npm start",
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                          },
                          "cwd": {
                            "default": "${workspaceFolder}",
                            "description": "Absolute path to the working directory of the program being debugged.",
                            "type": "string"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                          },
                          "env": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "default": {},
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "type": "object"
                          },
                          "envFile": {
                            "default": "${workspaceFolder}/.env",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "type": "string"
                          },
                          "localRoot": {
                            "default": null,
                            "description": "Path to the local directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nodeVersionHint": {
                            "default": 12,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "minimum": 8,
                            "type": "number"
                          },
                          "outFiles": {
                            "default": [
                              "${workspaceFolder}/**/*.js",
                              "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array"
                            ]
                          },
                          "outputCapture": {
                            "default": "console",
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                          },
                          "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                          },
                          "remoteRoot": {
                            "default": null,
                            "description": "Absolute path to the remote directory containing the program.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resolveSourceMapLocations": {
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "runtimeSourcemapPausePatterns": {
                            "default": [],
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "type": "array"
                          },
                          "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "properties": {
                                  "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onAttach"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "skipFiles": {
                            "default": [
                              "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                          },
                          "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                          },
                          "sourceMapPathOverrides": {
                            "default": {
                              "meteor://💻app/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                          },
                          "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                          },
                          "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                          },
                          "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations",
                            "markdownDescription": "Timeouts for several debugger operations",
                            "properties": {
                              "sourceMapCumulativePause": {
                                "default": 1000,
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "type": "number"
                              },
                              "sourceMapMinPause": {
                                "default": 1000,
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                              {
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                "type": "boolean"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "console": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                  },
                                  "level": {
                                    "description": "Configures the level of logs recorded.",
                                    "enum": [
                                      "fatal",
                                      "error",
                                      "warn",
                                      "info",
                                      "verbose"
                                    ]
                                  },
                                  "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "stdio": {
                                    "description": "Configures whether logs are also returned to the debug console.",
                                    "type": "boolean"
                                  },
                                  "tags": {
                                    "description": "Configures what types of logs are recorded.",
                                    "items": {
                                      "enum": [
                                        "cdp",
                                        "dap",
                                        "runtime"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations",
                    "markdownDescription": "Timeouts for several debugger operations",
                    "properties": {
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "console": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          },
                          "level": {
                            "description": "Configures the level of logs recorded.",
                            "enum": [
                              "fatal",
                              "error",
                              "warn",
                              "info",
                              "verbose"
                            ]
                          },
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Configures whether logs are also returned to the debug console.",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": "Configures what types of logs are recorded.",
                            "items": {
                              "enum": [
                                "cdp",
                                "dap",
                                "runtime"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string"
                  },
                  "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string"
                  },
                  "useWebView": {
                    "default": false,
                    "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean"
                  },
                  "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
                    "type": [
                      "string",
                      "boolean"
                    ]
                  },
                  "vueComponentPaths": {
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array"
                  },
                  "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string"
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "pwa-msedge"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "auto",
                  "inspector",
                  "legacy"
                ],
                "enumDescriptions": [
                  "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                  "New protocol supported by Node.js versions >= 6.3",
                  "Old protocol supported by Node.js versions < 8.0"
                ],
                "description": "Node.js debug protocol to use.",
                "default": "inspector",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "program": {
                "type": "string",
                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "externalConsole": {
                "type": "boolean",
                "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "console": {
                "type": "string",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "VS Code Debug Console (which doesn't support to read input from a program)",
                  "VS Code's integrated terminal",
                  "External terminal that can be configured via user settings"
                ],
                "description": "Where to launch the debug target.",
                "default": "internalConsole",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged.",
                "default": "${workspaceFolder}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                "default": "node",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeVersion": {
                "type": "string",
                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                "default": "default",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeArgs": {
                "type": "array",
                "description": "Optional arguments passed to the runtime executable.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions.",
                "default": "${workspaceFolder}/.env",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 5858.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to the local directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Absolute path to the remote directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "useWSL": {
                "type": "boolean",
                "description": "Use Windows Subsystem for Linux.",
                "default": true,
                "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "enum": [
                  "console",
                  "std"
                ],
                "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                "default": "console",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "default": {
                  "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                  "webpack:///./*": "${workspaceRoot}/*",
                  "webpack:///*": "*"
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "autoAttachChildProcesses": {
                "type": "boolean",
                "description": "Attach debugger to new child processes automatically.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "externalConsole": {
                    "type": "boolean",
                    "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                    "default": true
                  },
                  "console": {
                    "type": "string",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "description": "Where to launch the debug target.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "default": "node"
                  },
                  "runtimeVersion": {
                    "type": "string",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "default": "default"
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "useWSL": {
                    "type": "boolean",
                    "description": "Use Windows Subsystem for Linux.",
                    "default": true,
                    "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "autoAttachChildProcesses": {
                    "type": "boolean",
                    "description": "Attach debugger to new child processes automatically.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "externalConsole": {
                    "type": "boolean",
                    "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                    "default": true
                  },
                  "console": {
                    "type": "string",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "description": "Where to launch the debug target.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "default": "node"
                  },
                  "runtimeVersion": {
                    "type": "string",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "default": "default"
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "useWSL": {
                    "type": "boolean",
                    "description": "Use Windows Subsystem for Linux.",
                    "default": true,
                    "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "autoAttachChildProcesses": {
                    "type": "boolean",
                    "description": "Attach debugger to new child processes automatically.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "externalConsole": {
                    "type": "boolean",
                    "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                    "default": true
                  },
                  "console": {
                    "type": "string",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "description": "Where to launch the debug target.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "default": "node"
                  },
                  "runtimeVersion": {
                    "type": "string",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "default": "default"
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "useWSL": {
                    "type": "boolean",
                    "description": "Use Windows Subsystem for Linux.",
                    "default": true,
                    "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "autoAttachChildProcesses": {
                    "type": "boolean",
                    "description": "Attach debugger to new child processes automatically.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "auto",
                  "inspector",
                  "legacy"
                ],
                "enumDescriptions": [
                  "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                  "New protocol supported by Node.js versions >= 6.3",
                  "Old protocol supported by Node.js versions < 8.0"
                ],
                "description": "Node.js debug protocol to use.",
                "default": "inspector",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged.",
                "default": "${workspaceFolder}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "processId": {
                "type": "string",
                "description": "ID of process to attach to.",
                "default": "${command:PickProcess}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 5858.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to the local directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Absolute path to the remote directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "default": {
                  "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                  "webpack:///./*": "${workspaceRoot}/*",
                  "webpack:///*": "*"
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "attach"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "processId": {
                    "type": "string",
                    "description": "ID of process to attach to.",
                    "default": "${command:PickProcess}"
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "processId": {
                    "type": "string",
                    "description": "ID of process to attach to.",
                    "default": "${command:PickProcess}"
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "processId": {
                    "type": "string",
                    "description": "ID of process to attach to.",
                    "default": "${command:PickProcess}"
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "required": [
              "name",
              "type",
              "request",
              "args"
            ],
            "properties": {
              "runtimeExecutable": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "Absolute path to VS Code.",
                "default": "${execPath}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": [
                  "--extensionDevelopmentPath=${workspaceFolder}"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "markdownDescription": "Environment variables passed to the extension host.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop the extension host after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": "${workspaceFolder}/out",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "default": [
                  "${workspaceFolder}/out/**/*.js"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableSourceMapCaching": {
                "type": "boolean",
                "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "extensionHost"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Absolute path to VS Code.",
                    "default": "${execPath}"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the extension host.",
                    "default": {}
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop the extension host after launch.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": "${workspaceFolder}/out"
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "${workspaceFolder}/out/**/*.js"
                    ]
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Absolute path to VS Code.",
                    "default": "${execPath}"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the extension host.",
                    "default": {}
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop the extension host after launch.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": "${workspaceFolder}/out"
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "${workspaceFolder}/out/**/*.js"
                    ]
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Absolute path to VS Code.",
                    "default": "${execPath}"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the extension host.",
                    "default": {}
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop the extension host after launch.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": "${workspaceFolder}/out"
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "${workspaceFolder}/out/**/*.js"
                    ]
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          {
            "required": [
              "name",
              "type",
              "request",
              "cwd"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Absolute path to the program.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "console": {
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                "default": "internalConsole",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged.",
                "default": "${workspaceFolder}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeArgs": {
                "type": "array",
                "description": "Optional arguments passed to the runtime executable.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 9229.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of debug port. Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "diagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs its own diagnostic info to the console",
                "default": true,
                "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "verboseDiagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                "default": true,
                "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "enum": [
                  "verbose",
                  true
                ],
                "default": true,
                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions.",
                "default": "${workspaceFolder}/.env",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "enum": [
                  "console",
                  "std"
                ],
                "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                "default": "console",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableSourceMapCaching": {
                "type": "boolean",
                "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node2"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "console": {
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                    "default": null
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "console": {
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                    "default": null
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "console": {
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                    "default": null
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 9229.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of debug port. Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The local source root that corresponds to the 'remoteRoot'.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The source root of the remote host.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "diagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs its own diagnostic info to the console",
                "default": true,
                "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "verboseDiagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                "default": true,
                "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "enum": [
                  "verbose",
                  true
                ],
                "default": true,
                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableSourceMapCaching": {
                "type": "boolean",
                "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node2"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "attach"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The local source root that corresponds to the 'remoteRoot'.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The source root of the remote host.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The local source root that corresponds to the 'remoteRoot'.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The source root of the remote host.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The local source root that corresponds to the 'remoteRoot'.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The source root of the remote host.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          }
        ]
      }
    },
    "compounds": {
      "type": "array",
      "description": "List of compounds. Each compound references multiple configurations which will get launched together.",
      "items": {
        "type": "object",
        "required": [
          "name",
          "configurations"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of compound. Appears in the launch configuration drop down menu."
          },
          "presentation": {
            "type": "object",
            "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
            "properties": {
              "hidden": {
                "type": "boolean",
                "default": false,
                "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
              },
              "group": {
                "type": "string",
                "default": "",
                "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
              },
              "order": {
                "type": "number",
                "default": 1,
                "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
              }
            },
            "default": {
              "hidden": false,
              "group": "",
              "order": 1
            },
            "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
            "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
          },
          "configurations": {
            "type": "array",
            "default": [],
            "items": {
              "oneOf": [
                {
                  "enum": [],
                  "description": "Please use unique configuration names."
                },
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "enum": [],
                      "description": "Name of compound. Appears in the launch configuration drop down menu."
                    },
                    "folder": {
                      "enum": [
                        "v1.49.2"
                      ],
                      "description": "Name of folder in which the compound is located."
                    }
                  }
                }
              ]
            },
            "description": "Names of configurations that will be started as part of this compound."
          },
          "stopAll": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether manually terminating one session will stop all of the compound sessions."
          },
          "preLaunchTask": {
            "type": "string",
            "default": "",
            "description": "Task to run before any of the compound configurations start."
          }
        },
        "default": {
          "name": "Compound",
          "configurations": []
        }
      },
      "default": [
        {
          "name": "Compound",
          "configurations": []
        }
      ]
    },
    "inputs": {
      "type": "array",
      "description": "User inputs. Used for defining user input prompts, such as free string input or a choice from several options.",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "description"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "promptString"
                ],
                "enumDescriptions": [
                  "The 'promptString' type opens an input box to ask the user for input."
                ]
              },
              "description": {
                "type": "string",
                "description": "The description is shown when the user is prompted for input."
              },
              "default": {
                "type": "string",
                "description": "The default value for the input."
              },
              "password": {
                "type": "boolean",
                "description": "Controls if a password input is shown. Password input hides the typed text."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "description",
              "options"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "pickString"
                ],
                "enumDescriptions": [
                  "The 'pickString' type shows a selection list."
                ]
              },
              "description": {
                "type": "string",
                "description": "The description is shown when the user is prompted for input."
              },
              "default": {
                "type": "string",
                "description": "The default value for the input."
              },
              "options": {
                "type": "array",
                "description": "An array of strings that defines the options for a quick pick.",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "Label for the option."
                        },
                        "value": {
                          "type": "string",
                          "description": "Value for the option."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "command"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "command"
                ],
                "enumDescriptions": [
                  "The 'command' type executes a command."
                ]
              },
              "command": {
                "type": "string",
                "description": "The command to execute for this input variable."
              },
              "args": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Optional arguments passed to the command."
                  },
                  {
                    "type": "array",
                    "description": "Optional arguments passed to the command."
                  },
                  {
                    "type": "string",
                    "description": "Optional arguments passed to the command."
                  }
                ]
              }
            }
          }
        ]
      },
      "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
      "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
    }
  }
}