{
  "properties": {
    "editor.tabSize": {
      "type": "number",
      "default": 4,
      "minimum": 1,
      "markdownDescription": "The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
      "scope": 5
    },
    "editor.insertSpaces": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
      "scope": 5
    },
    "editor.detectIndentation": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.",
      "scope": 5
    },
    "editor.trimAutoWhitespace": {
      "type": "boolean",
      "default": true,
      "description": "Remove trailing auto inserted whitespace.",
      "scope": 5
    },
    "editor.largeFileOptimizations": {
      "type": "boolean",
      "default": true,
      "description": "Special handling for large files to disable certain memory intensive features.",
      "scope": 5
    },
    "editor.wordBasedSuggestions": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether completions should be computed based on words in the document.",
      "scope": 5
    },
    "editor.semanticHighlighting.enabled": {
      "enum": [
        true,
        false,
        "configuredByTheme"
      ],
      "enumDescriptions": [
        "Semantic highlighting enabled for all color themes.",
        "Semantic highlighting disabled for all color themes.",
        "Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting."
      ],
      "default": "configuredByTheme",
      "description": "Controls whether the semanticHighlighting is shown for the languages that support it.",
      "scope": 5
    },
    "editor.stablePeek": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Keep peek editors open even when double clicking their content or when hitting `Escape`.",
      "scope": 5
    },
    "editor.maxTokenizationLineLength": {
      "type": "integer",
      "default": 20000,
      "description": "Lines above this length will not be tokenized for performance reasons",
      "scope": 5
    },
    "diffEditor.maxComputationTime": {
      "type": "number",
      "default": 5000,
      "description": "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.",
      "scope": 5
    },
    "diffEditor.renderSideBySide": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the diff editor shows the diff side by side or inline.",
      "scope": 5
    },
    "diffEditor.ignoreTrimWhitespace": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, the diff editor ignores changes in leading or trailing whitespace.",
      "scope": 5
    },
    "diffEditor.renderIndicators": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the diff editor shows +/- indicators for added/removed changes.",
      "scope": 5
    },
    "editor.acceptSuggestionOnCommitCharacter": {
      "markdownDescription": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.acceptSuggestionOnEnter": {
      "markdownEnumDescriptions": [
        "",
        "Only accept a suggestion with `Enter` when it makes a textual change.",
        ""
      ],
      "markdownDescription": "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.",
      "type": "string",
      "enum": [
        "on",
        "smart",
        "off"
      ],
      "default": "on",
      "scope": 5
    },
    "editor.accessibilitySupport": {
      "type": "string",
      "enum": [
        "auto",
        "on",
        "off"
      ],
      "enumDescriptions": [
        "The editor will use platform APIs to detect when a Screen Reader is attached.",
        "The editor will be permanently optimized for usage with a Screen Reader.",
        "The editor will never be optimized for usage with a Screen Reader."
      ],
      "default": "auto",
      "description": "Controls whether the editor should run in a mode where it is optimized for screen readers.",
      "scope": 5
    },
    "editor.accessibilityPageSize": {
      "description": "Controls the number of lines in the editor that can be read out by a screen reader. Warning: this has a performance implication for numbers larger than the default.",
      "type": "integer",
      "default": 10,
      "minimum": 1,
      "maximum": 1073741824,
      "scope": 5
    },
    "editor.autoClosingBrackets": {
      "enumDescriptions": [
        "",
        "Use language configurations to determine when to autoclose brackets.",
        "Autoclose brackets only when the cursor is to the left of whitespace.",
        ""
      ],
      "description": "Controls whether the editor should automatically close brackets after the user adds an opening bracket.",
      "type": "string",
      "enum": [
        "always",
        "languageDefined",
        "beforeWhitespace",
        "never"
      ],
      "default": "languageDefined",
      "scope": 5
    },
    "editor.autoClosingOvertype": {
      "enumDescriptions": [
        "",
        "Type over closing quotes or brackets only if they were automatically inserted.",
        ""
      ],
      "description": "Controls whether the editor should type over closing quotes or brackets.",
      "type": "string",
      "enum": [
        "always",
        "auto",
        "never"
      ],
      "default": "auto",
      "scope": 5
    },
    "editor.autoClosingQuotes": {
      "enumDescriptions": [
        "",
        "Use language configurations to determine when to autoclose quotes.",
        "Autoclose quotes only when the cursor is to the left of whitespace.",
        ""
      ],
      "description": "Controls whether the editor should automatically close quotes after the user adds an opening quote.",
      "type": "string",
      "enum": [
        "always",
        "languageDefined",
        "beforeWhitespace",
        "never"
      ],
      "default": "languageDefined",
      "scope": 5
    },
    "editor.autoIndent": {
      "enumDescriptions": [
        "The editor will not insert indentation automatically.",
        "The editor will keep the current line's indentation.",
        "The editor will keep the current line's indentation and honor language defined brackets.",
        "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.",
        "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."
      ],
      "description": "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.",
      "type": "string",
      "enum": [
        "none",
        "keep",
        "brackets",
        "advanced",
        "full"
      ],
      "default": "full",
      "scope": 5
    },
    "editor.autoSurround": {
      "enumDescriptions": [
        "Use language configurations to determine when to automatically surround selections.",
        "Surround with quotes but not brackets.",
        "Surround with brackets but not quotes.",
        ""
      ],
      "description": "Controls whether the editor should automatically surround selections.",
      "type": "string",
      "enum": [
        "languageDefined",
        "quotes",
        "brackets",
        "never"
      ],
      "default": "languageDefined",
      "scope": 5
    },
    "editor.codeLens": {
      "description": "Controls whether the editor shows CodeLens.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.colorDecorators": {
      "description": "Controls whether the editor should render the inline color decorators and color picker.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.columnSelection": {
      "description": "Enable that the selection with the mouse and keys is doing column selection.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.comments.insertSpace": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether a space character is inserted when commenting.",
      "scope": 5
    },
    "editor.copyWithSyntaxHighlighting": {
      "description": "Controls whether syntax highlighting should be copied into the clipboard.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.cursorBlinking": {
      "description": "Control the cursor animation style.",
      "type": "string",
      "enum": [
        "blink",
        "smooth",
        "phase",
        "expand",
        "solid"
      ],
      "default": "blink",
      "scope": 5
    },
    "editor.cursorSmoothCaretAnimation": {
      "description": "Controls whether the smooth caret animation should be enabled.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.cursorStyle": {
      "description": "Controls the cursor style.",
      "type": "string",
      "enum": [
        "line",
        "block",
        "underline",
        "line-thin",
        "block-outline",
        "underline-thin"
      ],
      "default": "line",
      "scope": 5
    },
    "editor.cursorSurroundingLines": {
      "description": "Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or `scrollOffset` in some other editors.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1073741824,
      "scope": 5
    },
    "editor.cursorSurroundingLinesStyle": {
      "enumDescriptions": [
        "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.",
        "`cursorSurroundingLines` is enforced always."
      ],
      "description": "Controls when `cursorSurroundingLines` should be enforced.",
      "type": "string",
      "enum": [
        "default",
        "all"
      ],
      "default": "default",
      "scope": 5
    },
    "editor.cursorWidth": {
      "markdownDescription": "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1073741824,
      "scope": 5
    },
    "editor.dragAndDrop": {
      "description": "Controls whether the editor should allow moving selections via drag and drop.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.emptySelectionClipboard": {
      "description": "Controls whether copying without a selection copies the current line.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.fastScrollSensitivity": {
      "markdownDescription": "Scrolling speed multiplier when pressing `Alt`.",
      "type": "number",
      "default": 5,
      "scope": 5
    },
    "editor.find.seedSearchStringFromSelection": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the search string in the Find Widget is seeded from the editor selection.",
      "scope": 5
    },
    "editor.find.autoFindInSelection": {
      "type": "string",
      "enum": [
        "never",
        "always",
        "multiline"
      ],
      "default": "never",
      "enumDescriptions": [
        "Never turn on Find in selection automatically (default)",
        "Always turn on Find in selection automatically",
        "Turn on Find in selection automatically when multiple lines of content are selected."
      ],
      "description": "Controls whether the find operation is carried out on selected text or the entire file in the editor.",
      "scope": 5
    },
    "editor.find.addExtraSpaceOnTop": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.",
      "scope": 5
    },
    "editor.find.loop": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.",
      "scope": 5
    },
    "editor.folding": {
      "description": "Controls whether the editor has code folding enabled.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.foldingStrategy": {
      "enumDescriptions": [
        "Use a language-specific folding strategy if available, else the indentation-based one.",
        "Use the indentation-based folding strategy."
      ],
      "description": "Controls the strategy for computing folding ranges.",
      "type": "string",
      "enum": [
        "auto",
        "indentation"
      ],
      "default": "auto",
      "scope": 5
    },
    "editor.foldingHighlight": {
      "description": "Controls whether the editor should highlight folded ranges.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.unfoldOnClickAfterEndOfLine": {
      "description": "Controls whether clicking on the empty content after a folded line will unfold the line.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.fontFamily": {
      "description": "Controls the font family.",
      "type": "string",
      "default": "'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",
      "scope": 5
    },
    "editor.fontLigatures": {
      "anyOf": [
        {
          "type": "boolean",
          "description": "Enables/Disables font ligatures."
        },
        {
          "type": "string",
          "description": "Explicit font-feature-settings."
        }
      ],
      "description": "Configures font ligatures or font features.",
      "default": false,
      "scope": 5
    },
    "editor.fontSize": {
      "type": "number",
      "minimum": 6,
      "maximum": 100,
      "default": 14,
      "description": "Controls the font size in pixels.",
      "scope": 5
    },
    "editor.fontWeight": {
      "enum": [
        "normal",
        "bold",
        "100",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "900"
      ],
      "description": "Controls the font weight.",
      "type": "string",
      "default": "normal",
      "scope": 5
    },
    "editor.formatOnPaste": {
      "description": "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.formatOnType": {
      "description": "Controls whether the editor should automatically format the line after typing.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.glyphMargin": {
      "description": "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.gotoLocation.multiple": {
      "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.",
      "default": null,
      "scope": 5
    },
    "editor.gotoLocation.multipleDefinitions": {
      "description": "Controls the behavior the 'Go to Definition'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show peek view of the results (default)",
        "Go to the primary result and show a peek view",
        "Go to the primary result and enable peek-less navigation to others"
      ],
      "scope": 5
    },
    "editor.gotoLocation.multipleTypeDefinitions": {
      "description": "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show peek view of the results (default)",
        "Go to the primary result and show a peek view",
        "Go to the primary result and enable peek-less navigation to others"
      ],
      "scope": 5
    },
    "editor.gotoLocation.multipleDeclarations": {
      "description": "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show peek view of the results (default)",
        "Go to the primary result and show a peek view",
        "Go to the primary result and enable peek-less navigation to others"
      ],
      "scope": 5
    },
    "editor.gotoLocation.multipleImplementations": {
      "description": "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show peek view of the results (default)",
        "Go to the primary result and show a peek view",
        "Go to the primary result and enable peek-less navigation to others"
      ],
      "scope": 5
    },
    "editor.gotoLocation.multipleReferences": {
      "description": "Controls the behavior the 'Go to References'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show peek view of the results (default)",
        "Go to the primary result and show a peek view",
        "Go to the primary result and enable peek-less navigation to others"
      ],
      "scope": 5
    },
    "editor.gotoLocation.alternativeDefinitionCommand": {
      "type": "string",
      "default": "editor.action.goToReferences",
      "description": "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.",
      "scope": 5
    },
    "editor.gotoLocation.alternativeTypeDefinitionCommand": {
      "type": "string",
      "default": "editor.action.goToReferences",
      "description": "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.",
      "scope": 5
    },
    "editor.gotoLocation.alternativeDeclarationCommand": {
      "type": "string",
      "default": "editor.action.goToReferences",
      "description": "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.",
      "scope": 5
    },
    "editor.gotoLocation.alternativeImplementationCommand": {
      "type": "string",
      "default": "",
      "description": "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.",
      "scope": 5
    },
    "editor.gotoLocation.alternativeReferenceCommand": {
      "type": "string",
      "default": "",
      "description": "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.",
      "scope": 5
    },
    "editor.hideCursorInOverviewRuler": {
      "description": "Controls whether the cursor should be hidden in the overview ruler.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.highlightActiveIndentGuide": {
      "description": "Controls whether the editor should highlight the active indent guide.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.hover.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the hover is shown.",
      "scope": 5
    },
    "editor.hover.delay": {
      "type": "number",
      "default": 300,
      "description": "Controls the delay in milliseconds after which the hover is shown.",
      "scope": 5
    },
    "editor.hover.sticky": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the hover should remain visible when mouse is moved over it.",
      "scope": 5
    },
    "editor.letterSpacing": {
      "description": "Controls the letter spacing in pixels.",
      "type": "number",
      "default": 0,
      "scope": 5
    },
    "editor.lightbulb.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enables the code action lightbulb in the editor.",
      "scope": 5
    },
    "editor.lineHeight": {
      "description": "Controls the line height. Use 0 to compute the line height from the font size.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 150,
      "scope": 5
    },
    "editor.lineNumbers": {
      "type": "string",
      "enum": [
        "off",
        "on",
        "relative",
        "interval"
      ],
      "enumDescriptions": [
        "Line numbers are not rendered.",
        "Line numbers are rendered as absolute number.",
        "Line numbers are rendered as distance in lines to cursor position.",
        "Line numbers are rendered every 10 lines."
      ],
      "default": "on",
      "description": "Controls the display of line numbers.",
      "scope": 5
    },
    "editor.links": {
      "description": "Controls whether the editor should detect links and make them clickable.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.matchBrackets": {
      "description": "Highlight matching brackets.",
      "type": "string",
      "enum": [
        "always",
        "near",
        "never"
      ],
      "default": "always",
      "scope": 5
    },
    "editor.minimap.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the minimap is shown.",
      "scope": 5
    },
    "editor.minimap.size": {
      "type": "string",
      "enum": [
        "proportional",
        "fill",
        "fit"
      ],
      "enumDescriptions": [
        "The minimap has the same size as the editor contents (and might scroll).",
        "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).",
        "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."
      ],
      "default": "proportional",
      "description": "Controls the size of the minimap.",
      "scope": 5
    },
    "editor.minimap.side": {
      "type": "string",
      "enum": [
        "left",
        "right"
      ],
      "default": "right",
      "description": "Controls the side where to render the minimap.",
      "scope": 5
    },
    "editor.minimap.showSlider": {
      "type": "string",
      "enum": [
        "always",
        "mouseover"
      ],
      "default": "mouseover",
      "description": "Controls when the minimap slider is shown.",
      "scope": 5
    },
    "editor.minimap.scale": {
      "type": "number",
      "default": 1,
      "minimum": 1,
      "maximum": 3,
      "enum": [
        1,
        2,
        3
      ],
      "description": "Scale of content drawn in the minimap: 1, 2 or 3.",
      "scope": 5
    },
    "editor.minimap.renderCharacters": {
      "type": "boolean",
      "default": true,
      "description": "Render the actual characters on a line as opposed to color blocks.",
      "scope": 5
    },
    "editor.minimap.maxColumn": {
      "type": "number",
      "default": 120,
      "description": "Limit the width of the minimap to render at most a certain number of columns.",
      "scope": 5
    },
    "editor.mouseWheelScrollSensitivity": {
      "markdownDescription": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.",
      "type": "number",
      "default": 1,
      "scope": 5
    },
    "editor.mouseWheelZoom": {
      "markdownDescription": "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.multiCursorMergeOverlapping": {
      "description": "Merge multiple cursors when they are overlapping.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.multiCursorModifier": {
      "markdownEnumDescriptions": [
        "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
        "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
      ],
      "markdownDescription": "The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).",
      "type": "string",
      "enum": [
        "ctrlCmd",
        "alt"
      ],
      "default": "alt",
      "scope": 5
    },
    "editor.multiCursorPaste": {
      "markdownEnumDescriptions": [
        "Each cursor pastes a single line of the text.",
        "Each cursor pastes the full text."
      ],
      "markdownDescription": "Controls pasting when the line count of the pasted text matches the cursor count.",
      "type": "string",
      "enum": [
        "spread",
        "full"
      ],
      "default": "spread",
      "scope": 5
    },
    "editor.occurrencesHighlight": {
      "description": "Controls whether the editor should highlight semantic symbol occurrences.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.overviewRulerBorder": {
      "description": "Controls whether a border should be drawn around the overview ruler.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.padding.top": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "description": "Controls the amount of space between the top edge of the editor and the first line.",
      "scope": 5
    },
    "editor.padding.bottom": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "description": "Controls the amount of space between the bottom edge of the editor and the last line.",
      "scope": 5
    },
    "editor.parameterHints.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enables a pop-up that shows parameter documentation and type information as you type.",
      "scope": 5
    },
    "editor.parameterHints.cycle": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.",
      "scope": 5
    },
    "editor.peekWidgetDefaultFocus": {
      "enumDescriptions": [
        "Focus the tree when opening peek",
        "Focus the editor when opening peek"
      ],
      "description": "Controls whether to focus the inline editor or the tree in the peek widget.",
      "type": "string",
      "enum": [
        "tree",
        "editor"
      ],
      "default": "tree",
      "scope": 5
    },
    "editor.definitionLinkOpensInPeek": {
      "description": "Controls whether the Go to Definition mouse gesture always opens the peek widget.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.quickSuggestions": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "properties": {
            "strings": {
              "type": "boolean",
              "default": false,
              "description": "Enable quick suggestions inside strings."
            },
            "comments": {
              "type": "boolean",
              "default": false,
              "description": "Enable quick suggestions inside comments."
            },
            "other": {
              "type": "boolean",
              "default": true,
              "description": "Enable quick suggestions outside of strings and comments."
            }
          }
        }
      ],
      "default": {
        "other": true,
        "comments": false,
        "strings": false
      },
      "description": "Controls whether suggestions should automatically show up while typing.",
      "scope": 5
    },
    "editor.quickSuggestionsDelay": {
      "description": "Controls the delay in milliseconds after which quick suggestions will show up.",
      "type": "integer",
      "default": 10,
      "minimum": 0,
      "maximum": 1073741824,
      "scope": 5
    },
    "editor.renameOnType": {
      "description": "Controls whether the editor auto renames on type.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.renderControlCharacters": {
      "description": "Controls whether the editor should render control characters.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.renderIndentGuides": {
      "description": "Controls whether the editor should render indent guides.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.renderFinalNewline": {
      "description": "Render last line number when the file ends with a newline.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.renderLineHighlight": {
      "enumDescriptions": [
        "",
        "",
        "",
        "Highlights both the gutter and the current line."
      ],
      "description": "Controls how the editor should render the current line highlight.",
      "type": "string",
      "enum": [
        "none",
        "gutter",
        "line",
        "all"
      ],
      "default": "line",
      "scope": 5
    },
    "editor.renderLineHighlightOnlyWhenFocus": {
      "description": "Controls if the editor should render the current line highlight only when the editor is focused",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.renderWhitespace": {
      "enumDescriptions": [
        "",
        "Render whitespace characters except for single spaces between words.",
        "Render whitespace characters only on selected text.",
        ""
      ],
      "description": "Controls how the editor should render whitespace characters.",
      "type": "string",
      "enum": [
        "none",
        "boundary",
        "selection",
        "all"
      ],
      "default": "selection",
      "scope": 5
    },
    "editor.roundedSelection": {
      "description": "Controls whether selections should have rounded corners.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.rulers": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "type": "number",
            "description": "Number of monospace characters at which this editor ruler will render."
          },
          {
            "type": [
              "object"
            ],
            "properties": {
              "column": {
                "type": "number",
                "description": "Number of monospace characters at which this editor ruler will render."
              },
              "color": {
                "type": "string",
                "description": "Color of this editor ruler.",
                "format": "color-hex"
              }
            }
          }
        ]
      },
      "default": [],
      "description": "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.",
      "scope": 5
    },
    "editor.scrollBeyondLastColumn": {
      "description": "Controls the number of extra characters beyond which the editor will scroll horizontally.",
      "type": "integer",
      "default": 5,
      "minimum": 0,
      "maximum": 1073741824,
      "scope": 5
    },
    "editor.scrollBeyondLastLine": {
      "description": "Controls whether the editor will scroll beyond the last line.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.scrollPredominantAxis": {
      "description": "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.selectionClipboard": {
      "description": "Controls whether the Linux primary clipboard should be supported.",
      "included": true,
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.selectionHighlight": {
      "description": "Controls whether the editor should highlight matches similar to the selection.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.showFoldingControls": {
      "enumDescriptions": [
        "Always show the folding controls.",
        "Only show the folding controls when the mouse is over the gutter."
      ],
      "description": "Controls when the folding controls on the gutter are shown.",
      "type": "string",
      "enum": [
        "always",
        "mouseover"
      ],
      "default": "mouseover",
      "scope": 5
    },
    "editor.showUnused": {
      "description": "Controls fading out of unused code.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.snippetSuggestions": {
      "enumDescriptions": [
        "Show snippet suggestions on top of other suggestions.",
        "Show snippet suggestions below other suggestions.",
        "Show snippets suggestions with other suggestions.",
        "Do not show snippet suggestions."
      ],
      "description": "Controls whether snippets are shown with other suggestions and how they are sorted.",
      "type": "string",
      "enum": [
        "top",
        "bottom",
        "inline",
        "none"
      ],
      "default": "inline",
      "scope": 5
    },
    "editor.smoothScrolling": {
      "description": "Controls whether the editor will scroll using an animation.",
      "type": "boolean",
      "default": false,
      "scope": 5
    },
    "editor.suggest.insertMode": {
      "type": "string",
      "enum": [
        "insert",
        "replace"
      ],
      "enumDescriptions": [
        "Insert suggestion without overwriting text right of the cursor.",
        "Insert suggestion and overwrite text right of the cursor."
      ],
      "default": "insert",
      "description": "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.",
      "scope": 5
    },
    "editor.suggest.filterGraceful": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether filtering and sorting suggestions accounts for small typos.",
      "scope": 5
    },
    "editor.suggest.localityBonus": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether sorting favours words that appear close to the cursor.",
      "scope": 5
    },
    "editor.suggest.shareSuggestSelections": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).",
      "scope": 5
    },
    "editor.suggest.snippetsPreventQuickSuggestions": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether an active snippet prevents quick suggestions.",
      "scope": 5
    },
    "editor.suggest.showIcons": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to show or hide icons in suggestions.",
      "scope": 5
    },
    "editor.suggest.maxVisibleSuggestions": {
      "type": "number",
      "default": 12,
      "minimum": 1,
      "maximum": 15,
      "description": "Controls how many suggestions IntelliSense will show before showing a scrollbar (maximum 15).",
      "scope": 5
    },
    "editor.suggest.filteredTypes": {
      "type": "object",
      "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.",
      "default": {},
      "scope": 5
    },
    "editor.suggest.showMethods": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `method`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showFunctions": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `function`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showConstructors": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `constructor`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showFields": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `field`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showVariables": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `variable`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showClasses": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `class`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showStructs": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `struct`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showInterfaces": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `interface`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showModules": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `module`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showProperties": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `property`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showEvents": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `event`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showOperators": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `operator`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showUnits": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `unit`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showValues": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `value`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showConstants": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `constant`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showEnums": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `enum`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showEnumMembers": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `enumMember`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showKeywords": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `keyword`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showWords": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `text`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showColors": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `color`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showFiles": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `file`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showReferences": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `reference`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showCustomcolors": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `customcolor`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showFolders": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `folder`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showTypeParameters": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `typeParameter`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showSnippets": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `snippet`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showUsers": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `user`-suggestions.",
      "scope": 5
    },
    "editor.suggest.showIssues": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `issues`-suggestions.",
      "scope": 5
    },
    "editor.suggest.statusBar.visible": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls the visibility of the status bar at the bottom of the suggest widget.",
      "scope": 5
    },
    "editor.suggestFontSize": {
      "markdownDescription": "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "scope": 5
    },
    "editor.suggestLineHeight": {
      "markdownDescription": "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "scope": 5
    },
    "editor.suggestOnTriggerCharacters": {
      "description": "Controls whether suggestions should automatically show up when typing trigger characters.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.suggestSelection": {
      "markdownEnumDescriptions": [
        "Always select the first suggestion.",
        "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.",
        "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
      ],
      "description": "Controls how suggestions are pre-selected when showing the suggest list.",
      "type": "string",
      "enum": [
        "first",
        "recentlyUsed",
        "recentlyUsedByPrefix"
      ],
      "default": "recentlyUsed",
      "scope": 5
    },
    "editor.tabCompletion": {
      "enumDescriptions": [
        "Tab complete will insert the best matching suggestion when pressing tab.",
        "Disable tab completions.",
        "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
      ],
      "description": "Enables tab completions.",
      "type": "string",
      "enum": [
        "on",
        "off",
        "onlySnippets"
      ],
      "default": "off",
      "scope": 5
    },
    "editor.unusualLineTerminators": {
      "enumDescriptions": [
        "Unusual line terminators are ignored.",
        "Unusual line terminators prompt to be removed.",
        "Unusual line terminators are automatically removed."
      ],
      "description": "Remove unusual line terminators that might cause problems.",
      "type": "string",
      "enum": [
        "off",
        "prompt",
        "auto"
      ],
      "default": "prompt",
      "scope": 5
    },
    "editor.useTabStops": {
      "description": "Inserting and deleting whitespace follows tab stops.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "editor.wordSeparators": {
      "description": "Characters that will be used as word separators when doing word related navigations or operations.",
      "type": "string",
      "default": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
      "scope": 5
    },
    "editor.wordWrap": {
      "markdownEnumDescriptions": [
        "Lines will never wrap.",
        "Lines will wrap at the viewport width.",
        "Lines will wrap at `#editor.wordWrapColumn#`.",
        "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."
      ],
      "description": "Controls how lines should wrap.",
      "type": "string",
      "enum": [
        "off",
        "on",
        "wordWrapColumn",
        "bounded"
      ],
      "default": "off",
      "scope": 5
    },
    "editor.wordWrapColumn": {
      "markdownDescription": "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.",
      "type": "integer",
      "default": 80,
      "minimum": 1,
      "maximum": 1073741824,
      "scope": 5
    },
    "editor.wrappingIndent": {
      "enumDescriptions": [
        "No indentation. Wrapped lines begin at column 1.",
        "Wrapped lines get the same indentation as the parent.",
        "Wrapped lines get +1 indentation toward the parent.",
        "Wrapped lines get +2 indentation toward the parent."
      ],
      "description": "Controls the indentation of wrapped lines.",
      "type": "string",
      "enum": [
        "none",
        "same",
        "indent",
        "deepIndent"
      ],
      "default": "same",
      "scope": 5
    },
    "editor.wrappingStrategy": {
      "enumDescriptions": [
        "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.",
        "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases."
      ],
      "description": "Controls the algorithm that computes wrapping points.",
      "type": "string",
      "enum": [
        "simple",
        "advanced"
      ],
      "default": "simple",
      "scope": 5
    },
    "editor.showDeprecated": {
      "description": "Controls strikethrough deprecated variables.",
      "type": "boolean",
      "default": true,
      "scope": 5
    },
    "http.proxy": {
      "type": "string",
      "pattern": "^https?://([^:]*(:[^@]*)?@)?([^:]+|\\[[:0-9a-fA-F]+\\])(:\\d+)?/?$|^$",
      "markdownDescription": "The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.",
      "default": "",
      "scope": 3
    },
    "http.proxyStrictSSL": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the proxy server certificate should be verified against the list of supplied CAs.",
      "scope": 3
    },
    "http.proxyAuthorization": {
      "type": [
        "null",
        "string"
      ],
      "default": null,
      "markdownDescription": "The value to send as the `Proxy-Authorization` header for every network request.",
      "scope": 3
    },
    "http.proxySupport": {
      "type": "string",
      "enum": [
        "off",
        "on",
        "override"
      ],
      "enumDescriptions": [
        "Disable proxy support for extensions.",
        "Enable proxy support for extensions.",
        "Enable proxy support for extensions, override request options."
      ],
      "default": "override",
      "description": "Use the proxy support for extensions.",
      "scope": 3
    },
    "http.systemCertificates": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)",
      "scope": 3
    },
    "telemetry.enableTelemetry": {
      "type": "boolean",
      "description": "Enable usage data and errors to be sent to a Microsoft online service.",
      "default": true,
      "tags": [
        "usesOnlineServices"
      ],
      "scope": 3
    },
    "editor.rename.enablePreview": {
      "scope": 5,
      "description": "Enable/disable the ability to preview changes before renaming",
      "default": true,
      "type": "boolean"
    },
    "workbench.list.multiSelectModifier": {
      "type": "string",
      "enum": [
        "ctrlCmd",
        "alt"
      ],
      "enumDescriptions": [
        "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
        "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
      ],
      "default": "ctrlCmd",
      "description": "The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.",
      "scope": 3
    },
    "workbench.list.openMode": {
      "type": "string",
      "enum": [
        "singleClick",
        "doubleClick"
      ],
      "default": "singleClick",
      "description": "Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. ",
      "scope": 3
    },
    "workbench.list.horizontalScrolling": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.",
      "scope": 3
    },
    "workbench.tree.indent": {
      "type": "number",
      "default": 8,
      "minimum": 0,
      "maximum": 40,
      "description": "Controls tree indentation in pixels.",
      "scope": 3
    },
    "workbench.tree.renderIndentGuides": {
      "type": "string",
      "enum": [
        "none",
        "onHover",
        "always"
      ],
      "default": "onHover",
      "description": "Controls whether the tree should render indent guides.",
      "scope": 3
    },
    "workbench.list.smoothScrolling": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether lists and trees have smooth scrolling.",
      "scope": 3
    },
    "workbench.list.keyboardNavigation": {
      "type": "string",
      "enum": [
        "simple",
        "highlight",
        "filter"
      ],
      "enumDescriptions": [
        "Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.",
        "Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.",
        "Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input."
      ],
      "default": "highlight",
      "description": "Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.",
      "scope": 3
    },
    "workbench.list.automaticKeyboardNavigation": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.",
      "scope": 3
    },
    "update.mode": {
      "type": "string",
      "enum": [
        "none",
        "manual",
        "start",
        "default"
      ],
      "default": "default",
      "scope": 1,
      "description": "Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.",
      "tags": [
        "usesOnlineServices"
      ],
      "enumDescriptions": [
        "Disable updates.",
        "Disable automatic background update checks. Updates will be available if you manually check for updates.",
        "Check for updates only on startup. Disable automatic background update checks.",
        "Enable automatic update checks. Code will check for updates automatically and periodically."
      ]
    },
    "update.channel": {
      "type": "string",
      "default": "default",
      "scope": 1,
      "description": "Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.",
      "deprecationMessage": "This setting is deprecated, please use 'update.mode' instead."
    },
    "update.showReleaseNotes": {
      "type": "boolean",
      "default": true,
      "scope": 1,
      "description": "Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.",
      "tags": [
        "usesOnlineServices"
      ]
    },
    "breadcrumbs.enabled": {
      "description": "Enable/disable navigation breadcrumbs.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "breadcrumbs.filePath": {
      "description": "Controls whether and how file paths are shown in the breadcrumbs view.",
      "type": "string",
      "default": "on",
      "enum": [
        "on",
        "off",
        "last"
      ],
      "enumDescriptions": [
        "Show the file path in the breadcrumbs view.",
        "Do not show the file path in the breadcrumbs view.",
        "Only show the last element of the file path in the breadcrumbs view."
      ],
      "scope": 3
    },
    "breadcrumbs.symbolPath": {
      "description": "Controls whether and how symbols are shown in the breadcrumbs view.",
      "type": "string",
      "default": "on",
      "enum": [
        "on",
        "off",
        "last"
      ],
      "enumDescriptions": [
        "Show all symbols in the breadcrumbs view.",
        "Do not show symbols in the breadcrumbs view.",
        "Only show the current symbol in the breadcrumbs view."
      ],
      "scope": 3
    },
    "breadcrumbs.symbolSortOrder": {
      "description": "Controls how symbols are sorted in the breadcrumbs outline view.",
      "type": "string",
      "default": "position",
      "scope": 5,
      "enum": [
        "position",
        "name",
        "type"
      ],
      "enumDescriptions": [
        "Show symbol outline in file position order.",
        "Show symbol outline in alphabetical order.",
        "Show symbol outline in symbol type order."
      ]
    },
    "breadcrumbs.icons": {
      "description": "Render breadcrumb items with icons.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "breadcrumbs.showFiles": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `file`-symbols."
    },
    "breadcrumbs.showModules": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `module`-symbols."
    },
    "breadcrumbs.showNamespaces": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `namespace`-symbols."
    },
    "breadcrumbs.showPackages": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `package`-symbols."
    },
    "breadcrumbs.showClasses": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `class`-symbols."
    },
    "breadcrumbs.showMethods": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `method`-symbols."
    },
    "breadcrumbs.showProperties": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `property`-symbols."
    },
    "breadcrumbs.showFields": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `field`-symbols."
    },
    "breadcrumbs.showConstructors": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `constructor`-symbols."
    },
    "breadcrumbs.showEnums": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `enum`-symbols."
    },
    "breadcrumbs.showInterfaces": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `interface`-symbols."
    },
    "breadcrumbs.showFunctions": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `function`-symbols."
    },
    "breadcrumbs.showVariables": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `variable`-symbols."
    },
    "breadcrumbs.showConstants": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `constant`-symbols."
    },
    "breadcrumbs.showStrings": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `string`-symbols."
    },
    "breadcrumbs.showNumbers": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `number`-symbols."
    },
    "breadcrumbs.showBooleans": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `boolean`-symbols."
    },
    "breadcrumbs.showArrays": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `array`-symbols."
    },
    "breadcrumbs.showObjects": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `object`-symbols."
    },
    "breadcrumbs.showKeys": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `key`-symbols."
    },
    "breadcrumbs.showNull": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `null`-symbols."
    },
    "breadcrumbs.showEnumMembers": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `enumMember`-symbols."
    },
    "breadcrumbs.showStructs": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `struct`-symbols."
    },
    "breadcrumbs.showEvents": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `event`-symbols."
    },
    "breadcrumbs.showOperators": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `operator`-symbols."
    },
    "breadcrumbs.showTypeParameters": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled breadcrumbs show `typeParameter`-symbols."
    },
    "workbench.editor.titleScrollbarSizing": {
      "type": "string",
      "enum": [
        "default",
        "large"
      ],
      "enumDescriptions": [
        "The default size.",
        "Increases the size, so it can be grabed more easily with the mouse"
      ],
      "description": "Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.",
      "default": "default",
      "scope": 3
    },
    "workbench.editor.showTabs": {
      "type": "boolean",
      "description": "Controls whether opened editors should show in tabs or not.",
      "default": true,
      "scope": 3
    },
    "workbench.editor.scrollToSwitchTabs": {
      "type": "boolean",
      "description": "Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behaviour for that duration.",
      "default": false,
      "scope": 3
    },
    "workbench.editor.highlightModifiedTabs": {
      "type": "boolean",
      "description": "Controls whether a top border is drawn on modified (dirty) editor tabs or not.",
      "default": false,
      "scope": 3
    },
    "workbench.editor.labelFormat": {
      "type": "string",
      "enum": [
        "default",
        "short",
        "medium",
        "long"
      ],
      "enumDescriptions": [
        "Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.",
        "Show the name of the file followed by its directory name.",
        "Show the name of the file followed by its path relative to the workspace folder.",
        "Show the name of the file followed by its absolute path."
      ],
      "default": "default",
      "description": "Controls the format of the label for an editor.",
      "scope": 3
    },
    "workbench.editor.untitled.labelFormat": {
      "type": "string",
      "enum": [
        "content",
        "name"
      ],
      "enumDescriptions": [
        "The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.",
        "The name of the untitled file is not derived from the contents of the file."
      ],
      "default": "content",
      "description": "Controls the format of the label for an untitled editor.",
      "scope": 3
    },
    "workbench.editor.tabCloseButton": {
      "type": "string",
      "enum": [
        "left",
        "right",
        "off"
      ],
      "default": "right",
      "description": "Controls the position of the editor's tabs close buttons, or disables them when set to 'off'.",
      "scope": 3
    },
    "workbench.editor.tabSizing": {
      "type": "string",
      "enum": [
        "fit",
        "shrink"
      ],
      "default": "fit",
      "enumDescriptions": [
        "Always keep tabs large enough to show the full editor label.",
        "Allow tabs to get smaller when the available space is not enough to show all tabs at once."
      ],
      "description": "Controls the sizing of editor tabs.",
      "scope": 3
    },
    "workbench.editor.splitSizing": {
      "type": "string",
      "enum": [
        "distribute",
        "split"
      ],
      "default": "distribute",
      "enumDescriptions": [
        "Splits all the editor groups to equal parts.",
        "Splits the active editor group to equal parts."
      ],
      "description": "Controls the sizing of editor groups when splitting them.",
      "scope": 3
    },
    "workbench.editor.focusRecentEditorAfterClose": {
      "type": "boolean",
      "description": "Controls whether tabs are closed in most recently used order or from left to right.",
      "default": true,
      "scope": 3
    },
    "workbench.editor.showIcons": {
      "type": "boolean",
      "description": "Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.",
      "default": true,
      "scope": 3
    },
    "workbench.editor.enablePreview": {
      "type": "boolean",
      "description": "Controls whether opened editors show as preview. Preview editors are reused until they are explicitly set to be kept open (e.g. via double click or editing) and show up with an italic font style.",
      "default": true,
      "scope": 3
    },
    "workbench.editor.enablePreviewFromQuickOpen": {
      "type": "boolean",
      "description": "Controls whether editors opened from Quick Open show as preview. Preview editors are reused until they are explicitly set to be kept open (e.g. via double click or editing).",
      "default": true,
      "scope": 3
    },
    "workbench.editor.closeOnFileDelete": {
      "type": "boolean",
      "description": "Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.",
      "default": false,
      "scope": 3
    },
    "workbench.editor.openPositioning": {
      "type": "string",
      "enum": [
        "left",
        "right",
        "first",
        "last"
      ],
      "default": "right",
      "markdownDescription": "Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.",
      "scope": 3
    },
    "workbench.editor.openSideBySideDirection": {
      "type": "string",
      "enum": [
        "right",
        "down"
      ],
      "default": "right",
      "markdownDescription": "Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.",
      "scope": 3
    },
    "workbench.editor.closeEmptyGroups": {
      "type": "boolean",
      "description": "Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.",
      "default": true,
      "scope": 3
    },
    "workbench.editor.revealIfOpen": {
      "type": "boolean",
      "description": "Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.",
      "default": false,
      "scope": 3
    },
    "workbench.editor.mouseBackForwardToNavigate": {
      "type": "boolean",
      "description": "Navigate between open files using mouse buttons four and five if provided.",
      "default": true,
      "scope": 3
    },
    "workbench.editor.restoreViewState": {
      "type": "boolean",
      "description": "Restores the last view state (e.g. scroll position) when re-opening files after they have been closed.",
      "default": true,
      "scope": 3
    },
    "workbench.editor.centeredLayoutAutoResize": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.",
      "scope": 3
    },
    "workbench.editor.limit.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the number of opened editors should be limited or not. When enabled, less recently used editors that are not dirty will close to make space for newly opening editors.",
      "scope": 3
    },
    "workbench.editor.limit.value": {
      "type": "number",
      "default": 10,
      "exclusiveMinimum": 0,
      "markdownDescription": "Controls the maximum number of opened editors. Use the `#workbench.editor.limit.perEditorGroup#` setting to control this limit per editor group or across all groups.",
      "scope": 3
    },
    "workbench.editor.limit.perEditorGroup": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.",
      "scope": 3
    },
    "workbench.commandPalette.history": {
      "type": "number",
      "description": "Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.",
      "default": 50,
      "scope": 3
    },
    "workbench.commandPalette.preserveInput": {
      "type": "boolean",
      "description": "Controls whether the last typed input to the command palette should be restored when opening it the next time.",
      "default": false,
      "scope": 3
    },
    "workbench.quickOpen.closeOnFocusLost": {
      "type": "boolean",
      "description": "Controls whether Quick Open should close automatically once it loses focus.",
      "default": true,
      "scope": 3
    },
    "workbench.quickOpen.preserveInput": {
      "type": "boolean",
      "description": "Controls whether the last typed input to Quick Open should be restored when opening it the next time.",
      "default": false,
      "scope": 3
    },
    "workbench.settings.openDefaultSettings": {
      "type": "boolean",
      "description": "Controls whether opening settings also opens an editor showing all default settings.",
      "default": false,
      "scope": 3
    },
    "workbench.settings.useSplitJSON": {
      "type": "boolean",
      "markdownDescription": "Controls whether to use the split JSON editor when editing settings as JSON.",
      "default": false,
      "scope": 3
    },
    "workbench.settings.openDefaultKeybindings": {
      "type": "boolean",
      "description": "Controls whether opening keybinding settings also opens an editor showing all default keybindings.",
      "default": false,
      "scope": 3
    },
    "workbench.sideBar.location": {
      "type": "string",
      "enum": [
        "left",
        "right"
      ],
      "default": "left",
      "description": "Controls the location of the sidebar and activity bar. They can either show on the left or right of the workbench.",
      "scope": 3
    },
    "workbench.panel.defaultLocation": {
      "type": "string",
      "enum": [
        "left",
        "bottom",
        "right"
      ],
      "default": "bottom",
      "description": "Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom, right, or left of the workbench.",
      "scope": 3
    },
    "workbench.statusBar.visible": {
      "type": "boolean",
      "default": true,
      "description": "Controls the visibility of the status bar at the bottom of the workbench.",
      "scope": 3
    },
    "workbench.activityBar.visible": {
      "type": "boolean",
      "default": true,
      "description": "Controls the visibility of the activity bar in the workbench.",
      "scope": 3
    },
    "workbench.view.alwaysShowHeaderActions": {
      "type": "boolean",
      "default": false,
      "description": "Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.",
      "scope": 3
    },
    "workbench.settings.editor": {
      "type": "string",
      "enum": [
        "ui",
        "json"
      ],
      "enumDescriptions": [
        "Use the settings UI editor.",
        "Use the JSON file editor."
      ],
      "description": "Determines which settings editor to use by default.",
      "default": "ui",
      "scope": 3
    },
    "window.title": {
      "type": "string",
      "default": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",
      "markdownDescription": "Controls the window title based on the active editor. Variables are substituted based on the context:\n- `${activeEditorShort}`: the file name (e.g. myFile.txt).\n- `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).\n- `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).\n- `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).\n- `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).\n- `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).\n- `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).\n- `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).\n- `${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).\n- `${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).\n- `${appName}`: e.g. VS Code.\n- `${remoteName}`: e.g. SSH\n- `${dirty}`: a dirty indicator if the active editor is dirty.\n- `${separator}`: a conditional separator (\" - \") that only shows when surrounded by variables with values or static text.",
      "scope": 3
    },
    "window.titleSeparator": {
      "type": "string",
      "default": " - ",
      "markdownDescription": "Separator used by `window.title`.",
      "scope": 3
    },
    "window.menuBarVisibility": {
      "type": "string",
      "enum": [
        "default",
        "visible",
        "toggle",
        "hidden",
        "compact"
      ],
      "enumDescriptions": [
        "Menu is only hidden in full screen mode.",
        "Menu is always visible even in full screen mode.",
        "Menu is hidden but can be displayed via Alt key.",
        "Menu is always hidden.",
        "Menu is displayed as a compact button in the sidebar. This value is ignored when 'window.titleBarStyle' is 'native'."
      ],
      "default": "default",
      "scope": 1,
      "description": "Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.",
      "included": true
    },
    "window.enableMenuBarMnemonics": {
      "type": "boolean",
      "default": true,
      "scope": 1,
      "description": "Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.",
      "included": true
    },
    "window.customMenuBarAltFocus": {
      "type": "boolean",
      "default": true,
      "scope": 1,
      "markdownDescription": "Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.",
      "included": true
    },
    "window.openFilesInNewWindow": {
      "type": "string",
      "enum": [
        "on",
        "off",
        "default"
      ],
      "enumDescriptions": [
        "Files will open in a new window.",
        "Files will open in the window with the files' folder open or the last active window.",
        "Files will open in a new window unless picked from within the application (e.g. via the File menu)."
      ],
      "default": "off",
      "scope": 1,
      "markdownDescription": "Controls whether files should open in a new window.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option)."
    },
    "window.openFoldersInNewWindow": {
      "type": "string",
      "enum": [
        "on",
        "off",
        "default"
      ],
      "enumDescriptions": [
        "Folders will open in a new window.",
        "Folders will replace the last active window.",
        "Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu)."
      ],
      "default": "default",
      "scope": 1,
      "markdownDescription": "Controls whether folders should open in a new window or replace the last active window.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option)."
    },
    "zenMode.fullScreen": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also puts the workbench into full screen mode.",
      "scope": 3
    },
    "zenMode.centerLayout": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also centers the layout.",
      "scope": 3
    },
    "zenMode.hideTabs": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also hides workbench tabs.",
      "scope": 3
    },
    "zenMode.hideStatusBar": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.",
      "scope": 3
    },
    "zenMode.hideActivityBar": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also hides the activity bar at the left of the workbench.",
      "scope": 3
    },
    "zenMode.hideLineNumbers": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also hides the editor line numbers.",
      "scope": 3
    },
    "zenMode.restore": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether a window should restore to zen mode if it was exited in zen mode.",
      "scope": 3
    },
    "zenMode.silentNotifications": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether notifications are shown while in zen mode. If true, only error notifications will pop out.",
      "scope": 3
    },
    "workbench.sash.size": {
      "type": "number",
      "default": 4,
      "minimum": 4,
      "maximum": 20,
      "description": "Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.",
      "scope": 3
    },
    "problems.decorations.enabled": {
      "description": "Show Errors & Warnings on files and folder.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "window.openWithoutArgumentsInNewWindow": {
      "type": "string",
      "enum": [
        "on",
        "off"
      ],
      "enumDescriptions": [
        "Open a new empty window.",
        "Focus the last active running instance."
      ],
      "default": "on",
      "scope": 1,
      "markdownDescription": "Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option)."
    },
    "window.restoreWindows": {
      "type": "string",
      "enum": [
        "all",
        "folders",
        "one",
        "none"
      ],
      "enumDescriptions": [
        "Reopen all windows.",
        "Reopen all folders. Empty workspaces will not be restored.",
        "Reopen the last active window.",
        "Never reopen a window. Always start with an empty one."
      ],
      "default": "all",
      "scope": 1,
      "description": "Controls how windows are being reopened after a restart."
    },
    "window.restoreFullscreen": {
      "type": "boolean",
      "default": false,
      "scope": 1,
      "description": "Controls whether a window should restore to full screen mode if it was exited in full screen mode."
    },
    "window.zoomLevel": {
      "type": "number",
      "default": 0,
      "description": "Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.",
      "scope": 3
    },
    "window.newWindowDimensions": {
      "type": "string",
      "enum": [
        "default",
        "inherit",
        "offset",
        "maximized",
        "fullscreen"
      ],
      "enumDescriptions": [
        "Open new windows in the center of the screen.",
        "Open new windows with same dimension as last active one.",
        "Open new windows with same dimension as last active one with an offset position.",
        "Open new windows maximized.",
        "Open new windows in full screen mode."
      ],
      "default": "default",
      "scope": 1,
      "description": "Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing."
    },
    "window.closeWhenEmpty": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.",
      "scope": 3
    },
    "window.doubleClickIconToClose": {
      "type": "boolean",
      "default": false,
      "scope": 1,
      "markdownDescription": "If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `#window.titleBarStyle#` is set to `custom`."
    },
    "window.titleBarStyle": {
      "type": "string",
      "enum": [
        "native",
        "custom"
      ],
      "default": "native",
      "scope": 1,
      "description": "Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply."
    },
    "telemetry.enableCrashReporter": {
      "type": "boolean",
      "description": "Enable crash reports to be sent to a Microsoft online service. \nThis option requires restart to take effect.",
      "default": true,
      "tags": [
        "usesOnlineServices"
      ],
      "scope": 3
    },
    "editor.defaultFormatter": {
      "description": "Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "enum": [
        null,
        "vscode.configuration-editing",
        "vscode.css-language-features",
        "vscode.debug-auto-launch",
        "vscode.debug-server-ready",
        "vscode.emmet",
        "vscode.extension-editing",
        "vscode.git",
        "vscode.git-ui",
        "vscode.github",
        "vscode.github-authentication",
        "vscode.github-browser",
        "vscode.grunt",
        "vscode.gulp",
        "vscode.html-language-features",
        "vscode.image-preview",
        "vscode.jake",
        "vscode.json-language-features",
        "vscode.markdown-language-features",
        "vscode.merge-conflict",
        "vscode.microsoft-authentication",
        "ms-vscode.js-debug",
        "ms-vscode.js-debug-companion",
        "ms-vscode.node-debug",
        "ms-vscode.node-debug2",
        "ms-vscode.references-view",
        "ms-vscode.vscode-js-profile-table",
        "vscode.npm",
        "vscode.php-language-features",
        "vscode.python",
        "vscode.search-result",
        "vscode.typescript-language-features",
        "luxass.vscode-schema-extractor"
      ],
      "markdownEnumDescriptions": [
        "None",
        "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.",
        "Provides rich language support for CSS, LESS and SCSS files.",
        "Helper for auto-attach feature when node-debug extensions are not active.",
        "Open URI in browser if server under debugging is ready.",
        "Emmet support for VS Code",
        "Provides linting capabilities for authoring extensions.",
        "Git SCM Integration",
        "Git SCM UI Integration",
        "GitHub",
        "GitHub Authentication Provider",
        "Remotely browse a GitHub repository",
        "Extension to add Grunt capabilities to VS Code.",
        "Extension to add Gulp capabilities to VSCode.",
        "Provides rich language support for HTML and Handlebar files",
        "Provides VS Code's built-in image preview",
        "Extension to add Jake capabilities to VS Code.",
        "Provides rich language support for JSON files.",
        "Provides rich language support for Markdown.",
        "Highlighting and commands for inline merge conflicts.",
        "Microsoft authentication provider",
        "An extension for debugging Node.js programs and Chrome.",
        "Companion extension to js-debug that provides capability for remote debugging",
        "Node.js debugging support (versions < 8.0)",
        "Node.js debugging support",
        "Reference Search results as separate, stable view in the sidebar",
        "Text visualizer for profiles taken from the JavaScript debugger",
        "Extension to add task support for npm scripts.",
        "Provides rich language support for PHP files.",
        "Provides syntax highlighting, bracket matching and folding in Python files.",
        "Provides syntax highlighting and language features for tabbed search results.",
        "Provides rich language support for JavaScript and TypeScript.",
        "A extension used to extract Visual Studio Code Schemas"
      ],
      "scope": 5
    },
    "keyboard.dispatch": {
      "type": "string",
      "enum": [
        "code",
        "keyCode"
      ],
      "default": "code",
      "markdownDescription": "Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.",
      "included": true,
      "scope": 3
    },
    "workbench.startupEditor": {
      "scope": 1,
      "type": "string",
      "enum": [
        "none",
        "welcomePage",
        "readme",
        "newUntitledFile",
        "welcomePageInEmptyWorkbench"
      ],
      "enumDescriptions": [
        "Start without an editor.",
        "Open the Welcome page (default).",
        "Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise.",
        "Open a new untitled file (only applies when opening an empty workspace).",
        "Open the Welcome page when opening an empty workbench."
      ],
      "default": "welcomePage",
      "description": "Controls which editor is shown at startup, if none are restored from the previous session."
    },
    "editor.codeActionsOnSave": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "source.fixAll": {
              "type": "boolean",
              "description": "Controls whether auto fix action should be run on file save."
            }
          },
          "additionalProperties": {
            "type": "boolean"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "default": {},
      "description": "Code action kinds to be run on save.",
      "scope": 5,
      "properties": {
        "source.fixAll": {
          "type": "boolean",
          "description": "Controls whether auto fix action should be run on file save."
        },
        "source.organizeImports": {
          "type": "boolean",
          "description": "Controls whether 'Organize imports' actions should be run on file save."
        }
      }
    },
    "comments.openPanel": {
      "enum": [
        "neverOpen",
        "openOnSessionStart",
        "openOnSessionStartWithComments"
      ],
      "default": "openOnSessionStartWithComments",
      "description": "Controls when the comments panel should open.",
      "scope": 3
    },
    "workbench.settings.enableNaturalLanguageSearch": {
      "type": "boolean",
      "description": "Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.",
      "default": true,
      "scope": 3,
      "tags": [
        "usesOnlineServices"
      ]
    },
    "workbench.settings.settingsSearchTocBehavior": {
      "type": "string",
      "enum": [
        "hide",
        "filter"
      ],
      "enumDescriptions": [
        "Hide the Table of Contents while searching.",
        "Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category."
      ],
      "description": "Controls the behavior of the settings editor Table of Contents while searching.",
      "default": "filter",
      "scope": 3
    },
    "terminal.integrated.shell.linux": {
      "markdownDescription": "The path of the shell that the terminal uses on Linux (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "scope": 3
    },
    "terminal.integrated.shell.osx": {
      "markdownDescription": "The path of the shell that the terminal uses on macOS (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "scope": 3
    },
    "terminal.integrated.shell.windows": {
      "markdownDescription": "The path of the shell that the terminal uses on Windows (default: cmd.exe). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "scope": 3
    },
    "remote.extensionKind": {
      "type": "object",
      "markdownDescription": "Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.",
      "patternProperties": {
        "([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ui",
                  "workspace"
                ],
                "enumDescriptions": [
                  "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine.",
                  "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."
                ]
              }
            },
            {
              "type": "string",
              "enum": [
                "ui",
                "workspace"
              ],
              "enumDescriptions": [
                "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine.",
                "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."
              ]
            }
          ],
          "default": [
            "ui"
          ]
        }
      },
      "default": {
        "pub.name": [
          "ui"
        ]
      },
      "scope": 3
    },
    "editor.tokenColorCustomizations": {
      "description": "Overrides editor syntax colors and font style from the currently selected color theme.",
      "default": {},
      "allOf": [
        {
          "properties": {
            "comments": {
              "description": "Sets the colors and styles for comments",
              "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
            },
            "strings": {
              "description": "Sets the colors and styles for strings literals.",
              "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
            },
            "keywords": {
              "description": "Sets the colors and styles for keywords.",
              "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
            },
            "numbers": {
              "description": "Sets the colors and styles for number literals.",
              "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
            },
            "types": {
              "description": "Sets the colors and styles for type declarations and references.",
              "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
            },
            "functions": {
              "description": "Sets the colors and styles for functions declarations and references.",
              "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
            },
            "variables": {
              "description": "Sets the colors and styles for variables declarations and references.",
              "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
            },
            "textMateRules": {
              "description": "Sets colors and styles using textmate theming rules (advanced).",
              "$ref": "vscode://schemas/textmate-colors"
            },
            "semanticHighlighting": {
              "description": "Whether semantic highlighting should be enabled for this theme.",
              "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
              "type": "boolean"
            }
          }
        },
        {
          "properties": {
            "[Abyss]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Default Dark+]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Default Light+]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Visual Studio Dark]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Visual Studio Light]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Default High Contrast]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Kimbie Dark]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Monokai]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Monokai Dimmed]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Quiet Light]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Red]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Solarized Dark]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Solarized Light]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "[Tomorrow Night Blue]": {
              "properties": {
                "comments": {
                  "description": "Sets the colors and styles for comments",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "strings": {
                  "description": "Sets the colors and styles for strings literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "keywords": {
                  "description": "Sets the colors and styles for keywords.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "numbers": {
                  "description": "Sets the colors and styles for number literals.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "types": {
                  "description": "Sets the colors and styles for type declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "functions": {
                  "description": "Sets the colors and styles for functions declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "variables": {
                  "description": "Sets the colors and styles for variables declarations and references.",
                  "$ref": "vscode://schemas/textmate-colors#definitions/colorGroup"
                },
                "textMateRules": {
                  "description": "Sets colors and styles using textmate theming rules (advanced).",
                  "$ref": "vscode://schemas/textmate-colors"
                },
                "semanticHighlighting": {
                  "description": "Whether semantic highlighting should be enabled for this theme.",
                  "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          }
        }
      ],
      "scope": 3
    },
    "editor.semanticTokenColorCustomizations": {
      "description": "Overrides editor semantic token color and styles from the currently selected color theme.",
      "default": {},
      "allOf": [
        {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Whether semantic highlighting is enabled or disabled for this theme",
              "suggestSortText": "0_enabled"
            },
            "rules": {
              "$ref": "vscode://schemas/token-styling",
              "description": "Semantic token styling rules for this theme.",
              "suggestSortText": "0_rules"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^\\[": {}
          }
        },
        {
          "properties": {
            "[Abyss]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Default Dark+]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Default Light+]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Visual Studio Dark]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Visual Studio Light]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Default High Contrast]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Kimbie Dark]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Monokai]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Monokai Dimmed]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Quiet Light]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Red]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Solarized Dark]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Solarized Light]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            },
            "[Tomorrow Night Blue]": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether semantic highlighting is enabled or disabled for this theme",
                  "suggestSortText": "0_enabled"
                },
                "rules": {
                  "$ref": "vscode://schemas/token-styling",
                  "description": "Semantic token styling rules for this theme.",
                  "suggestSortText": "0_rules"
                }
              },
              "additionalProperties": false
            }
          }
        }
      ],
      "scope": 3
    },
    "editor.tokenColorCustomizationsExperimental": {
      "deprecationMessage": "Use `editor.semanticTokenColorCustomizations` instead.",
      "default": {},
      "allOf": [
        {
          "$ref": "vscode://schemas/token-styling"
        },
        {
          "properties": {
            "[Abyss]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Default Dark+]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Default Light+]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Visual Studio Dark]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Visual Studio Light]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Default High Contrast]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Kimbie Dark]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Monokai]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Monokai Dimmed]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Quiet Light]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Red]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Solarized Dark]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Solarized Light]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            },
            "[Tomorrow Night Blue]": {
              "$ref": "vscode://schemas/token-styling",
              "additionalProperties": false
            }
          }
        }
      ],
      "scope": 3
    },
    "workbench.enableExperiments": {
      "type": "boolean",
      "description": "Fetches experiments to run from a Microsoft online service.",
      "default": true,
      "tags": [
        "usesOnlineServices"
      ],
      "scope": 3
    },
    "screencastMode.verticalOffset": {
      "type": "number",
      "default": 20,
      "minimum": 0,
      "maximum": 90,
      "description": "Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.",
      "scope": 3
    },
    "screencastMode.fontSize": {
      "type": "number",
      "default": 56,
      "minimum": 20,
      "maximum": 100,
      "description": "Controls the font size (in pixels) of the screencast mode keyboard.",
      "scope": 3
    },
    "screencastMode.onlyKeyboardShortcuts": {
      "type": "boolean",
      "description": "Only show keyboard shortcuts in Screencast Mode.",
      "default": false,
      "scope": 3
    },
    "task.problemMatchers.neverPrompt": {
      "markdownDescription": "Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.",
      "oneOf": [
        {
          "type": "boolean",
          "markdownDescription": "Sets problem matcher prompting behavior for all tasks."
        },
        {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "boolean"
            }
          },
          "markdownDescription": "An object containing task type-boolean pairs to never prompt for problem matchers on.",
          "default": {
            "shell": true
          }
        }
      ],
      "default": false,
      "scope": 3
    },
    "task.autoDetect": {
      "markdownDescription": "Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.",
      "type": "string",
      "enum": [
        "on",
        "off"
      ],
      "default": "on",
      "scope": 3
    },
    "task.slowProviderWarning": {
      "markdownDescription": "Configures whether a warning is shown when a provider is slow",
      "oneOf": [
        {
          "type": "boolean",
          "markdownDescription": "Sets the slow provider warning for all tasks."
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "markdownDescription": "An array of task types to never show the slow provider warning."
          }
        }
      ],
      "default": true,
      "scope": 3
    },
    "task.quickOpen.history": {
      "markdownDescription": "Controls the number of recent items tracked in task quick open dialog.",
      "type": "number",
      "default": 30,
      "minimum": 0,
      "maximum": 30,
      "scope": 3
    },
    "task.quickOpen.detail": {
      "markdownDescription": "Controls whether to show the task detail for task that have a detail in the Run Task quick pick.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "task.quickOpen.skip": {
      "type": "boolean",
      "description": "Controls whether the task quick pick is skipped when there is only one task to pick from.",
      "default": false,
      "scope": 3
    },
    "task.quickOpen.showAll": {
      "type": "boolean",
      "description": "Causes the Tasks: Run Task command to use the slower \"show all\" behavior instead of the faster two level picker where tasks are grouped by provider.",
      "default": false,
      "scope": 3
    },
    "task.saveBeforeRun": {
      "markdownDescription": "Save all dirty editors before running a task.",
      "type": "string",
      "enum": [
        "always",
        "never",
        "prompt"
      ],
      "enumDescriptions": [
        "Always saves all editors before running.",
        "Never saves editors before running.",
        "Prompts whether to save editors before running."
      ],
      "default": "always",
      "scope": 3
    },
    "remote.downloadExtensionsLocally": {
      "type": "boolean",
      "markdownDescription": "When enabled extensions are downloaded locally and installed on remote.",
      "default": false,
      "scope": 3
    },
    "remote.restoreForwardedPorts": {
      "type": "boolean",
      "markdownDescription": "Restores the ports you forwarded in a workspace.",
      "default": false,
      "scope": 3
    },
    "workbench.editorAssociations": {
      "type": "array",
      "markdownDescription": "Configure which editor to use for specific file types.",
      "items": {
        "type": "object",
        "defaultSnippets": [
          {
            "body": {
              "viewType": "$1",
              "filenamePattern": "$2"
            }
          }
        ],
        "properties": {
          "viewType": {
            "anyOf": [
              {
                "type": "string",
                "description": "The unique id of the editor to use."
              },
              {
                "type": "string",
                "enum": [
                  "default",
                  "imagePreview.previewEditor",
                  "vscode.markdown.preview.editor",
                  "jsProfileVisualizer.cpuprofile.table"
                ],
                "enumDescriptions": [
                  "Source: Built-in",
                  "Source: Built-in",
                  "Source: Built-in",
                  "Source: Built-in"
                ]
              }
            ]
          },
          "filenamePattern": {
            "type": "string",
            "description": "Glob pattern specifying which files the editor should be used for."
          }
        }
      },
      "default": [],
      "scope": 3
    },
    "files.participants.timeout": {
      "type": "number",
      "default": 5000,
      "markdownDescription": "Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.",
      "scope": 3
    },
    "debug.allowBreakpointsEverywhere": {
      "type": "boolean",
      "description": "Allow setting breakpoints in any file.",
      "default": false,
      "scope": 3
    },
    "debug.openExplorerOnEnd": {
      "type": "boolean",
      "description": "Automatically open the explorer view at the end of a debug session.",
      "default": false,
      "scope": 3
    },
    "debug.inlineValues": {
      "type": "boolean",
      "description": "Show variable values inline in editor while debugging.",
      "default": false,
      "scope": 3
    },
    "debug.toolBarLocation": {
      "enum": [
        "floating",
        "docked",
        "hidden"
      ],
      "markdownDescription": "Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.",
      "default": "floating",
      "scope": 3
    },
    "debug.showInStatusBar": {
      "enum": [
        "never",
        "always",
        "onFirstSessionStart"
      ],
      "enumDescriptions": [
        "Never show debug in status bar",
        "Always show debug in status bar",
        "Show debug in status bar only after debug was started for the first time"
      ],
      "description": "Controls when the debug status bar should be visible.",
      "default": "onFirstSessionStart",
      "scope": 3
    },
    "debug.internalConsoleOptions": {
      "enum": [
        "neverOpen",
        "openOnSessionStart",
        "openOnFirstSessionStart"
      ],
      "default": "openOnFirstSessionStart",
      "description": "Controls when the internal debug console should open.",
      "scope": 3,
      "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
      "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
    },
    "debug.console.closeOnEnd": {
      "type": "boolean",
      "description": "Controls if the debug console should be automatically closed when the debug session ends.",
      "default": false,
      "scope": 3
    },
    "debug.openDebug": {
      "enum": [
        "neverOpen",
        "openOnSessionStart",
        "openOnFirstSessionStart",
        "openOnDebugBreak"
      ],
      "default": "openOnSessionStart",
      "description": "Controls when the debug view should open.",
      "scope": 3
    },
    "debug.showSubSessionsInToolBar": {
      "type": "boolean",
      "description": "Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.",
      "default": false,
      "scope": 3
    },
    "debug.console.fontSize": {
      "type": "number",
      "description": "Controls the font size in pixels in the debug console.",
      "default": 14,
      "scope": 3
    },
    "debug.console.fontFamily": {
      "type": "string",
      "description": "Controls the font family in the debug console.",
      "default": "default",
      "scope": 3
    },
    "debug.console.lineHeight": {
      "type": "number",
      "description": "Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.",
      "default": 0,
      "scope": 3
    },
    "debug.console.wordWrap": {
      "type": "boolean",
      "description": "Controls if the lines should wrap in the debug console.",
      "default": true,
      "scope": 3
    },
    "debug.console.historySuggestions": {
      "type": "boolean",
      "description": "Controls if the debug console should suggest previously typed input.",
      "default": true,
      "scope": 3
    },
    "launch": {
      "type": "object",
      "description": "Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.",
      "default": {
        "configurations": [],
        "compounds": []
      },
      "$ref": "vscode://schemas/launch",
      "scope": 3
    },
    "debug.focusWindowOnBreak": {
      "type": "boolean",
      "description": "Controls whether the workbench window should be focused when the debugger breaks.",
      "default": true,
      "scope": 3
    },
    "debug.onTaskErrors": {
      "enum": [
        "debugAnyway",
        "showErrors",
        "prompt",
        "abort"
      ],
      "enumDescriptions": [
        "Ignore task errors and start debugging.",
        "Show the Problems view and do not start debugging.",
        "Prompt user.",
        "Cancel debugging."
      ],
      "description": "Controls what to do when errors are encountered after running a preLaunchTask.",
      "default": "prompt",
      "scope": 3
    },
    "debug.showBreakpointsInOverviewRuler": {
      "type": "boolean",
      "description": "Controls whether breakpoints should be shown in the overview ruler.",
      "default": false,
      "scope": 3
    },
    "debug.showInlineBreakpointCandidates": {
      "type": "boolean",
      "description": "Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.",
      "default": true,
      "scope": 3
    },
    "extensions.autoUpdate": {
      "type": "boolean",
      "description": "When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.",
      "default": true,
      "scope": 1,
      "tags": [
        "usesOnlineServices"
      ]
    },
    "extensions.autoCheckUpdates": {
      "type": "boolean",
      "description": "When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.",
      "default": true,
      "scope": 1,
      "tags": [
        "usesOnlineServices"
      ]
    },
    "extensions.ignoreRecommendations": {
      "type": "boolean",
      "description": "When enabled, the notifications for extension recommendations will not be shown.",
      "default": false,
      "scope": 3
    },
    "extensions.showRecommendationsOnlyOnDemand": {
      "type": "boolean",
      "description": "When enabled, recommendations will not be fetched or shown unless specifically requested by the user. Some recommendations are fetched from a Microsoft online service.",
      "default": false,
      "tags": [
        "usesOnlineServices"
      ],
      "scope": 3
    },
    "extensions.closeExtensionDetailsOnViewChange": {
      "type": "boolean",
      "description": "When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.",
      "default": false,
      "scope": 3
    },
    "extensions.confirmedUriHandlerExtensionIds": {
      "type": "array",
      "description": "When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.",
      "default": [],
      "scope": 3
    },
    "extensions.webWorker": {
      "type": "boolean",
      "description": "Enable web worker extension host.",
      "default": false,
      "scope": 3
    },
    "files.exclude": {
      "type": "object",
      "markdownDescription": "Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `#search.exclude#` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
      "default": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true
      },
      "scope": 4,
      "additionalProperties": {
        "anyOf": [
          {
            "type": "boolean",
            "description": "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."
          },
          {
            "type": "object",
            "properties": {
              "when": {
                "type": "string",
                "pattern": "\\w*\\$\\(basename\\)\\w*",
                "default": "$(basename).ext",
                "description": "Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name."
              }
            }
          }
        ]
      }
    },
    "files.associations": {
      "type": "object",
      "markdownDescription": "Configure file associations to languages (e.g. `\"*.extension\": \"html\"`). These have precedence over the default associations of the languages installed.",
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "scope": 3
    },
    "files.encoding": {
      "type": "string",
      "enum": [
        "utf8",
        "utf8bom",
        "utf16le",
        "utf16be",
        "windows1252",
        "iso88591",
        "iso88593",
        "iso885915",
        "macroman",
        "cp437",
        "windows1256",
        "iso88596",
        "windows1257",
        "iso88594",
        "iso885914",
        "windows1250",
        "iso88592",
        "cp852",
        "windows1251",
        "cp866",
        "iso88595",
        "koi8r",
        "koi8u",
        "iso885913",
        "windows1253",
        "iso88597",
        "windows1255",
        "iso88598",
        "iso885910",
        "iso885916",
        "windows1254",
        "iso88599",
        "windows1258",
        "gbk",
        "gb18030",
        "cp950",
        "big5hkscs",
        "shiftjis",
        "eucjp",
        "euckr",
        "windows874",
        "iso885911",
        "koi8ru",
        "koi8t",
        "gb2312",
        "cp865",
        "cp850"
      ],
      "default": "utf8",
      "description": "The default character set encoding to use when reading and writing files. This setting can also be configured per language.",
      "scope": 5,
      "enumDescriptions": [
        "UTF-8",
        "UTF-8 with BOM",
        "UTF-16 LE",
        "UTF-16 BE",
        "Western (Windows 1252)",
        "Western (ISO 8859-1)",
        "Western (ISO 8859-3)",
        "Western (ISO 8859-15)",
        "Western (Mac Roman)",
        "DOS (CP 437)",
        "Arabic (Windows 1256)",
        "Arabic (ISO 8859-6)",
        "Baltic (Windows 1257)",
        "Baltic (ISO 8859-4)",
        "Celtic (ISO 8859-14)",
        "Central European (Windows 1250)",
        "Central European (ISO 8859-2)",
        "Central European (CP 852)",
        "Cyrillic (Windows 1251)",
        "Cyrillic (CP 866)",
        "Cyrillic (ISO 8859-5)",
        "Cyrillic (KOI8-R)",
        "Cyrillic (KOI8-U)",
        "Estonian (ISO 8859-13)",
        "Greek (Windows 1253)",
        "Greek (ISO 8859-7)",
        "Hebrew (Windows 1255)",
        "Hebrew (ISO 8859-8)",
        "Nordic (ISO 8859-10)",
        "Romanian (ISO 8859-16)",
        "Turkish (Windows 1254)",
        "Turkish (ISO 8859-9)",
        "Vietnamese (Windows 1258)",
        "Simplified Chinese (GBK)",
        "Simplified Chinese (GB18030)",
        "Traditional Chinese (Big5)",
        "Traditional Chinese (Big5-HKSCS)",
        "Japanese (Shift JIS)",
        "Japanese (EUC-JP)",
        "Korean (EUC-KR)",
        "Thai (Windows 874)",
        "Latin/Thai (ISO 8859-11)",
        "Cyrillic (KOI8-RU)",
        "Tajik (KOI8-T)",
        "Simplified Chinese (GB 2312)",
        "Nordic DOS (CP 865)",
        "Western European DOS (CP 850)"
      ],
      "included": true
    },
    "files.autoGuessEncoding": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.",
      "scope": 5,
      "included": true
    },
    "files.eol": {
      "type": "string",
      "enum": [
        "\n",
        "\r\n",
        "auto"
      ],
      "enumDescriptions": [
        "LF",
        "CRLF",
        "Uses operating system specific end of line character."
      ],
      "default": "auto",
      "description": "The default end of line character.",
      "scope": 5
    },
    "files.enableTrash": {
      "type": "boolean",
      "default": true,
      "description": "Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.",
      "scope": 3
    },
    "files.trimTrailingWhitespace": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, will trim trailing whitespace when saving a file.",
      "scope": 5
    },
    "files.insertFinalNewline": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, insert a final new line at the end of the file when saving it.",
      "scope": 5
    },
    "files.trimFinalNewlines": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, will trim all new lines after the final new line at the end of the file when saving it.",
      "scope": 5
    },
    "files.autoSave": {
      "type": "string",
      "enum": [
        "off",
        "afterDelay",
        "onFocusChange",
        "onWindowChange"
      ],
      "markdownEnumDescriptions": [
        "A dirty editor is never automatically saved.",
        "A dirty editor is automatically saved after the configured `#files.autoSaveDelay#`.",
        "A dirty editor is automatically saved when the editor loses focus.",
        "A dirty editor is automatically saved when the window loses focus."
      ],
      "default": "off",
      "markdownDescription": "Controls auto save of dirty editors. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).",
      "scope": 3
    },
    "files.autoSaveDelay": {
      "type": "number",
      "default": 1000,
      "markdownDescription": "Controls the delay in ms after which a dirty editor is saved automatically. Only applies when `#files.autoSave#` is set to `afterDelay`.",
      "scope": 3
    },
    "files.watcherExclude": {
      "type": "object",
      "default": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/**": true,
        "**/.hg/store/**": true
      },
      "description": "Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of CPU time on startup, you can exclude large folders to reduce the initial load.",
      "scope": 4
    },
    "files.hotExit": {
      "type": "string",
      "scope": 1,
      "enum": [
        "off",
        "onExit",
        "onExitAndWindowClose"
      ],
      "default": "onExit",
      "markdownEnumDescriptions": [
        "Disable hot exit. A prompt will show when attempting to close a window with dirty files.",
        "Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of workspaces with unsaved files can be accessed via `File > Open Recent > More...`",
        "Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of workspaces with unsaved files can be accessed via `File > Open Recent > More...`"
      ],
      "description": "Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped."
    },
    "files.defaultLanguage": {
      "type": "string",
      "markdownDescription": "The default language mode that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language mode of the currently active text editor if any.",
      "default": "",
      "scope": 3
    },
    "files.maxMemoryForLargeFilesMB": {
      "type": "number",
      "default": 4096,
      "markdownDescription": "Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.",
      "included": true,
      "scope": 3
    },
    "files.restoreUndoStack": {
      "type": "boolean",
      "description": "Restore the undo stack when a file is reopened.",
      "default": true,
      "scope": 3
    },
    "files.saveConflictResolution": {
      "type": "string",
      "enum": [
        "askUser",
        "overwriteFileOnDisk"
      ],
      "enumDescriptions": [
        "Will refuse to save and ask for resolving the save conflict manually.",
        "Will resolve the save conflict by overwriting the file on disk with the changes in the editor."
      ],
      "description": "A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.",
      "default": "askUser",
      "scope": 5
    },
    "files.simpleDialog.enable": {
      "type": "boolean",
      "description": "Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.",
      "default": false,
      "scope": 3
    },
    "editor.formatOnSave": {
      "type": "boolean",
      "default": false,
      "description": "Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.",
      "scope": 5
    },
    "explorer.openEditors.visible": {
      "type": "number",
      "description": "Number of editors shown in the Open Editors pane.",
      "default": 9,
      "scope": 3
    },
    "explorer.autoReveal": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        false,
        "focusNoScroll"
      ],
      "default": true,
      "enumDescriptions": [
        "Files will be revealed and selected.",
        "Files will not be revealed and selected.",
        "Files will not be scrolled into view, but will still be focused."
      ],
      "description": "Controls whether the explorer should automatically reveal and select files when opening them.",
      "scope": 3
    },
    "explorer.enableDragAndDrop": {
      "type": "boolean",
      "description": "Controls whether the explorer should allow to move files and folders via drag and drop.",
      "default": true,
      "scope": 3
    },
    "explorer.confirmDragAndDrop": {
      "type": "boolean",
      "description": "Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.",
      "default": true,
      "scope": 3
    },
    "explorer.confirmDelete": {
      "type": "boolean",
      "description": "Controls whether the explorer should ask for confirmation when deleting a file via the trash.",
      "default": true,
      "scope": 3
    },
    "explorer.sortOrder": {
      "type": "string",
      "enum": [
        "default",
        "mixed",
        "filesFirst",
        "type",
        "modified"
      ],
      "default": "default",
      "enumDescriptions": [
        "Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.",
        "Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.",
        "Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.",
        "Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.",
        "Files and folders are sorted by last modified date, in descending order. Folders are displayed before files."
      ],
      "description": "Controls sorting order of files and folders in the explorer.",
      "scope": 3
    },
    "explorer.decorations.colors": {
      "type": "boolean",
      "description": "Controls whether file decorations should use colors.",
      "default": true,
      "scope": 3
    },
    "explorer.decorations.badges": {
      "type": "boolean",
      "description": "Controls whether file decorations should use badges.",
      "default": true,
      "scope": 3
    },
    "explorer.incrementalNaming": {
      "enum": [
        "simple",
        "smart"
      ],
      "enumDescriptions": [
        "Appends the word \"copy\" at the end of the duplicated name potentially followed by a number",
        "Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number"
      ],
      "description": "Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.",
      "default": "simple",
      "scope": 3
    },
    "explorer.compactFolders": {
      "type": "boolean",
      "description": "Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.",
      "default": true,
      "scope": 3
    },
    "problems.autoReveal": {
      "description": "Controls whether Problems view should automatically reveal files when opening them.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "problems.showCurrentInStatus": {
      "description": "When enabled shows the current problem in the status bar.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "notebook.displayOrder": {
      "markdownDescription": "Priority list for output mime types",
      "type": [
        "array"
      ],
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 3
    },
    "outline.icons": {
      "description": "Render Outline Elements with Icons.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "outline.problems.enabled": {
      "description": "Show Errors & Warnings on Outline Elements.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "outline.problems.colors": {
      "description": "Use colors for Errors & Warnings.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "outline.problems.badges": {
      "description": "Use badges for Errors & Warnings.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "outline.showFiles": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "markdownDescription": "When enabled outline shows `file`-symbols."
    },
    "outline.showModules": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "markdownDescription": "When enabled outline shows `module`-symbols."
    },
    "outline.showNamespaces": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `namespace`-symbols."
    },
    "outline.showPackages": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `package`-symbols."
    },
    "outline.showClasses": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `class`-symbols."
    },
    "outline.showMethods": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `method`-symbols."
    },
    "outline.showProperties": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `property`-symbols."
    },
    "outline.showFields": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `field`-symbols."
    },
    "outline.showConstructors": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `constructor`-symbols."
    },
    "outline.showEnums": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `enum`-symbols."
    },
    "outline.showInterfaces": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `interface`-symbols."
    },
    "outline.showFunctions": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `function`-symbols."
    },
    "outline.showVariables": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `variable`-symbols."
    },
    "outline.showConstants": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `constant`-symbols."
    },
    "outline.showStrings": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `string`-symbols."
    },
    "outline.showNumbers": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `number`-symbols."
    },
    "outline.showBooleans": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "markdownDescription": "When enabled outline shows `boolean`-symbols."
    },
    "outline.showArrays": {
      "type": "boolean",
      "default": true,
      "scope": 5,
      "markdownDescription": "When enabled outline shows `array`-symbols."
    },
    "outline.showObjects": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `object`-symbols.",
      "scope": 3
    },
    "outline.showKeys": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `key`-symbols.",
      "scope": 3
    },
    "outline.showNull": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `null`-symbols.",
      "scope": 3
    },
    "outline.showEnumMembers": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `enumMember`-symbols.",
      "scope": 3
    },
    "outline.showStructs": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `struct`-symbols.",
      "scope": 3
    },
    "outline.showEvents": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `event`-symbols.",
      "scope": 3
    },
    "outline.showOperators": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `operator`-symbols.",
      "scope": 3
    },
    "outline.showTypeParameters": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled outline shows `typeParameter`-symbols.",
      "scope": 3
    },
    "output.smartScroll.enabled": {
      "type": "boolean",
      "description": "Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.",
      "default": true,
      "scope": 1,
      "tags": [
        "output"
      ]
    },
    "scm.diffDecorations": {
      "type": "string",
      "enum": [
        "all",
        "gutter",
        "overview",
        "minimap",
        "none"
      ],
      "enumDescriptions": [
        "Show the diff decorations in all available locations.",
        "Show the diff decorations only in the editor gutter.",
        "Show the diff decorations only in the overview ruler.",
        "Show the diff decorations only in the minimap.",
        "Do not show the diff decorations."
      ],
      "default": "all",
      "description": "Controls diff decorations in the editor.",
      "scope": 4
    },
    "scm.diffDecorationsGutterWidth": {
      "type": "number",
      "enum": [
        1,
        2,
        3,
        4,
        5
      ],
      "default": 3,
      "description": "Controls the width(px) of diff decorations in gutter (added & modified).",
      "scope": 4
    },
    "scm.diffDecorationsGutterVisibility": {
      "type": "string",
      "enum": [
        "always",
        "hover"
      ],
      "enumDescriptions": [
        "Show the diff decorator in the gutter at all times.",
        "Show the diff decorator in the gutter only on hover."
      ],
      "description": "Controls the visibility of the Source Control diff decorator in the gutter.",
      "default": "always",
      "scope": 4
    },
    "scm.alwaysShowActions": {
      "type": "boolean",
      "description": "Controls whether inline actions are always visible in the Source Control view.",
      "default": false,
      "scope": 4
    },
    "scm.countBadge": {
      "type": "string",
      "enum": [
        "all",
        "focused",
        "off"
      ],
      "enumDescriptions": [
        "Show the sum of all Source Control Providers count badges.",
        "Show the count badge of the focused Source Control Provider.",
        "Disable the Source Control count badge."
      ],
      "description": "Controls the Source Control count badge.",
      "default": "all",
      "scope": 4
    },
    "scm.providerCountBadge": {
      "type": "string",
      "enum": [
        "hidden",
        "auto",
        "visible"
      ],
      "enumDescriptions": [
        "Hide Source Control Providers count badges.",
        "Show Source Control Providers count badges if there are any changes.",
        "Show Source Control Providers count badges."
      ],
      "description": "Controls the Source Control Providers count badge.",
      "default": "hidden",
      "scope": 4
    },
    "scm.defaultViewMode": {
      "type": "string",
      "enum": [
        "tree",
        "list"
      ],
      "enumDescriptions": [
        "Show the repository changes as a tree.",
        "Show the repository changes as a list."
      ],
      "description": "Controls the default Source Control repository view mode.",
      "default": "list",
      "scope": 4
    },
    "scm.autoReveal": {
      "type": "boolean",
      "description": "Controls whether the SCM view should automatically reveal and select files when opening them.",
      "default": true,
      "scope": 4
    },
    "scm.inputFontFamily": {
      "type": "string",
      "markdownDescription": "Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `#editor.fontFamily#`'s value, or a custom font family.",
      "default": "default",
      "scope": 4
    },
    "search.exclude": {
      "type": "object",
      "markdownDescription": "Configure glob patterns for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `#files.exclude#` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
      "default": {
        "**/node_modules": true,
        "**/bower_components": true,
        "**/*.code-search": true
      },
      "additionalProperties": {
        "anyOf": [
          {
            "type": "boolean",
            "description": "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."
          },
          {
            "type": "object",
            "properties": {
              "when": {
                "type": "string",
                "pattern": "\\w*\\$\\(basename\\)\\w*",
                "default": "$(basename).ext",
                "description": "Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name."
              }
            }
          }
        ]
      },
      "scope": 4
    },
    "search.useRipgrep": {
      "type": "boolean",
      "description": "This setting is deprecated and now falls back on \"search.usePCRE2\".",
      "deprecationMessage": "Deprecated. Consider \"search.usePCRE2\" for advanced regex feature support.",
      "default": true,
      "scope": 3
    },
    "search.maintainFileSearchCache": {
      "type": "boolean",
      "description": "When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.",
      "default": false,
      "scope": 3
    },
    "search.useIgnoreFiles": {
      "type": "boolean",
      "markdownDescription": "Controls whether to use `.gitignore` and `.ignore` files when searching for files.",
      "default": true,
      "scope": 4
    },
    "search.useGlobalIgnoreFiles": {
      "type": "boolean",
      "markdownDescription": "Controls whether to use global `.gitignore` and `.ignore` files when searching for files.",
      "default": false,
      "scope": 4
    },
    "search.quickOpen.includeSymbols": {
      "type": "boolean",
      "description": "Whether to include results from a global symbol search in the file results for Quick Open.",
      "default": false,
      "scope": 3
    },
    "search.quickOpen.includeHistory": {
      "type": "boolean",
      "description": "Whether to include results from recently opened files in the file results for Quick Open.",
      "default": true,
      "scope": 3
    },
    "search.quickOpen.history.filterSortOrder": {
      "type": "string",
      "enum": [
        "default",
        "recency"
      ],
      "default": "default",
      "enumDescriptions": [
        "History entries are sorted by relevance based on the filter value used. More relevant entries appear first.",
        "History entries are sorted by recency. More recently opened entries appear first."
      ],
      "description": "Controls sorting order of editor history in quick open when filtering.",
      "scope": 3
    },
    "search.followSymlinks": {
      "type": "boolean",
      "description": "Controls whether to follow symlinks while searching.",
      "default": true,
      "scope": 3
    },
    "search.smartCase": {
      "type": "boolean",
      "description": "Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.",
      "default": false,
      "scope": 3
    },
    "search.location": {
      "type": "string",
      "enum": [
        "sidebar",
        "panel"
      ],
      "default": "sidebar",
      "description": "Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.",
      "deprecationMessage": "This setting is deprecated. Please use drag and drop instead by dragging the search icon.",
      "scope": 3
    },
    "search.collapseResults": {
      "type": "string",
      "enum": [
        "auto",
        "alwaysCollapse",
        "alwaysExpand"
      ],
      "enumDescriptions": [
        "Files with less than 10 results are expanded. Others are collapsed.",
        "",
        ""
      ],
      "default": "alwaysExpand",
      "description": "Controls whether the search results will be collapsed or expanded.",
      "scope": 3
    },
    "search.useReplacePreview": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to open Replace Preview when selecting or replacing a match.",
      "scope": 3
    },
    "search.showLineNumbers": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether to show line numbers for search results.",
      "scope": 3
    },
    "search.usePCRE2": {
      "type": "boolean",
      "default": false,
      "description": "Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.",
      "deprecationMessage": "Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.",
      "scope": 3
    },
    "search.actionsPosition": {
      "type": "string",
      "enum": [
        "auto",
        "right"
      ],
      "enumDescriptions": [
        "Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.",
        "Always position the actionbar to the right."
      ],
      "default": "auto",
      "description": "Controls the positioning of the actionbar on rows in the search view.",
      "scope": 3
    },
    "search.searchOnType": {
      "type": "boolean",
      "default": true,
      "description": "Search all files as you type.",
      "scope": 3
    },
    "search.seedWithNearestWord": {
      "type": "boolean",
      "default": false,
      "description": "Enable seeding search from the word nearest the cursor when the active editor has no selection.",
      "scope": 3
    },
    "search.seedOnFocus": {
      "type": "boolean",
      "default": false,
      "description": "Update workspace search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.",
      "scope": 3
    },
    "search.searchOnTypeDebouncePeriod": {
      "type": "number",
      "default": 300,
      "markdownDescription": "When `#search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.",
      "scope": 3
    },
    "search.searchEditor.doubleClickBehaviour": {
      "type": "string",
      "enum": [
        "selectWord",
        "goToLocation",
        "openLocationToSide"
      ],
      "default": "goToLocation",
      "enumDescriptions": [
        "Double clicking selects the word under the cursor.",
        "Double clicking opens the result in the active editor group.",
        "Double clicking opens the result in the editor group to the side, creating one if it does not yet exist."
      ],
      "markdownDescription": "Configure effect of double clicking a result in a search editor.",
      "scope": 3
    },
    "search.searchEditor.reusePriorSearchConfiguration": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor",
      "scope": 3
    },
    "search.searchEditor.defaultNumberOfContextLines": {
      "type": [
        "number",
        "null"
      ],
      "default": 1,
      "markdownDescription": "The default number of surrounding context lines to use when creating new Search Editors. If using `#search.searchEditor.reusePriorSearchConfiguration#`, this can be set to `null` (empty) to use the prior Search Editor's configuration.",
      "scope": 3
    },
    "search.sortOrder": {
      "type": "string",
      "enum": [
        "default",
        "fileNames",
        "type",
        "modified",
        "countDescending",
        "countAscending"
      ],
      "default": "default",
      "enumDescriptions": [
        "Results are sorted by folder and file names, in alphabetical order.",
        "Results are sorted by file names ignoring folder order, in alphabetical order.",
        "Results are sorted by file extensions, in alphabetical order.",
        "Results are sorted by file last modified date, in descending order.",
        "Results are sorted by count per file, in descending order.",
        "Results are sorted by count per file, in ascending order."
      ],
      "description": "Controls sorting order of search results.",
      "scope": 3
    },
    "terminal.integrated.automationShell.linux": {
      "markdownDescription": "A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "scope": 3
    },
    "terminal.integrated.automationShell.osx": {
      "markdownDescription": "A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "scope": 3
    },
    "terminal.integrated.automationShell.windows": {
      "markdownDescription": "A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "scope": 3
    },
    "terminal.integrated.shellArgs.linux": {
      "markdownDescription": "The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 3
    },
    "terminal.integrated.shellArgs.osx": {
      "markdownDescription": "The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        "-l"
      ],
      "scope": 3
    },
    "terminal.integrated.shellArgs.windows": {
      "markdownDescription": "The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "string",
            "markdownDescription": "The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)."
          }
        },
        {
          "type": "string",
          "markdownDescription": "The command line arguments in [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6) to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)."
        }
      ],
      "default": [],
      "scope": 3
    },
    "terminal.integrated.macOptionIsMeta": {
      "description": "Controls whether to treat the option key as the meta key in the terminal on macOS.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.macOptionClickForcesSelection": {
      "description": "Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.copyOnSelection": {
      "description": "Controls whether text selected in the terminal will be copied to the clipboard.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.drawBoldTextInBrightColors": {
      "description": "Controls whether bold text in the terminal will always use the \"bright\" ANSI color variant.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "terminal.integrated.fontFamily": {
      "markdownDescription": "Controls the font family of the terminal, this defaults to `#editor.fontFamily#`'s value.",
      "type": "string",
      "default": "",
      "scope": 3
    },
    "terminal.integrated.fontSize": {
      "description": "Controls the font size in pixels of the terminal.",
      "type": "number",
      "default": 14,
      "scope": 3
    },
    "terminal.integrated.letterSpacing": {
      "description": "Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.",
      "type": "number",
      "default": 0,
      "scope": 3
    },
    "terminal.integrated.lineHeight": {
      "description": "Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.",
      "type": "number",
      "default": 1,
      "scope": 3
    },
    "terminal.integrated.minimumContrastRatio": {
      "markdownDescription": "When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:\n\n- 1: The default, do nothing.\n- 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).\n- 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).\n- 21: White on black or black on white.",
      "type": "number",
      "default": 1,
      "scope": 3
    },
    "terminal.integrated.fastScrollSensitivity": {
      "markdownDescription": "Scrolling speed multiplier when pressing `Alt`.",
      "type": "number",
      "default": 5,
      "scope": 3
    },
    "terminal.integrated.mouseWheelScrollSensitivity": {
      "markdownDescription": "A multiplier to be used on the `deltaY` of mouse wheel scroll events.",
      "type": "number",
      "default": 1,
      "scope": 3
    },
    "terminal.integrated.fontWeight": {
      "type": "string",
      "enum": [
        "normal",
        "bold",
        "100",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "900"
      ],
      "description": "The font weight to use within the terminal for non-bold text.",
      "default": "normal",
      "scope": 3
    },
    "terminal.integrated.fontWeightBold": {
      "type": "string",
      "enum": [
        "normal",
        "bold",
        "100",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "900"
      ],
      "description": "The font weight to use within the terminal for bold text.",
      "default": "bold",
      "scope": 3
    },
    "terminal.integrated.cursorBlinking": {
      "description": "Controls whether the terminal cursor blinks.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.cursorStyle": {
      "description": "Controls the style of terminal cursor.",
      "enum": [
        "block",
        "line",
        "underline"
      ],
      "default": "block",
      "scope": 3
    },
    "terminal.integrated.cursorWidth": {
      "markdownDescription": "Controls the width of the cursor when `#terminal.integrated.cursorStyle#` is set to `line`.",
      "type": "number",
      "default": 1,
      "scope": 3
    },
    "terminal.integrated.scrollback": {
      "description": "Controls the maximum amount of lines the terminal keeps in its buffer.",
      "type": "number",
      "default": 1000,
      "scope": 3
    },
    "terminal.integrated.detectLocale": {
      "markdownDescription": "Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.",
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "markdownEnumDescriptions": [
        "Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.",
        "Do not set the `$LANG` environment variable.",
        "Always set the `$LANG` environment variable."
      ],
      "default": "auto",
      "scope": 3
    },
    "terminal.integrated.rendererType": {
      "type": "string",
      "enum": [
        "auto",
        "canvas",
        "dom",
        "experimentalWebgl"
      ],
      "markdownEnumDescriptions": [
        "Let VS Code guess which renderer to use.",
        "Use the standard GPU/canvas-based renderer.",
        "Use the fallback DOM-based renderer.",
        "Use the experimental webgl-based renderer. Note that this has some [known issues](https://github.com/xtermjs/xterm.js/issues?q=is%3Aopen+is%3Aissue+label%3Aarea%2Faddon%2Fwebgl) and this will only be enabled for new terminals (not hot swappable like the other renderers)."
      ],
      "default": "auto",
      "description": "Controls how the terminal is rendered.",
      "scope": 3
    },
    "terminal.integrated.rightClickBehavior": {
      "type": "string",
      "enum": [
        "default",
        "copyPaste",
        "paste",
        "selectWord"
      ],
      "enumDescriptions": [
        "Show the context menu.",
        "Copy when there is a selection, otherwise paste.",
        "Paste on right click.",
        "Select the word under the cursor and show the context menu."
      ],
      "default": "default",
      "description": "Controls how terminal reacts to right click.",
      "scope": 3
    },
    "terminal.integrated.cwd": {
      "description": "An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.",
      "type": "string",
      "default": "",
      "scope": 3
    },
    "terminal.integrated.confirmOnExit": {
      "description": "Controls whether to confirm on exit if there are active terminal sessions.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.enableBell": {
      "description": "Controls whether the terminal bell is enabled.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.commandsToSkipShell": {
      "markdownDescription": "A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by VS Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open. Use the command prefixed with `-` to remove default commands from the list.\nDefault Skipped Commands:\n\n- editor.action.toggleTabFocusMode\n- workbench.action.debug.continue\n- workbench.action.debug.pause\n- workbench.action.debug.restart\n- workbench.action.debug.run\n- workbench.action.debug.start\n- workbench.action.debug.stepInto\n- workbench.action.debug.stepOut\n- workbench.action.debug.stepOver\n- workbench.action.debug.stop\n- workbench.action.firstEditorInGroup\n- workbench.action.focusActiveEditorGroup\n- workbench.action.focusEighthEditorGroup\n- workbench.action.focusFifthEditorGroup\n- workbench.action.focusFirstEditorGroup\n- workbench.action.focusFourthEditorGroup\n- workbench.action.focusLastEditorGroup\n- workbench.action.focusNextPart\n- workbench.action.focusPreviousPart\n- workbench.action.focusSecondEditorGroup\n- workbench.action.focusSeventhEditorGroup\n- workbench.action.focusSixthEditorGroup\n- workbench.action.focusThirdEditorGroup\n- workbench.action.lastEditorInGroup\n- workbench.action.navigateDown\n- workbench.action.navigateLeft\n- workbench.action.navigateRight\n- workbench.action.navigateUp\n- workbench.action.nextEditor\n- workbench.action.nextEditorInGroup\n- workbench.action.nextPanelView\n- workbench.action.nextSideBarView\n- workbench.action.openNextRecentlyUsedEditor\n- workbench.action.openNextRecentlyUsedEditorInGroup\n- workbench.action.openPreviousRecentlyUsedEditor\n- workbench.action.openPreviousRecentlyUsedEditorInGroup\n- workbench.action.previousEditor\n- workbench.action.previousEditorInGroup\n- workbench.action.previousPanelView\n- workbench.action.previousSideBarView\n- workbench.action.quickOpen\n- workbench.action.quickOpenLeastRecentlyUsedEditor\n- workbench.action.quickOpenLeastRecentlyUsedEditorInGroup\n- workbench.action.quickOpenPreviousEditor\n- workbench.action.quickOpenPreviousRecentlyUsedEditor\n- workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup\n- workbench.action.quickOpenView\n- workbench.action.showCommands\n- workbench.action.tasks.build\n- workbench.action.tasks.reRunTask\n- workbench.action.tasks.restartTask\n- workbench.action.tasks.runTask\n- workbench.action.tasks.showLog\n- workbench.action.tasks.showTasks\n- workbench.action.tasks.terminate\n- workbench.action.tasks.test\n- workbench.action.terminal.clear\n- workbench.action.terminal.clearSelection\n- workbench.action.terminal.copySelection\n- workbench.action.terminal.deleteToLineStart\n- workbench.action.terminal.deleteWordLeft\n- workbench.action.terminal.deleteWordRight\n- workbench.action.terminal.findNext\n- workbench.action.terminal.findPrevious\n- workbench.action.terminal.focus\n- workbench.action.terminal.focusAtIndex1\n- workbench.action.terminal.focusAtIndex2\n- workbench.action.terminal.focusAtIndex3\n- workbench.action.terminal.focusAtIndex4\n- workbench.action.terminal.focusAtIndex5\n- workbench.action.terminal.focusAtIndex6\n- workbench.action.terminal.focusAtIndex7\n- workbench.action.terminal.focusAtIndex8\n- workbench.action.terminal.focusAtIndex9\n- workbench.action.terminal.focusFind\n- workbench.action.terminal.focusNext\n- workbench.action.terminal.focusNextPane\n- workbench.action.terminal.focusPrevious\n- workbench.action.terminal.focusPreviousPane\n- workbench.action.terminal.hideFind\n- workbench.action.terminal.kill\n- workbench.action.terminal.moveToLineEnd\n- workbench.action.terminal.moveToLineStart\n- workbench.action.terminal.navigationModeExit\n- workbench.action.terminal.navigationModeFocusNext\n- workbench.action.terminal.navigationModeFocusPrevious\n- workbench.action.terminal.new\n- workbench.action.terminal.newInActiveWorkspace\n- workbench.action.terminal.paste\n- workbench.action.terminal.resizePaneDown\n- workbench.action.terminal.resizePaneLeft\n- workbench.action.terminal.resizePaneRight\n- workbench.action.terminal.resizePaneUp\n- workbench.action.terminal.runActiveFile\n- workbench.action.terminal.runSelectedText\n- workbench.action.terminal.scrollDown\n- workbench.action.terminal.scrollDownPage\n- workbench.action.terminal.scrollToBottom\n- workbench.action.terminal.scrollToNextCommand\n- workbench.action.terminal.scrollToPreviousCommand\n- workbench.action.terminal.scrollToTop\n- workbench.action.terminal.scrollUp\n- workbench.action.terminal.scrollUpPage\n- workbench.action.terminal.selectAll\n- workbench.action.terminal.selectToNextCommand\n- workbench.action.terminal.selectToNextLine\n- workbench.action.terminal.selectToPreviousCommand\n- workbench.action.terminal.selectToPreviousLine\n- workbench.action.terminal.sendSequence\n- workbench.action.terminal.split\n- workbench.action.terminal.splitInActiveWorkspace\n- workbench.action.terminal.toggleFindCaseSensitive\n- workbench.action.terminal.toggleFindRegex\n- workbench.action.terminal.toggleFindWholeWord\n- workbench.action.terminal.toggleTerminal\n- workbench.action.toggleFullScreen\n- workbench.action.toggleMaximizedPanel\n- workbench.action.togglePanel",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 3
    },
    "terminal.integrated.allowChords": {
      "markdownDescription": "Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `#terminal.integrated.commandsToSkipShell#`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "terminal.integrated.allowMnemonics": {
      "markdownDescription": "Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes will skip the shell when true. This does nothing on macOS.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.inheritEnv": {
      "markdownDescription": "Whether new shells should inherit their environment from VS Code. This is not supported on Windows.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "terminal.integrated.env.osx": {
      "markdownDescription": "Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "default": {},
      "scope": 3
    },
    "terminal.integrated.env.linux": {
      "markdownDescription": "Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "default": {},
      "scope": 3
    },
    "terminal.integrated.env.windows": {
      "markdownDescription": "Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "default": {},
      "scope": 3
    },
    "terminal.integrated.environmentChangesIndicator": {
      "markdownDescription": "Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.",
      "type": "string",
      "enum": [
        "off",
        "on",
        "warnonly"
      ],
      "enumDescriptions": [
        "Disable the indicator.",
        "Enable the indicator.",
        "Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension."
      ],
      "default": "warnonly",
      "scope": 3
    },
    "terminal.integrated.showExitAlert": {
      "description": "Controls whether to show the alert \"The terminal process terminated with exit code\" when exit code is non-zero.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "terminal.integrated.splitCwd": {
      "description": "Controls the working directory a split terminal starts with.",
      "type": "string",
      "enum": [
        "workspaceRoot",
        "initial",
        "inherited"
      ],
      "enumDescriptions": [
        "A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.",
        "A new split terminal will use the working directory that the parent terminal started with.",
        "On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial."
      ],
      "default": "inherited",
      "scope": 3
    },
    "terminal.integrated.windowsEnableConpty": {
      "description": "Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "terminal.integrated.wordSeparators": {
      "description": "A string containing all characters to be considered word separators by the double click to select word feature.",
      "type": "string",
      "default": " ()[]{}',\"`─",
      "scope": 3
    },
    "terminal.integrated.experimentalUseTitleEvent": {
      "description": "An experimental setting that will use the terminal title event for the dropdown title. This setting will only apply to new terminals.",
      "type": "boolean",
      "default": false,
      "scope": 3
    },
    "terminal.integrated.enableFileLinks": {
      "description": "Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "terminal.integrated.unicodeVersion": {
      "type": "string",
      "enum": [
        "6",
        "11"
      ],
      "enumDescriptions": [
        "Version 6 of unicode, this is an older version which should work better on older systems.",
        "Version 11 of unicode, this version provides better support on modern systems that use modern versions of unicode."
      ],
      "default": "11",
      "description": "Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.",
      "scope": 3
    },
    "terminal.integrated.experimentalLinkProvider": {
      "description": "An experimental setting that aims to improve link detection in the terminal by improving when links are detected and by enabling shared link detection with the editor. Currently this only supports web links.",
      "type": "boolean",
      "default": true,
      "scope": 3
    },
    "timeline.excludeSources": {
      "type": [
        "array",
        "null"
      ],
      "default": null,
      "description": "An array of Timeline sources that should be excluded from the Timeline view",
      "scope": 3
    },
    "timeline.pageSize": {
      "type": [
        "number",
        "null"
      ],
      "default": null,
      "markdownDescription": "The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view",
      "scope": 3
    },
    "timeline.pageOnScroll": {
      "type": "boolean",
      "default": false,
      "description": "Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list",
      "scope": 3
    },
    "workbench.tips.enabled": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, will show the watermark tips when no editor is open.",
      "scope": 3
    },
    "terminal.explorerKind": {
      "type": "string",
      "enum": [
        "integrated",
        "external"
      ],
      "enumDescriptions": [
        "Use VS Code's integrated terminal.",
        "Use the configured external terminal."
      ],
      "description": "Customizes what kind of terminal to launch.",
      "default": "integrated",
      "scope": 3
    },
    "terminal.external.windowsExec": {
      "type": "string",
      "description": "Customizes which terminal to run on Windows.",
      "default": "C:\\Windows\\System32\\cmd.exe",
      "scope": 1
    },
    "terminal.external.osxExec": {
      "type": "string",
      "description": "Customizes which terminal application to run on macOS.",
      "default": "Terminal.app",
      "scope": 1
    },
    "terminal.external.linuxExec": {
      "type": "string",
      "description": "Customizes which terminal to run on Linux.",
      "default": "x-terminal-emulator",
      "scope": 1
    },
    "workbench.colorTheme": {
      "type": "string",
      "description": "Specifies the color theme used in the workbench.",
      "default": "Default Dark+",
      "enum": [
        "Abyss",
        "Default Dark+",
        "Default Light+",
        "Visual Studio Dark",
        "Visual Studio Light",
        "Default High Contrast",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "scope": 3
    },
    "workbench.preferredDarkColorTheme": {
      "type": "string",
      "description": "Specifies the preferred color theme for dark OS appearance when 'window.autoDetectColorScheme' is enabled.",
      "default": "Default Dark+",
      "enum": [
        "Abyss",
        "Default Dark+",
        "Default Light+",
        "Visual Studio Dark",
        "Visual Studio Light",
        "Default High Contrast",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "scope": 3
    },
    "workbench.preferredLightColorTheme": {
      "type": "string",
      "description": "Specifies the preferred color theme for light OS appearance when 'window.autoDetectColorScheme' is enabled.",
      "default": "Default Light+",
      "enum": [
        "Abyss",
        "Default Dark+",
        "Default Light+",
        "Visual Studio Dark",
        "Visual Studio Light",
        "Default High Contrast",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "scope": 3
    },
    "workbench.preferredHighContrastColorTheme": {
      "type": "string",
      "description": "Specifies the preferred color theme used in high contrast mode when 'window.autoDetectHighContrast' is enabled.",
      "default": "Default High Contrast",
      "enum": [
        "Abyss",
        "Default Dark+",
        "Default Light+",
        "Visual Studio Dark",
        "Visual Studio Light",
        "Default High Contrast",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "scope": 3
    },
    "window.autoDetectColorScheme": {
      "type": "boolean",
      "description": "If set, automatically switch to the preferred color theme based on the OS appearance.",
      "default": false,
      "scope": 3
    },
    "workbench.iconTheme": {
      "type": [
        "string",
        "null"
      ],
      "default": "vs-seti",
      "description": "Specifies the file icon theme used in the workbench or 'null' to not show any file icons.",
      "enum": [
        null,
        "vs-minimal",
        "vs-seti"
      ],
      "enumDescriptions": [
        "No file icons",
        "",
        ""
      ],
      "errorMessage": "File icon theme is unknown or not installed.",
      "scope": 3
    },
    "workbench.colorCustomizations": {
      "type": "object",
      "description": "Overrides colors from the currently selected color theme.",
      "allOf": [
        {
          "$ref": "vscode://schemas/workbench-colors"
        },
        {
          "properties": {
            "[Abyss]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Default Dark+]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Default Light+]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Visual Studio Dark]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Visual Studio Light]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Default High Contrast]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Kimbie Dark]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Monokai]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Monokai Dimmed]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Quiet Light]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Red]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Solarized Dark]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Solarized Light]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            },
            "[Tomorrow Night Blue]": {
              "$ref": "vscode://schemas/workbench-colors",
              "additionalProperties": false
            }
          }
        }
      ],
      "default": {},
      "defaultSnippets": [
        {
          "body": {}
        }
      ],
      "scope": 3
    },
    "workbench.productIconTheme": {
      "type": [
        "string",
        "null"
      ],
      "default": "Default",
      "description": "Specifies the product icon theme used.",
      "enum": [
        "Default"
      ],
      "enumDescriptions": [
        "Default"
      ],
      "errorMessage": "Product icon theme is unknown or not installed.",
      "scope": 3
    },
    "[plaintext]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[Log]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[log]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[scminput]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[css]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.suggest.insertMode": "replace"
      }
    },
    "[scss]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.suggest.insertMode": "replace"
      }
    },
    "[less]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.suggest.insertMode": "replace"
      }
    },
    "[dockerfile]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.quickSuggestions": {
          "strings": true
        }
      }
    },
    "[git-commit]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.rulers": [
          72
        ]
      }
    },
    "[go]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.insertSpaces": false
      }
    },
    "[html]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.suggest.insertMode": "replace"
      }
    },
    "[handlebars]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.suggest.insertMode": "replace"
      }
    },
    "[json]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.quickSuggestions": {
          "strings": true
        },
        "editor.suggest.insertMode": "replace"
      }
    },
    "[jsonc]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.quickSuggestions": {
          "strings": true
        },
        "editor.suggest.insertMode": "replace"
      }
    },
    "[makefile]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.insertSpaces": false
      }
    },
    "[markdown]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.wordWrap": "on",
        "editor.quickSuggestions": false
      }
    },
    "[search-result]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.lineNumbers": "off"
      }
    },
    "[shellscript]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "files.eol": "\n"
      }
    },
    "[yaml]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
        "editor.autoIndent": "advanced"
      }
    },
    "css.customData": {
      "type": "array",
      "markdownDescription": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/Microsoft/vscode-css-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.",
      "default": [],
      "items": {
        "type": "string"
      },
      "scope": 4
    },
    "css.completion.triggerPropertyValueCompletion": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior."
    },
    "css.completion.completePropertyWithSemicolon": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Insert semicolon at end of line when completing CSS properties"
    },
    "css.validate": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enables or disables all validations."
    },
    "css.lint.compatibleVendorPrefixes": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties."
    },
    "css.lint.vendorPrefix": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "When using a vendor-specific prefix, also include the standard property."
    },
    "css.lint.duplicateProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Do not use duplicate style definitions."
    },
    "css.lint.emptyRules": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Do not use empty rulesets."
    },
    "css.lint.importStatement": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Import statements do not load in parallel."
    },
    "css.lint.boxModel": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Do not use `width` or `height` when using `padding` or `border`."
    },
    "css.lint.universalSelector": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "The universal selector (`*`) is known to be slow."
    },
    "css.lint.zeroUnits": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "No unit for zero needed."
    },
    "css.lint.fontFaceProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "`@font-face` rule must define `src` and `font-family` properties."
    },
    "css.lint.hexColorLength": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Hex colors must consist of three or six hex numbers."
    },
    "css.lint.argumentsInColorFunction": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Invalid number of parameters."
    },
    "css.lint.unknownProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown property."
    },
    "css.lint.validProperties": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      },
      "scope": 4,
      "default": [],
      "description": "A list of properties that are not validated against the `unknownProperties` rule."
    },
    "css.lint.ieHack": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "IE hacks are only necessary when supporting IE7 and older."
    },
    "css.lint.unknownVendorSpecificProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Unknown vendor specific property."
    },
    "css.lint.propertyIgnoredDueToDisplay": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect."
    },
    "css.lint.important": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."
    },
    "css.lint.float": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."
    },
    "css.lint.idSelector": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML."
    },
    "css.lint.unknownAtRules": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown at-rule."
    },
    "css.trace.server": {
      "type": "string",
      "scope": 3,
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "default": "off",
      "description": "Traces the communication between VS Code and the CSS language server."
    },
    "scss.completion.triggerPropertyValueCompletion": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior."
    },
    "scss.completion.completePropertyWithSemicolon": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Insert semicolon at end of line when completing CSS properties"
    },
    "scss.validate": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enables or disables all validations."
    },
    "scss.lint.compatibleVendorPrefixes": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties."
    },
    "scss.lint.vendorPrefix": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "When using a vendor-specific prefix, also include the standard property."
    },
    "scss.lint.duplicateProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Do not use duplicate style definitions."
    },
    "scss.lint.emptyRules": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Do not use empty rulesets."
    },
    "scss.lint.importStatement": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Import statements do not load in parallel."
    },
    "scss.lint.boxModel": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Do not use `width` or `height` when using `padding` or `border`."
    },
    "scss.lint.universalSelector": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "The universal selector (`*`) is known to be slow."
    },
    "scss.lint.zeroUnits": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "No unit for zero needed."
    },
    "scss.lint.fontFaceProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "`@font-face` rule must define `src` and `font-family` properties."
    },
    "scss.lint.hexColorLength": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Hex colors must consist of three or six hex numbers."
    },
    "scss.lint.argumentsInColorFunction": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Invalid number of parameters."
    },
    "scss.lint.unknownProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown property."
    },
    "scss.lint.validProperties": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      },
      "scope": 4,
      "default": [],
      "description": "A list of properties that are not validated against the `unknownProperties` rule."
    },
    "scss.lint.ieHack": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "IE hacks are only necessary when supporting IE7 and older."
    },
    "scss.lint.unknownVendorSpecificProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Unknown vendor specific property."
    },
    "scss.lint.propertyIgnoredDueToDisplay": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect."
    },
    "scss.lint.important": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."
    },
    "scss.lint.float": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."
    },
    "scss.lint.idSelector": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML."
    },
    "scss.lint.unknownAtRules": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown at-rule."
    },
    "less.completion.triggerPropertyValueCompletion": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior."
    },
    "less.completion.completePropertyWithSemicolon": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Insert semicolon at end of line when completing CSS properties"
    },
    "less.validate": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enables or disables all validations."
    },
    "less.lint.compatibleVendorPrefixes": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties."
    },
    "less.lint.vendorPrefix": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "When using a vendor-specific prefix, also include the standard property."
    },
    "less.lint.duplicateProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Do not use duplicate style definitions."
    },
    "less.lint.emptyRules": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Do not use empty rulesets."
    },
    "less.lint.importStatement": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Import statements do not load in parallel."
    },
    "less.lint.boxModel": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Do not use `width` or `height` when using `padding` or `border`."
    },
    "less.lint.universalSelector": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "The universal selector (`*`) is known to be slow."
    },
    "less.lint.zeroUnits": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "No unit for zero needed."
    },
    "less.lint.fontFaceProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "`@font-face` rule must define `src` and `font-family` properties."
    },
    "less.lint.hexColorLength": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Hex colors must consist of three or six hex numbers."
    },
    "less.lint.argumentsInColorFunction": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Invalid number of parameters."
    },
    "less.lint.unknownProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown property."
    },
    "less.lint.validProperties": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      },
      "scope": 4,
      "default": [],
      "description": "A list of properties that are not validated against the `unknownProperties` rule."
    },
    "less.lint.ieHack": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "IE hacks are only necessary when supporting IE7 and older."
    },
    "less.lint.unknownVendorSpecificProperties": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Unknown vendor specific property."
    },
    "less.lint.propertyIgnoredDueToDisplay": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect."
    },
    "less.lint.important": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."
    },
    "less.lint.float": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."
    },
    "less.lint.idSelector": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML."
    },
    "less.lint.unknownAtRules": {
      "type": "string",
      "scope": 4,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown at-rule."
    },
    "debug.node.autoAttach": {
      "scope": 3,
      "type": "string",
      "enum": [
        "disabled",
        "on",
        "off"
      ],
      "enumDescriptions": [
        "Auto attach is disabled and not shown in status bar.",
        "Auto attach is active.",
        "Auto attach is inactive."
      ],
      "description": "Automatically attach node debugger when node.js was launched in debug mode from integrated terminal.",
      "default": "disabled"
    },
    "emmet.showExpandedAbbreviation": {
      "type": [
        "string"
      ],
      "enum": [
        "never",
        "always",
        "inMarkupAndStylesheetFilesOnly"
      ],
      "default": "always",
      "markdownDescription": "Shows expanded Emmet abbreviations as suggestions.\nThe option `\"inMarkupAndStylesheetFilesOnly\"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.\nThe option `\"always\"` applies to all parts of the file regardless of markup/css.",
      "scope": 3
    },
    "emmet.showAbbreviationSuggestions": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `\"never\"`.",
      "scope": 3
    },
    "emmet.includeLanguages": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "markdownDescription": "Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.\n E.g.: `{\"vue-html\": \"html\", \"javascript\": \"javascriptreact\"}`",
      "scope": 3
    },
    "emmet.variables": {
      "type": "object",
      "properties": {
        "lang": {
          "type": "string",
          "default": "en"
        },
        "charset": {
          "type": "string",
          "default": "UTF-8"
        }
      },
      "default": {},
      "description": "Variables to be used in Emmet snippets",
      "scope": 3
    },
    "emmet.syntaxProfiles": {
      "type": "object",
      "default": {},
      "description": "Define profile for specified syntax or use your own profile with specific rules.",
      "scope": 3
    },
    "emmet.excludeLanguages": {
      "type": "array",
      "default": [
        "markdown"
      ],
      "description": "An array of languages where Emmet abbreviations should not be expanded.",
      "scope": 3
    },
    "emmet.extensionsPath": {
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "description": "Path to a folder containing Emmet profiles and snippets.",
      "scope": 3
    },
    "emmet.triggerExpansionOnTab": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, Emmet abbreviations are expanded when pressing TAB.",
      "scope": 3
    },
    "emmet.preferences": {
      "type": "object",
      "default": {},
      "description": "Preferences used to modify behavior of some actions and resolvers of Emmet.",
      "properties": {
        "css.intUnit": {
          "type": "string",
          "default": "px",
          "description": "Default unit for integer values"
        },
        "css.floatUnit": {
          "type": "string",
          "default": "em",
          "description": "Default unit for float values"
        },
        "css.propertyEnd": {
          "type": "string",
          "default": ";",
          "description": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations"
        },
        "sass.propertyEnd": {
          "type": "string",
          "default": "",
          "description": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Sass files"
        },
        "stylus.propertyEnd": {
          "type": "string",
          "default": "",
          "description": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Stylus files"
        },
        "css.valueSeparator": {
          "type": "string",
          "default": ": ",
          "description": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations"
        },
        "sass.valueSeparator": {
          "type": "string",
          "default": ": ",
          "description": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Sass files"
        },
        "stylus.valueSeparator": {
          "type": "string",
          "default": " ",
          "description": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Stylus files"
        },
        "bem.elementSeparator": {
          "type": "string",
          "default": "__",
          "description": "Element separator used for classes when using the BEM filter"
        },
        "bem.modifierSeparator": {
          "type": "string",
          "default": "_",
          "description": "Modifier separator used for classes when using the BEM filter"
        },
        "filter.commentBefore": {
          "type": "string",
          "default": "",
          "description": "A definition of comment that should be placed before matched element when comment filter is applied."
        },
        "filter.commentAfter": {
          "type": "string",
          "default": "\n<!-- /[#ID][.CLASS] -->",
          "description": "A definition of comment that should be placed after matched element when comment filter is applied."
        },
        "filter.commentTrigger": {
          "type": "array",
          "default": [
            "id",
            "class"
          ],
          "description": "A comma-separated list of attribute names that should exist in abbreviation for the comment filter to be applied"
        },
        "format.noIndentTags": {
          "type": "array",
          "default": [
            "html"
          ],
          "description": "An array of tag names that should not get inner indentation"
        },
        "format.forceIndentationForTags": {
          "type": "array",
          "default": [
            "body"
          ],
          "description": "An array of tag names that should always get inner indentation"
        },
        "profile.allowCompactBoolean": {
          "type": "boolean",
          "default": false,
          "description": "If true, compact notation of boolean attributes are produced"
        },
        "css.webkitProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'webkit' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'webkit' prefix."
        },
        "css.mozProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'moz' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'moz' prefix."
        },
        "css.oProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'o' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'o' prefix."
        },
        "css.msProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'ms' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'ms' prefix."
        },
        "css.fuzzySearchMinScore": {
          "type": "number",
          "default": 0.3,
          "description": "The minimum score (from 0 to 1) that fuzzy-matched abbreviation should achieve. Lower values may produce many false-positive matches, higher values may reduce possible matches."
        }
      },
      "scope": 3
    },
    "emmet.showSuggestionsAsSnippets": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `#editor.snippetSuggestions#` setting.",
      "scope": 3
    },
    "emmet.optimizeStylesheetParsing": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in css/scss/less files is parsed.",
      "scope": 3
    },
    "git.enabled": {
      "type": "boolean",
      "scope": 4,
      "description": "Whether git is enabled.",
      "default": true
    },
    "git.path": {
      "type": [
        "string",
        "null"
      ],
      "markdownDescription": "Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows).",
      "default": null,
      "scope": 2
    },
    "git.autoRepositoryDetection": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        false,
        "subFolders",
        "openEditors"
      ],
      "enumDescriptions": [
        "Scan for both subfolders of the current opened folder and parent folders of open files.",
        "Disable automatic repository scanning.",
        "Scan for subfolders of the currently opened folder.",
        "Scan for parent folders of open files."
      ],
      "description": "Configures when repositories should be automatically detected.",
      "default": true,
      "scope": 3
    },
    "git.autorefresh": {
      "type": "boolean",
      "description": "Whether auto refreshing is enabled.",
      "default": true,
      "scope": 3
    },
    "git.autofetch": {
      "type": "boolean",
      "scope": 4,
      "description": "When enabled, commits will automatically be fetched from the default remote of the current Git repository.",
      "default": false,
      "tags": [
        "usesOnlineServices"
      ]
    },
    "git.autofetchPeriod": {
      "type": "number",
      "scope": 4,
      "description": "Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.",
      "default": 180
    },
    "git.branchValidationRegex": {
      "type": "string",
      "description": "A regular expression to validate new branch names.",
      "default": "",
      "scope": 3
    },
    "git.branchWhitespaceChar": {
      "type": "string",
      "description": "The character to replace whitespace in new branch names.",
      "default": "-",
      "scope": 3
    },
    "git.confirmSync": {
      "type": "boolean",
      "description": "Confirm before synchronizing git repositories.",
      "default": true,
      "scope": 3
    },
    "git.countBadge": {
      "type": "string",
      "enum": [
        "all",
        "tracked",
        "off"
      ],
      "enumDescriptions": [
        "Count all changes.",
        "Count only tracked changes.",
        "Turn off counter."
      ],
      "description": "Controls the Git count badge.",
      "default": "all",
      "scope": 4
    },
    "git.checkoutType": {
      "type": "string",
      "enum": [
        "all",
        "local",
        "tags",
        "remote"
      ],
      "enumDescriptions": [
        "Show all references.",
        "Show only local branches.",
        "Show only tags.",
        "Show only remote branches."
      ],
      "markdownDescription": "Controls what type of branches are listed when running `Checkout to...`.",
      "default": "all",
      "scope": 3
    },
    "git.ignoreLegacyWarning": {
      "type": "boolean",
      "description": "Ignores the legacy Git warning.",
      "default": false,
      "scope": 3
    },
    "git.ignoreMissingGitWarning": {
      "type": "boolean",
      "description": "Ignores the warning when Git is missing.",
      "default": false,
      "scope": 3
    },
    "git.ignoreLimitWarning": {
      "type": "boolean",
      "description": "Ignores the warning when there are too many changes in a repository.",
      "default": false,
      "scope": 3
    },
    "git.defaultCloneDirectory": {
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "description": "The default location to clone a git repository.",
      "scope": 3
    },
    "git.enableSmartCommit": {
      "type": "boolean",
      "scope": 4,
      "description": "Commit all changes when there are no staged changes.",
      "default": false
    },
    "git.smartCommitChanges": {
      "type": "string",
      "enum": [
        "all",
        "tracked"
      ],
      "enumDescriptions": [
        "Automatically stage all changes.",
        "Automatically stage tracked changes only."
      ],
      "scope": 4,
      "description": "Control which changes are automatically staged by Smart Commit.",
      "default": "all"
    },
    "git.suggestSmartCommit": {
      "type": "boolean",
      "scope": 4,
      "description": "Suggests to enable smart commit (commit all changes when there are no staged changes).",
      "default": true
    },
    "git.enableCommitSigning": {
      "type": "boolean",
      "scope": 4,
      "description": "Enables commit signing with GPG.",
      "default": false
    },
    "git.confirmEmptyCommits": {
      "type": "boolean",
      "scope": 4,
      "description": "Always confirm the creation of empty commits for the 'Git: Commit Empty' command.",
      "default": true
    },
    "git.decorations.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether Git contributes colors and badges to the explorer and the open editors view.",
      "scope": 3
    },
    "git.enableStatusBarSync": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the Git Sync command appears in the status bar.",
      "scope": 4
    },
    "git.promptToSaveFilesBeforeCommit": {
      "type": "string",
      "enum": [
        "always",
        "staged",
        "never"
      ],
      "enumDescriptions": [
        "Check for any unsaved files.",
        "Check only for unsaved staged files.",
        "Disable this check."
      ],
      "scope": 4,
      "default": "always",
      "description": "Controls whether Git should check for unsaved files before committing."
    },
    "git.postCommitCommand": {
      "type": "string",
      "enum": [
        "none",
        "push",
        "sync"
      ],
      "enumDescriptions": [
        "Don't run any command after a commit.",
        "Run 'Git Push' after a successful commit.",
        "Run 'Git Sync' after a successful commit."
      ],
      "markdownDescription": "Runs a git command after a successful commit.",
      "scope": 4,
      "default": "none"
    },
    "git.showInlineOpenFileAction": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to show an inline Open File action in the Git changes view.",
      "scope": 3
    },
    "git.showPushSuccessNotification": {
      "type": "boolean",
      "description": "Controls whether to show a notification when a push is successful.",
      "default": false,
      "scope": 3
    },
    "git.inputValidation": {
      "type": "string",
      "enum": [
        "always",
        "warn",
        "off"
      ],
      "default": "warn",
      "description": "Controls when to show commit message input validation.",
      "scope": 3
    },
    "git.inputValidationLength": {
      "type": "number",
      "default": 72,
      "description": "Controls the commit message length threshold for showing a warning.",
      "scope": 3
    },
    "git.inputValidationSubjectLength": {
      "type": [
        "number",
        "null"
      ],
      "default": 50,
      "description": "Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.",
      "scope": 3
    },
    "git.detectSubmodules": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether to automatically detect git submodules."
    },
    "git.detectSubmodulesLimit": {
      "type": "number",
      "scope": 4,
      "default": 10,
      "description": "Controls the limit of git submodules detected."
    },
    "git.alwaysShowStagedChangesResourceGroup": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "Always show the Staged Changes resource group."
    },
    "git.alwaysSignOff": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "Controls the signoff flag for all commits."
    },
    "git.ignoredRepositories": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 3,
      "description": "List of git repositories to ignore."
    },
    "git.scanRepositories": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 4,
      "description": "List of paths to search for git repositories in."
    },
    "git.showProgress": {
      "type": "boolean",
      "description": "Controls whether git actions should show progress.",
      "default": true,
      "scope": 4
    },
    "git.rebaseWhenSync": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "Force git to use rebase when running the sync command."
    },
    "git.fetchOnPull": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "When enabled, fetch all branches when pulling. Otherwise, fetch just the current one."
    },
    "git.pullTags": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Fetch all tags when pulling."
    },
    "git.autoStash": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "Stash any changes before pulling and restore them after successful pull."
    },
    "git.allowForcePush": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether force push (with or without lease) is enabled.",
      "scope": 3
    },
    "git.useForcePushWithLease": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether force pushing uses the safer force-with-lease variant.",
      "scope": 3
    },
    "git.confirmForcePush": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to ask for confirmation before force-pushing.",
      "scope": 3
    },
    "git.openDiffOnClick": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened."
    },
    "git.supportCancellation": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation."
    },
    "git.branchSortOrder": {
      "type": "string",
      "enum": [
        "committerdate",
        "alphabetically"
      ],
      "default": "committerdate",
      "description": "Controls the sort order for branches.",
      "scope": 3
    },
    "git.untrackedChanges": {
      "type": "string",
      "enum": [
        "mixed",
        "separate",
        "hidden"
      ],
      "enumDescriptions": [
        "All changes, tracked and untracked, appear together and behave equally.",
        "Untracked changes appear separately in the Source Control view. They are also excluded from several actions.",
        "Untracked changes are hidden and excluded from several actions."
      ],
      "default": "mixed",
      "description": "Controls how untracked changes behave.",
      "scope": 4
    },
    "git.showCommitInput": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether to show the commit input in the Git source control panel."
    },
    "git.terminalAuthentication": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting."
    },
    "git.githubAuthentication": {
      "deprecationMessage": "This setting is now deprecated, please use `github.gitAuthentication` instead.",
      "scope": 3,
      "default": null
    },
    "github.gitAuthentication": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether to enable automatic GitHub authentication for git commands within VS Code."
    },
    "grunt.autoDetect": {
      "scope": 4,
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "on",
      "description": "Controls whether auto detection of Grunt tasks is on or off. Default is on."
    },
    "gulp.autoDetect": {
      "scope": 4,
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "on",
      "description": "Controls whether auto detection of Gulp tasks is on or off. Default is on."
    },
    "html.customData": {
      "type": "array",
      "markdownDescription": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/Microsoft/vscode-html-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.",
      "default": [],
      "items": {
        "type": "string"
      },
      "scope": 4
    },
    "html.format.enable": {
      "type": "boolean",
      "scope": 3,
      "default": true,
      "description": "Enable/disable default HTML formatter."
    },
    "html.format.wrapLineLength": {
      "type": "integer",
      "scope": 4,
      "default": 120,
      "description": "Maximum amount of characters per line (0 = disable)."
    },
    "html.format.unformatted": {
      "type": [
        "string",
        "null"
      ],
      "scope": 4,
      "default": "wbr",
      "markdownDescription": "List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content."
    },
    "html.format.contentUnformatted": {
      "type": [
        "string",
        "null"
      ],
      "scope": 4,
      "default": "pre,code,textarea",
      "markdownDescription": "List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag."
    },
    "html.format.indentInnerHtml": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "markdownDescription": "Indent `<head>` and `<body>` sections."
    },
    "html.format.preserveNewLines": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text."
    },
    "html.format.maxPreserveNewLines": {
      "type": [
        "number",
        "null"
      ],
      "scope": 4,
      "default": null,
      "markdownDescription": "Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited."
    },
    "html.format.indentHandlebars": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "markdownDescription": "Format and indent `{{#foo}}` and `{{/foo}}`."
    },
    "html.format.endWithNewline": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "End with a newline."
    },
    "html.format.extraLiners": {
      "type": [
        "string",
        "null"
      ],
      "scope": 4,
      "default": "head, body, /html",
      "markdownDescription": "List of tags, comma separated, that should have an extra newline before them. `null` defaults to `\"head, body, /html\"`."
    },
    "html.format.wrapAttributes": {
      "type": "string",
      "scope": 4,
      "default": "auto",
      "enum": [
        "auto",
        "force",
        "force-aligned",
        "force-expand-multiline",
        "aligned-multiple",
        "preserve",
        "preserve-aligned"
      ],
      "enumDescriptions": [
        "Wrap attributes only when line length is exceeded.",
        "Wrap each attribute except first.",
        "Wrap each attribute except first and keep aligned.",
        "Wrap each attribute.",
        "Wrap when line length is exceeded, align attributes vertically.",
        "Preserve wrapping of attributes",
        "Preserve wrapping of attributes but align."
      ],
      "description": "Wrap attributes."
    },
    "html.suggest.html5": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether the built-in HTML language support suggests HTML5 tags, properties and values."
    },
    "html.validate.scripts": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether the built-in HTML language support validates embedded scripts."
    },
    "html.validate.styles": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Controls whether the built-in HTML language support validates embedded styles."
    },
    "html.autoClosingTags": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enable/disable autoclosing of HTML tags."
    },
    "html.mirrorCursorOnMatchingTag": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "Enable/disable mirroring cursor on matching HTML tag.",
      "deprecationMessage": "Deprecated in favor of `editor.renameOnType`"
    },
    "html.trace.server": {
      "type": "string",
      "scope": 3,
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "default": "off",
      "description": "Traces the communication between VS Code and the HTML language server."
    },
    "jake.autoDetect": {
      "scope": 4,
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "on",
      "description": "Controls whether auto detection of Jake tasks is on or off. Default is on."
    },
    "json.schemas": {
      "type": "array",
      "scope": 4,
      "description": "Associate schemas to JSON files in the current project",
      "items": {
        "type": "object",
        "default": {
          "fileMatch": [
            "/myfile"
          ],
          "url": "schemaURL"
        },
        "properties": {
          "url": {
            "type": "string",
            "default": "/user.schema.json",
            "description": "A URL to a schema or a relative path to a schema in the current directory"
          },
          "fileMatch": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "MyFile.json",
              "description": "A file pattern that can contain '*' to match against when resolving JSON files to schemas."
            },
            "minItems": 1,
            "description": "An array of file patterns to match against when resolving JSON files to schemas. `*` can be used as a wildcard. Exclusion patterns can also be defined and start with '!'. A file matches when there is at least one matching pattern and the last matching pattern is not an exclusion pattern."
          },
          "schema": {
            "$ref": "http://json-schema.org/draft-07/schema#",
            "description": "The schema definition for the given URL. The schema only needs to be provided to avoid accesses to the schema URL."
          }
        }
      },
      "default": []
    },
    "json.format.enable": {
      "type": "boolean",
      "scope": 3,
      "default": true,
      "description": "Enable/disable default JSON formatter"
    },
    "json.trace.server": {
      "type": "string",
      "scope": 3,
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "default": "off",
      "description": "Traces the communication between VS Code and the JSON language server."
    },
    "json.colorDecorators.enable": {
      "type": "boolean",
      "scope": 3,
      "default": true,
      "description": "Enables or disables color decorators",
      "deprecationMessage": "The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`."
    },
    "json.maxItemsComputed": {
      "type": "number",
      "default": 5000,
      "description": "The maximum number of outline symbols and folding regions computed (limited for performance reasons).",
      "scope": 3
    },
    "json.schemaDownload.enable": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, JSON schemas can be fetched from http and https locations.",
      "tags": [
        "usesOnlineServices"
      ],
      "scope": 3
    },
    "markdown.styles": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "description": "A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\\' need to be written as '\\\\'.",
      "scope": 4
    },
    "markdown.preview.breaks": {
      "type": "boolean",
      "default": false,
      "description": "Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.",
      "scope": 4
    },
    "markdown.preview.linkify": {
      "type": "boolean",
      "default": true,
      "description": "Enable or disable conversion of URL-like text to links in the markdown preview.",
      "scope": 4
    },
    "markdown.preview.fontFamily": {
      "type": "string",
      "default": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
      "description": "Controls the font family used in the markdown preview.",
      "scope": 4
    },
    "markdown.preview.fontSize": {
      "type": "number",
      "default": 14,
      "description": "Controls the font size in pixels used in the markdown preview.",
      "scope": 4
    },
    "markdown.preview.lineHeight": {
      "type": "number",
      "default": 1.6,
      "description": "Controls the line height used in the markdown preview. This number is relative to the font size.",
      "scope": 4
    },
    "markdown.preview.scrollPreviewWithEditor": {
      "type": "boolean",
      "default": true,
      "description": "When a markdown editor is scrolled, update the view of the preview.",
      "scope": 4
    },
    "markdown.preview.markEditorSelection": {
      "type": "boolean",
      "default": true,
      "description": "Mark the current editor selection in the markdown preview.",
      "scope": 4
    },
    "markdown.preview.scrollEditorWithPreview": {
      "type": "boolean",
      "default": true,
      "description": "When a markdown preview is scrolled, update the view of the editor.",
      "scope": 4
    },
    "markdown.preview.doubleClickToSwitchToEditor": {
      "type": "boolean",
      "default": true,
      "description": "Double click in the markdown preview to switch to the editor.",
      "scope": 4
    },
    "markdown.preview.openMarkdownLinks": {
      "type": "string",
      "default": "inPreview",
      "description": "Controls how links to other markdown files in the markdown preview should be opened.",
      "scope": 4,
      "enum": [
        "inPreview",
        "inEditor"
      ],
      "enumDescriptions": [
        "Try to open links in the markdown preview",
        "Try to open links in the editor"
      ]
    },
    "markdown.links.openLocation": {
      "type": "string",
      "default": "currentGroup",
      "description": "Controls where links in markdown files should be opened.",
      "scope": 4,
      "enum": [
        "currentGroup",
        "beside"
      ],
      "enumDescriptions": [
        "Open links in the active editor group.",
        "Open links beside the active editor."
      ]
    },
    "markdown.trace": {
      "type": "string",
      "enum": [
        "off",
        "verbose"
      ],
      "default": "off",
      "description": "Enable debug logging for the markdown extension.",
      "scope": 3
    },
    "merge-conflict.codeLens.enabled": {
      "type": "boolean",
      "description": "Create a CodeLens for merge conflict blocks within editor.",
      "default": true,
      "scope": 3
    },
    "merge-conflict.decorators.enabled": {
      "type": "boolean",
      "description": "Create decorators for merge conflict blocks within editor.",
      "default": true,
      "scope": 3
    },
    "merge-conflict.autoNavigateNextConflict.enabled": {
      "type": "boolean",
      "description": "Whether to automatically navigate to the next merge conflict after resolving a merge conflict.",
      "default": false,
      "scope": 3
    },
    "merge-conflict.diffViewPosition": {
      "type": "string",
      "enum": [
        "Current",
        "Beside",
        "Below"
      ],
      "description": "Controls where the diff view should be opened when comparing changes in merge conflicts.",
      "enumDescriptions": [
        "Open the diff view in the current editor group.",
        "Open the diff view next to the current editor group.",
        "Open the diff view below the current editor group."
      ],
      "default": "Current",
      "scope": 3
    },
    "debug.javascript.usePreview": {
      "type": "boolean",
      "default": true,
      "description": "Use the new in-preview JavaScript debugger for Node.js and Chrome.",
      "scope": 3
    },
    "debug.javascript.codelens.npmScripts": {
      "enum": [
        "top",
        "all",
        "never"
      ],
      "default": "top",
      "description": "Where a \"Run\" and \"Debug\" code lens should be shown in your npm scripts. It may be on \"all\", scripts, on \"top\" of the script section, or \"never\".",
      "scope": 3
    },
    "debug.javascript.warnOnLongPrediction": {
      "type": "boolean",
      "default": true,
      "description": "Whether a loading prompt should be shown if breakpoint prediction takes a while.",
      "scope": 3
    },
    "debug.javascript.terminalOptions": {
      "type": "object",
      "description": "Default launch options for the JavaScript debug terminal and npm scripts.",
      "default": {},
      "properties": {
        "resolveSourceMapLocations": {
          "type": [
            "array",
            "null"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "items": {
            "type": "string"
          }
        },
        "outFiles": {
          "type": [
            "array"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "items": {
            "type": "string"
          }
        },
        "pauseForSourceMap": {
          "type": "boolean",
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "default": false
        },
        "showAsyncStacks": {
          "description": "Show the async calls that led to the current call stack.",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "required": [
                "onAttach"
              ],
              "properties": {
                "onAttach": {
                  "type": "number",
                  "default": 32
                }
              }
            },
            {
              "type": "object",
              "required": [
                "onceBreakpointResolved"
              ],
              "properties": {
                "onceBreakpointResolved": {
                  "type": "number",
                  "default": 32
                }
              }
            }
          ]
        },
        "skipFiles": {
          "type": "array",
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "default": [
            "<node_internals>/**"
          ]
        },
        "smartStep": {
          "type": "boolean",
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "default": true
        },
        "sourceMaps": {
          "type": "boolean",
          "description": "Use JavaScript source maps (if they exist).",
          "default": true
        },
        "sourceMapPathOverrides": {
          "type": "object",
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "default": {
            "webpack://?:*/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "meteor://💻app/*": "${workspaceFolder}/*"
          }
        },
        "timeout": {
          "type": "number",
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "default": 10000
        },
        "trace": {
          "description": "Configures what diagnostic output is produced.",
          "default": true,
          "oneOf": [
            {
              "type": "boolean",
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "console": {
                  "type": "boolean",
                  "description": "Whether to return trace data from the launched application or browser."
                },
                "stdio": {
                  "type": "boolean",
                  "description": "Configures whether logs are also returned to the debug console."
                },
                "level": {
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ],
                  "description": "Configures the level of logs recorded."
                },
                "logFile": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "description": "Configures where on disk logs are written."
                },
                "tags": {
                  "type": "array",
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  }
                }
              }
            }
          ]
        },
        "outputCapture": {
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "default": "console"
        },
        "cwd": {
          "type": "string",
          "description": "Absolute path to the working directory of the program being debugged.",
          "default": "${workspaceFolder}"
        },
        "localRoot": {
          "type": [
            "string",
            "null"
          ],
          "description": "Path to the local directory containing the program.",
          "default": null
        },
        "remoteRoot": {
          "type": [
            "string",
            "null"
          ],
          "description": "Absolute path to the remote directory containing the program.",
          "default": null
        },
        "autoAttachChildProcesses": {
          "type": "boolean",
          "description": "Attach debugger to new child processes automatically.",
          "default": true
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "default": {}
        },
        "envFile": {
          "type": "string",
          "description": "Absolute path to a file containing environment variable definitions.",
          "default": "${workspaceFolder}/.env"
        },
        "runtimeSourcemapPausePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "default": []
        },
        "command": {
          "type": [
            "string",
            "null"
          ],
          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
          "default": "npm start"
        }
      },
      "scope": 3
    },
    "debug.javascript.suggestPrettyPrinting": {
      "type": "boolean",
      "description": "Whether to suggest pretty printing JavaScript code that looks minified when you step into it.",
      "default": true,
      "scope": 3
    },
    "debug.javascript.automaticallyTunnelRemoteServer": {
      "type": "boolean",
      "description": "When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.",
      "default": true,
      "scope": 3
    },
    "debug.javascript.debugByLinkOptions": {
      "default": "on",
      "description": "Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to \"off\" to disable this behavior, or \"always\" to enable debugging in all terminals.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "on",
            "off",
            "always"
          ]
        },
        {
          "type": "object",
          "properties": {
            "resolveSourceMapLocations": {
              "type": [
                "array",
                "null"
              ],
              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
              "default": null,
              "items": {
                "type": "string"
              }
            },
            "outFiles": {
              "type": [
                "array"
              ],
              "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
              "default": [
                "${workspaceFolder}/**/*.js",
                "!**/node_modules/**"
              ],
              "items": {
                "type": "string"
              }
            },
            "pauseForSourceMap": {
              "type": "boolean",
              "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
              "default": false
            },
            "showAsyncStacks": {
              "description": "Show the async calls that led to the current call stack.",
              "default": true,
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "object",
                  "required": [
                    "onAttach"
                  ],
                  "properties": {
                    "onAttach": {
                      "type": "number",
                      "default": 32
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "onceBreakpointResolved"
                  ],
                  "properties": {
                    "onceBreakpointResolved": {
                      "type": "number",
                      "default": 32
                    }
                  }
                }
              ]
            },
            "skipFiles": {
              "type": "array",
              "description": "An array of file or folder names, or path globs, to skip when debugging.",
              "default": [
                "<node_internals>/**"
              ]
            },
            "smartStep": {
              "type": "boolean",
              "description": "Automatically step through generated code that cannot be mapped back to the original source.",
              "default": true
            },
            "sourceMaps": {
              "type": "boolean",
              "description": "Use JavaScript source maps (if they exist).",
              "default": true
            },
            "sourceMapPathOverrides": {
              "type": "object",
              "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
              "default": {
                "webpack://?:*/*": "${workspaceFolder}/*",
                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                "meteor://💻app/*": "${workspaceFolder}/*"
              }
            },
            "timeout": {
              "type": "number",
              "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
              "default": 10000
            },
            "trace": {
              "description": "Configures what diagnostic output is produced.",
              "default": true,
              "oneOf": [
                {
                  "type": "boolean",
                  "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "console": {
                      "type": "boolean",
                      "description": "Whether to return trace data from the launched application or browser."
                    },
                    "stdio": {
                      "type": "boolean",
                      "description": "Configures whether logs are also returned to the debug console."
                    },
                    "level": {
                      "enum": [
                        "fatal",
                        "error",
                        "warn",
                        "info",
                        "verbose"
                      ],
                      "description": "Configures the level of logs recorded."
                    },
                    "logFile": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Configures where on disk logs are written."
                    },
                    "tags": {
                      "type": "array",
                      "description": "Configures what types of logs are recorded.",
                      "items": {
                        "enum": [
                          "cdp",
                          "dap",
                          "runtime"
                        ]
                      }
                    }
                  }
                }
              ]
            },
            "outputCapture": {
              "enum": [
                "console",
                "std"
              ],
              "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
              "default": "console"
            },
            "disableNetworkCache": {
              "type": "boolean",
              "description": "Controls whether to skip the network cache for each request",
              "default": true
            },
            "pathMapping": {
              "type": "object",
              "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
              "default": {}
            },
            "webRoot": {
              "type": "string",
              "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
              "default": "${workspaceFolder}"
            },
            "urlFilter": {
              "type": "string",
              "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
              "default": ""
            },
            "url": {
              "type": "string",
              "description": "Will search for a tab with this exact url and attach to it, if found",
              "default": "http://localhost:8080"
            },
            "inspectUri": {
              "type": [
                "string",
                "null"
              ],
              "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
              "default": null
            },
            "vueComponentPaths": {
              "type": "array",
              "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
              "default": [
                "${workspaceFolder}/**/*.vue"
              ]
            },
            "server": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                  "additionalProperties": false,
                  "default": {
                    "program": "node my-server.js"
                  },
                  "properties": {
                    "resolveSourceMapLocations": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "outFiles": {
                      "type": [
                        "array"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "pauseForSourceMap": {
                      "type": "boolean",
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "default": false
                    },
                    "showAsyncStacks": {
                      "description": "Show the async calls that led to the current call stack.",
                      "default": true,
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object",
                          "required": [
                            "onAttach"
                          ],
                          "properties": {
                            "onAttach": {
                              "type": "number",
                              "default": 32
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "properties": {
                            "onceBreakpointResolved": {
                              "type": "number",
                              "default": 32
                            }
                          }
                        }
                      ]
                    },
                    "skipFiles": {
                      "type": "array",
                      "description": "An array of file or folder names, or path globs, to skip when debugging.",
                      "default": [
                        "<node_internals>/**"
                      ]
                    },
                    "smartStep": {
                      "type": "boolean",
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "default": true
                    },
                    "sourceMaps": {
                      "type": "boolean",
                      "description": "Use JavaScript source maps (if they exist).",
                      "default": true
                    },
                    "sourceMapPathOverrides": {
                      "type": "object",
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "default": {
                        "webpack://?:*/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "meteor://💻app/*": "${workspaceFolder}/*"
                      }
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "default": 10000
                    },
                    "trace": {
                      "description": "Configures what diagnostic output is produced.",
                      "default": true,
                      "oneOf": [
                        {
                          "type": "boolean",
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "console": {
                              "type": "boolean",
                              "description": "Whether to return trace data from the launched application or browser."
                            },
                            "stdio": {
                              "type": "boolean",
                              "description": "Configures whether logs are also returned to the debug console."
                            },
                            "level": {
                              "enum": [
                                "fatal",
                                "error",
                                "warn",
                                "info",
                                "verbose"
                              ],
                              "description": "Configures the level of logs recorded."
                            },
                            "logFile": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "Configures where on disk logs are written."
                            },
                            "tags": {
                              "type": "array",
                              "description": "Configures what types of logs are recorded.",
                              "items": {
                                "enum": [
                                  "cdp",
                                  "dap",
                                  "runtime"
                                ]
                              }
                            }
                          }
                        }
                      ]
                    },
                    "outputCapture": {
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                      "default": "console"
                    },
                    "cwd": {
                      "type": "string",
                      "description": "Absolute path to the working directory of the program being debugged.",
                      "default": "${workspaceFolder}"
                    },
                    "localRoot": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Path to the local directory containing the program.",
                      "default": null
                    },
                    "remoteRoot": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Absolute path to the remote directory containing the program.",
                      "default": null
                    },
                    "autoAttachChildProcesses": {
                      "type": "boolean",
                      "description": "Attach debugger to new child processes automatically.",
                      "default": true
                    },
                    "env": {
                      "type": "object",
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                      "default": {}
                    },
                    "envFile": {
                      "type": "string",
                      "description": "Absolute path to a file containing environment variable definitions.",
                      "default": "${workspaceFolder}/.env"
                    },
                    "runtimeSourcemapPausePatterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                      "default": []
                    },
                    "program": {
                      "type": "string",
                      "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                      "default": ""
                    },
                    "stopOnEntry": {
                      "type": [
                        "boolean",
                        "string"
                      ],
                      "description": "Automatically stop program after launch.",
                      "default": true
                    },
                    "console": {
                      "type": "string",
                      "enum": [
                        "internalConsole",
                        "integratedTerminal",
                        "externalTerminal"
                      ],
                      "enumDescriptions": [
                        "VS Code Debug Console (which doesn't support to read input from a program)",
                        "VS Code's integrated terminal",
                        "External terminal that can be configured via user settings"
                      ],
                      "description": "Where to launch the debug target.",
                      "default": "internalConsole"
                    },
                    "args": {
                      "type": "array",
                      "description": "Command line arguments passed to the program.",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "restart": {
                      "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                      "default": true,
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "delay": {
                              "type": "number",
                              "minimum": 0,
                              "default": 1000
                            },
                            "maxAttempts": {
                              "type": "number",
                              "minimum": 0,
                              "default": 10
                            }
                          }
                        }
                      ]
                    },
                    "runtimeExecutable": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                      "default": "node"
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                      "default": "default"
                    },
                    "runtimeArgs": {
                      "type": "array",
                      "description": "Optional arguments passed to the runtime executable.",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "profileStartup": {
                      "type": "boolean",
                      "description": "If true, will start profiling soon as the process launches",
                      "default": true
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Create JavaScript Debug Terminal",
                  "additionalProperties": false,
                  "default": {
                    "program": "npm start"
                  },
                  "properties": {
                    "resolveSourceMapLocations": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "outFiles": {
                      "type": [
                        "array"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "pauseForSourceMap": {
                      "type": "boolean",
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "default": false
                    },
                    "showAsyncStacks": {
                      "description": "Show the async calls that led to the current call stack.",
                      "default": true,
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object",
                          "required": [
                            "onAttach"
                          ],
                          "properties": {
                            "onAttach": {
                              "type": "number",
                              "default": 32
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "properties": {
                            "onceBreakpointResolved": {
                              "type": "number",
                              "default": 32
                            }
                          }
                        }
                      ]
                    },
                    "skipFiles": {
                      "type": "array",
                      "description": "An array of file or folder names, or path globs, to skip when debugging.",
                      "default": [
                        "<node_internals>/**"
                      ]
                    },
                    "smartStep": {
                      "type": "boolean",
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "default": true
                    },
                    "sourceMaps": {
                      "type": "boolean",
                      "description": "Use JavaScript source maps (if they exist).",
                      "default": true
                    },
                    "sourceMapPathOverrides": {
                      "type": "object",
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "default": {
                        "webpack://?:*/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "meteor://💻app/*": "${workspaceFolder}/*"
                      }
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "default": 10000
                    },
                    "trace": {
                      "description": "Configures what diagnostic output is produced.",
                      "default": true,
                      "oneOf": [
                        {
                          "type": "boolean",
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "console": {
                              "type": "boolean",
                              "description": "Whether to return trace data from the launched application or browser."
                            },
                            "stdio": {
                              "type": "boolean",
                              "description": "Configures whether logs are also returned to the debug console."
                            },
                            "level": {
                              "enum": [
                                "fatal",
                                "error",
                                "warn",
                                "info",
                                "verbose"
                              ],
                              "description": "Configures the level of logs recorded."
                            },
                            "logFile": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "Configures where on disk logs are written."
                            },
                            "tags": {
                              "type": "array",
                              "description": "Configures what types of logs are recorded.",
                              "items": {
                                "enum": [
                                  "cdp",
                                  "dap",
                                  "runtime"
                                ]
                              }
                            }
                          }
                        }
                      ]
                    },
                    "outputCapture": {
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                      "default": "console"
                    },
                    "cwd": {
                      "type": "string",
                      "description": "Absolute path to the working directory of the program being debugged.",
                      "default": "${workspaceFolder}"
                    },
                    "localRoot": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Path to the local directory containing the program.",
                      "default": null
                    },
                    "remoteRoot": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Absolute path to the remote directory containing the program.",
                      "default": null
                    },
                    "autoAttachChildProcesses": {
                      "type": "boolean",
                      "description": "Attach debugger to new child processes automatically.",
                      "default": true
                    },
                    "env": {
                      "type": "object",
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                      "default": {}
                    },
                    "envFile": {
                      "type": "string",
                      "description": "Absolute path to a file containing environment variable definitions.",
                      "default": "${workspaceFolder}/.env"
                    },
                    "runtimeSourcemapPausePatterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                      "default": []
                    },
                    "command": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                      "default": "npm start"
                    }
                  }
                }
              ]
            },
            "port": {
              "type": "number",
              "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
              "default": 0
            },
            "file": {
              "type": "string",
              "description": "A local html file to open in the browser",
              "default": "${workspaceFolder}/index.html"
            },
            "userDataDir": {
              "type": [
                "string",
                "boolean"
              ],
              "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.",
              "default": true
            },
            "includeDefaultArgs": {
              "type": "boolean",
              "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
              "default": true
            },
            "runtimeExecutable": {
              "type": [
                "string",
                "null"
              ],
              "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
              "default": "stable"
            },
            "runtimeArgs": {
              "type": "array",
              "description": "Optional arguments passed to the runtime executable.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "env": {
              "type": "object",
              "description": "Optional dictionary of environment key/value pairs for the browser.",
              "default": {}
            },
            "cwd": {
              "type": "string",
              "description": "Optional working directory for the runtime executable.",
              "default": null
            },
            "profileStartup": {
              "type": "boolean",
              "description": "If true, will start profiling soon as the process launches",
              "default": true
            },
            "cleanUp": {
              "type": "string",
              "enum": [
                "wholeBrowser",
                "onlyTab"
              ],
              "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
              "default": "wholeBrowser"
            },
            "browserLaunchLocation": {
              "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
              "default": null,
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "enum": [
                    "ui",
                    "workspace"
                  ]
                }
              ]
            },
            "enabled": {
              "type": "string",
              "enum": [
                "on",
                "off",
                "always"
              ]
            }
          }
        }
      ],
      "scope": 3
    },
    "debug.javascript.pickAndAttachOptions": {
      "type": "object",
      "default": {},
      "markdownDescription": "Default options used when debugging a process through the `Debug: Attach to Node.js Process` command",
      "properties": {
        "resolveSourceMapLocations": {
          "type": [
            "array",
            "null"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "items": {
            "type": "string"
          }
        },
        "outFiles": {
          "type": [
            "array"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "items": {
            "type": "string"
          }
        },
        "pauseForSourceMap": {
          "type": "boolean",
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "default": false
        },
        "showAsyncStacks": {
          "description": "Show the async calls that led to the current call stack.",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "required": [
                "onAttach"
              ],
              "properties": {
                "onAttach": {
                  "type": "number",
                  "default": 32
                }
              }
            },
            {
              "type": "object",
              "required": [
                "onceBreakpointResolved"
              ],
              "properties": {
                "onceBreakpointResolved": {
                  "type": "number",
                  "default": 32
                }
              }
            }
          ]
        },
        "skipFiles": {
          "type": "array",
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "default": [
            "<node_internals>/**"
          ]
        },
        "smartStep": {
          "type": "boolean",
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "default": true
        },
        "sourceMaps": {
          "type": "boolean",
          "description": "Use JavaScript source maps (if they exist).",
          "default": true
        },
        "sourceMapPathOverrides": {
          "type": "object",
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "default": {
            "webpack://?:*/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "meteor://💻app/*": "${workspaceFolder}/*"
          }
        },
        "timeout": {
          "type": "number",
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "default": 10000
        },
        "trace": {
          "description": "Configures what diagnostic output is produced.",
          "default": true,
          "oneOf": [
            {
              "type": "boolean",
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "console": {
                  "type": "boolean",
                  "description": "Whether to return trace data from the launched application or browser."
                },
                "stdio": {
                  "type": "boolean",
                  "description": "Configures whether logs are also returned to the debug console."
                },
                "level": {
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ],
                  "description": "Configures the level of logs recorded."
                },
                "logFile": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "description": "Configures where on disk logs are written."
                },
                "tags": {
                  "type": "array",
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  }
                }
              }
            }
          ]
        },
        "outputCapture": {
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "default": "console"
        },
        "cwd": {
          "type": "string",
          "description": "Absolute path to the working directory of the program being debugged.",
          "default": "${workspaceFolder}"
        },
        "localRoot": {
          "type": [
            "string",
            "null"
          ],
          "description": "Path to the local directory containing the program.",
          "default": null
        },
        "remoteRoot": {
          "type": [
            "string",
            "null"
          ],
          "description": "Absolute path to the remote directory containing the program.",
          "default": null
        },
        "autoAttachChildProcesses": {
          "type": "boolean",
          "description": "Attach debugger to new child processes automatically.",
          "default": true
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "default": {}
        },
        "envFile": {
          "type": "string",
          "description": "Absolute path to a file containing environment variable definitions.",
          "default": "${workspaceFolder}/.env"
        },
        "runtimeSourcemapPausePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "default": []
        },
        "address": {
          "type": "string",
          "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
          "default": "localhost"
        },
        "port": {
          "type": "number",
          "description": "Debug port to attach to. Default is 5858.",
          "default": 9229
        },
        "restart": {
          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "properties": {
                "delay": {
                  "type": "number",
                  "minimum": 0,
                  "default": 1000
                },
                "maxAttempts": {
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                }
              }
            }
          ]
        },
        "processId": {
          "type": "string",
          "description": "ID of process to attach to.",
          "default": "${command:PickProcess}"
        },
        "attachExistingChildren": {
          "type": "boolean",
          "description": "Whether to attempt to attach to already-spawned child processes.",
          "default": false
        },
        "continueOnAttach": {
          "type": "boolean",
          "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
          "default": true
        }
      },
      "scope": 3
    },
    "debug.javascript.autoExpandGetters": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.",
      "scope": 3
    },
    "debug.node.showUseWslIsDeprecatedWarning": {
      "scope": 3,
      "type": "boolean",
      "description": "Controls whether to show a warning when the 'useWSL' attribute is used.",
      "default": true
    },
    "debug.node.useV3": {
      "type": "boolean",
      "description": "[Experimental] Controls whether to delegate \"node\"-type launch configs to the js-debug extension.",
      "default": false,
      "scope": 3
    },
    "debug.extensionHost.useV3": {
      "type": "boolean",
      "description": "[Experimental] Controls whether to delegate \"extensionHost\"-type launch configs to the js-debug extension.",
      "default": false,
      "scope": 3
    },
    "references.preferredLocation": {
      "description": "Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references",
      "type": "string",
      "default": "peek",
      "enum": [
        "peek",
        "view"
      ],
      "enumDescriptions": [
        "Show references in peek editor.",
        "Show references in separate view."
      ],
      "scope": 3
    },
    "npm.autoDetect": {
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "on",
      "scope": 4,
      "description": "Controls whether npm scripts should be automatically detected."
    },
    "npm.runSilent": {
      "type": "boolean",
      "default": false,
      "scope": 4,
      "markdownDescription": "Run npm commands with the `--silent` option."
    },
    "npm.packageManager": {
      "scope": 4,
      "type": "string",
      "enum": [
        "npm",
        "yarn",
        "pnpm"
      ],
      "default": "npm",
      "description": "The package manager used to run scripts."
    },
    "npm.exclude": {
      "type": [
        "string",
        "array"
      ],
      "items": {
        "type": "string"
      },
      "description": "Configure glob patterns for folders that should be excluded from automatic script detection.",
      "scope": 4,
      "default": ""
    },
    "npm.enableScriptExplorer": {
      "type": "boolean",
      "default": false,
      "scope": 4,
      "description": "Enable an explorer view for npm scripts when there is no top-level 'package.json' file."
    },
    "npm.enableRunFromFolder": {
      "type": "boolean",
      "default": false,
      "scope": 4,
      "description": "Enable running npm scripts contained in a folder from the Explorer context menu."
    },
    "npm.scriptExplorerAction": {
      "type": "string",
      "enum": [
        "open",
        "run"
      ],
      "markdownDescription": "The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.",
      "scope": 3,
      "default": "open"
    },
    "npm.fetchOnlinePackageInfo": {
      "type": "boolean",
      "description": "Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.",
      "default": true,
      "scope": 3,
      "tags": [
        "usesOnlineServices"
      ]
    },
    "php.suggest.basic": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.",
      "scope": 3
    },
    "php.validate.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable built-in PHP validation.",
      "scope": 3
    },
    "php.validate.executablePath": {
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "description": "Points to the PHP executable.",
      "scope": 6
    },
    "php.validate.run": {
      "type": "string",
      "enum": [
        "onSave",
        "onType"
      ],
      "default": "onSave",
      "description": "Whether the linter is run on save or on type.",
      "scope": 3
    },
    "typescript.tsdk": {
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "markdownDescription": "Specifies the folder path to the tsserver and lib*.d.ts files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.\n\n- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.\n- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.\n\nSee the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.",
      "scope": 3
    },
    "typescript.disableAutomaticTypeAcquisition": {
      "type": "boolean",
      "default": false,
      "description": "Disables automatic type acquisition. Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.",
      "scope": 3,
      "tags": [
        "usesOnlineServices"
      ]
    },
    "typescript.enablePromptUseWorkspaceTsdk": {
      "type": "boolean",
      "default": false,
      "description": "Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.",
      "scope": 3
    },
    "typescript.npm": {
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "description": "Specifies the path to the npm executable used for Automatic Type Acquisition. Requires using TypeScript 2.3.4 or newer in the workspace.",
      "scope": 2
    },
    "typescript.check.npmIsInstalled": {
      "type": "boolean",
      "default": true,
      "description": "Check if npm is installed for Automatic Type Acquisition.",
      "scope": 3
    },
    "javascript.referencesCodeLens.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens in JavaScript files.",
      "scope": 3
    },
    "javascript.referencesCodeLens.showOnAllFunctions": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens on all functions in JavaScript files.",
      "scope": 3
    },
    "typescript.referencesCodeLens.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens in TypeScript files.",
      "scope": 3
    },
    "typescript.referencesCodeLens.showOnAllFunctions": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens on all functions in TypeScript files.",
      "scope": 3
    },
    "typescript.implementationsCodeLens.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.",
      "scope": 3
    },
    "typescript.tsserver.log": {
      "type": "string",
      "enum": [
        "off",
        "terse",
        "normal",
        "verbose"
      ],
      "default": "off",
      "description": "Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
      "scope": 3
    },
    "typescript.tsserver.pluginPaths": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s)."
      },
      "default": [],
      "description": "Additional paths to discover TypeScript Language Service plugins. Requires using TypeScript 2.3.0 or newer in the workspace.",
      "scope": 2
    },
    "typescript.tsserver.trace": {
      "type": "string",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "default": "off",
      "description": "Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.",
      "scope": 3
    },
    "javascript.suggest.completeFunctionCalls": {
      "type": "boolean",
      "default": false,
      "description": "Complete functions with their parameter signature.",
      "scope": 4
    },
    "typescript.suggest.completeFunctionCalls": {
      "type": "boolean",
      "default": false,
      "description": "Complete functions with their parameter signature.",
      "scope": 4
    },
    "javascript.suggest.includeAutomaticOptionalChainCompletions": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.",
      "scope": 4
    },
    "typescript.suggest.includeAutomaticOptionalChainCompletions": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.",
      "scope": 4
    },
    "typescript.reportStyleChecksAsWarnings": {
      "type": "boolean",
      "default": true,
      "description": "Report style checks as warnings.",
      "scope": 3
    },
    "typescript.validate.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable TypeScript validation.",
      "scope": 3
    },
    "typescript.format.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable default TypeScript formatter.",
      "scope": 3
    },
    "typescript.format.insertSpaceAfterCommaDelimiter": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a comma delimiter.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterConstructor": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterSemicolonInForStatements": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a semicolon in a for statement.",
      "scope": 4
    },
    "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a binary operator.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after keywords in a control flow statement.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after function keyword for anonymous functions.",
      "scope": 4
    },
    "typescript.format.insertSpaceBeforeFunctionParenthesis": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling before function argument parentheses.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing non-empty parenthesis.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing non-empty brackets.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing template string braces.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing JSX expression braces.",
      "scope": 4
    },
    "typescript.format.insertSpaceAfterTypeAssertion": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after type assertions in TypeScript. Requires using TypeScript 2.4 or newer in the workspace.",
      "scope": 4
    },
    "typescript.format.placeOpenBraceOnNewLineForFunctions": {
      "type": "boolean",
      "default": false,
      "description": "Defines whether an open brace is put onto a new line for functions or not.",
      "scope": 4
    },
    "typescript.format.placeOpenBraceOnNewLineForControlBlocks": {
      "type": "boolean",
      "default": false,
      "description": "Defines whether an open brace is put onto a new line for control blocks or not.",
      "scope": 4
    },
    "typescript.format.semicolons": {
      "type": "string",
      "default": "ignore",
      "description": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.",
      "scope": 4,
      "enum": [
        "ignore",
        "insert",
        "remove"
      ],
      "enumDescriptions": [
        "Don't insert or remove any semicolons.",
        "Insert semicolons at statement ends.",
        "Remove unnecessary semicolons."
      ]
    },
    "javascript.validate.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable JavaScript validation.",
      "scope": 3
    },
    "javascript.format.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable default JavaScript formatter.",
      "scope": 3
    },
    "javascript.format.insertSpaceAfterCommaDelimiter": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a comma delimiter.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterConstructor": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterSemicolonInForStatements": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a semicolon in a for statement.",
      "scope": 4
    },
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a binary operator.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after keywords in a control flow statement.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after function keyword for anonymous functions.",
      "scope": 4
    },
    "javascript.format.insertSpaceBeforeFunctionParenthesis": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling before function argument parentheses.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing non-empty parenthesis.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing non-empty brackets.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing template string braces.",
      "scope": 4
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing JSX expression braces.",
      "scope": 4
    },
    "javascript.format.placeOpenBraceOnNewLineForFunctions": {
      "type": "boolean",
      "default": false,
      "description": "Defines whether an open brace is put onto a new line for functions or not.",
      "scope": 4
    },
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": {
      "type": "boolean",
      "default": false,
      "description": "Defines whether an open brace is put onto a new line for control blocks or not.",
      "scope": 4
    },
    "javascript.format.semicolons": {
      "type": "string",
      "default": "ignore",
      "description": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.",
      "scope": 4,
      "enum": [
        "ignore",
        "insert",
        "remove"
      ],
      "enumDescriptions": [
        "Don't insert or remove any semicolons.",
        "Insert semicolons at statement ends.",
        "Remove unnecessary semicolons."
      ]
    },
    "javascript.implicitProjectConfig.checkJs": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.",
      "scope": 3
    },
    "javascript.implicitProjectConfig.experimentalDecorators": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable `experimentalDecorators` for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.",
      "scope": 3
    },
    "javascript.suggest.names": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.",
      "scope": 4
    },
    "typescript.tsc.autoDetect": {
      "type": "string",
      "default": "on",
      "enum": [
        "on",
        "off",
        "build",
        "watch"
      ],
      "markdownEnumDescriptions": [
        "Create both build and watch tasks.",
        "Disable this feature.",
        "Only create single run compile tasks.",
        "Only create compile and watch tasks."
      ],
      "description": "Controls auto detection of tsc tasks.",
      "scope": 3
    },
    "javascript.suggest.paths": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestions for paths in import statements and require calls.",
      "scope": 4
    },
    "typescript.suggest.paths": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestions for paths in import statements and require calls.",
      "scope": 4
    },
    "javascript.suggest.autoImports": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.",
      "scope": 4
    },
    "typescript.suggest.autoImports": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.",
      "scope": 4
    },
    "javascript.suggest.completeJSDocs": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestion to complete JSDoc comments.",
      "scope": 4
    },
    "typescript.suggest.completeJSDocs": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestion to complete JSDoc comments.",
      "scope": 4
    },
    "typescript.locale": {
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "de",
        "es",
        "en",
        "fr",
        "it",
        "ja",
        "ko",
        "ru",
        "zh-CN",
        "zh-TW",
        null
      ],
      "default": null,
      "markdownDescription": "Sets the locale used to report JavaScript and TypeScript errors. Requires using TypeScript 2.6.0 or newer in the workspace. Default of `null` uses VS Code's locale.",
      "scope": 3
    },
    "javascript.suggestionActions.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestion diagnostics for JavaScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.",
      "scope": 4
    },
    "typescript.suggestionActions.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestion diagnostics for TypeScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.",
      "scope": 4
    },
    "javascript.preferences.quoteStyle": {
      "type": "string",
      "enum": [
        "auto",
        "single",
        "double"
      ],
      "default": "auto",
      "markdownDescription": "Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.",
      "scope": 4
    },
    "typescript.preferences.quoteStyle": {
      "type": "string",
      "enum": [
        "auto",
        "single",
        "double"
      ],
      "default": "auto",
      "markdownDescription": "Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.",
      "scope": 4
    },
    "javascript.preferences.importModuleSpecifier": {
      "type": "string",
      "enum": [
        "auto",
        "relative",
        "non-relative"
      ],
      "markdownEnumDescriptions": [
        "Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.",
        "Relative to the file location.",
        "Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`."
      ],
      "default": "auto",
      "description": "Preferred path style for auto imports.",
      "scope": 4
    },
    "typescript.preferences.importModuleSpecifier": {
      "type": "string",
      "enum": [
        "auto",
        "relative",
        "non-relative"
      ],
      "markdownEnumDescriptions": [
        "Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.",
        "Relative to the file location.",
        "Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`."
      ],
      "default": "auto",
      "description": "Preferred path style for auto imports.",
      "scope": 4
    },
    "javascript.preferences.importModuleSpecifierEnding": {
      "type": "string",
      "enum": [
        "auto",
        "minimal",
        "index",
        "js"
      ],
      "markdownEnumDescriptions": [
        "Use project settings to select a default.",
        "Shorten `./component/index.js` to `./component`.",
        "Shorten `./component/index.js` to `./component/index`",
        "Do not shorten path endings; include the `.js` extension."
      ],
      "default": "auto",
      "description": "Preferred path ending for auto imports.",
      "scope": 4
    },
    "typescript.preferences.importModuleSpecifierEnding": {
      "type": "string",
      "enum": [
        "auto",
        "minimal",
        "index",
        "js"
      ],
      "markdownEnumDescriptions": [
        "Use project settings to select a default.",
        "Shorten `./component/index.js` to `./component`.",
        "Shorten `./component/index.js` to `./component/index`",
        "Do not shorten path endings; include the `.js` extension."
      ],
      "default": "auto",
      "description": "Preferred path ending for auto imports.",
      "scope": 4
    },
    "javascript.preferences.renameShorthandProperties": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
      "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
      "scope": 4
    },
    "typescript.preferences.renameShorthandProperties": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
      "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
      "scope": 4
    },
    "javascript.preferences.useAliasesForRenames": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
      "scope": 4
    },
    "typescript.preferences.useAliasesForRenames": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
      "scope": 4
    },
    "typescript.updateImportsOnFileMove.enabled": {
      "type": "string",
      "enum": [
        "prompt",
        "always",
        "never"
      ],
      "markdownEnumDescriptions": [
        "Prompt on each rename.",
        "Always update paths automatically.",
        "Never rename paths and don't prompt."
      ],
      "default": "prompt",
      "description": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.",
      "scope": 4
    },
    "javascript.updateImportsOnFileMove.enabled": {
      "type": "string",
      "enum": [
        "prompt",
        "always",
        "never"
      ],
      "markdownEnumDescriptions": [
        "Prompt on each rename.",
        "Always update paths automatically.",
        "Never rename paths and don't prompt."
      ],
      "default": "prompt",
      "description": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.",
      "scope": 4
    },
    "typescript.autoClosingTags": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.",
      "scope": 3
    },
    "javascript.autoClosingTags": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.",
      "scope": 3
    },
    "javascript.suggest.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enabled/disable autocomplete suggestions.",
      "scope": 4
    },
    "typescript.suggest.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enabled/disable autocomplete suggestions.",
      "scope": 4
    },
    "typescript.surveys.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.",
      "scope": 3
    },
    "typescript.tsserver.useSeparateSyntaxServer": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.",
      "scope": 3
    },
    "typescript.tsserver.maxTsServerMemory": {
      "type": "number",
      "default": 3072,
      "description": "Set the maximum amount of memory (in MB) to allocate to the TypeScript server process",
      "scope": 3
    },
    "typescript.tsserver.experimental.enableProjectDiagnostics": {
      "type": "boolean",
      "default": false,
      "description": "(Experimental) Enables project wide error reporting.",
      "scope": 3
    },
    "typescript.tsserver.watchOptions": {
      "type": "object",
      "description": "Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.",
      "scope": 3,
      "properties": {
        "watchFile": {
          "type": "string",
          "description": "Strategy for how individual files are watched.",
          "enum": [
            "fixedPollingInterval",
            "priorityPollingInterval",
            "dynamicPriorityPolling",
            "useFsEvents",
            "useFsEventsOnParentDirectory"
          ],
          "enumDescriptions": [
            "Check every file for changes several times a second at a fixed interval.",
            "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
            "Use a dynamic queue where less-frequently modified files will be checked less often.",
            "Attempt to use the operating system/file system’s native events for file changes.",
            "Attempt to use the operating system/file system’s native events to listen for changes on a file’s containing directories. This can use fewer file watchers, but might be less accurate."
          ],
          "default": "useFsEvents"
        },
        "watchDirectory": {
          "type": "string",
          "description": "Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.",
          "enum": [
            "fixedPollingInterval",
            "dynamicPriorityPolling",
            "useFsEvents"
          ],
          "enumDescriptions": [
            "Check every directory for changes several times a second at a fixed interval.",
            "Use a dynamic queue where less-frequently modified directories will be checked less often.",
            "Attempt to use the operating system/file system’s native events for directory changes."
          ],
          "default": "useFsEvents"
        },
        "fallbackPolling": {
          "type": "string",
          "description": "When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.",
          "enum": [
            "fixedPollingInterval",
            "priorityPollingInterval",
            "dynamicPriorityPolling"
          ],
          "enumDescriptions": [
            "configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval",
            "configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval",
            "configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling"
          ]
        },
        "synchronousWatchDirectory": {
          "type": "boolean",
          "description": "Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups."
        }
      },
      "default": {}
    },
    "typescript.workspaceSymbols.scope": {
      "type": "string",
      "enum": [
        "allOpenProjects",
        "currentProject"
      ],
      "enumDescriptions": [
        "Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.",
        "Only search for symbols in the current JavaScript or TypeScript project."
      ],
      "default": "allOpenProjects",
      "markdownDescription": "Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
      "scope": 3
    },
    "schema-extractor.releaseList": {
      "type": "string",
      "default": "https://raw.githubusercontent.com/luxass/vscode-schemas/main/schemas/.vscode-schemas.json",
      "description": "The URI to the list of releases",
      "scope": 3
    },
    "schema-extractor.output": {
      "type": "string",
      "default": "./extracted-schemas",
      "description": "Output path for the extracted schemas",
      "scope": 3
    },
    "[bat]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[clojure]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[coffeescript]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[c]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[cpp]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[csharp]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[ignore]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[fsharp]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[git-rebase]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[diff]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[groovy]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[hlsl]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[ini]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[properties]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[java]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[javascriptreact]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[javascript]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[jsx-tags]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[lua]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[objective-c]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[objective-cpp]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[perl]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[perl6]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[php]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[powershell]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[jade]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[python]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[r]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[razor]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[ruby]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[rust]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[shaderlab]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[sql]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[swift]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[typescript]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[typescriptreact]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[vb]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[xml]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    },
    "[xsl]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    }
  },
  "patternProperties": {},
  "additionalProperties": true,
  "allowTrailingCommas": true,
  "allowComments": true
}