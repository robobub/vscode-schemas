{
  "id": "vscode://schemas/launch",
  "type": "object",
  "title": "Launch",
  "allowTrailingCommas": true,
  "allowComments": true,
  "required": [],
  "default": {
    "version": "0.2.0",
    "configurations": [],
    "compounds": []
  },
  "properties": {
    "version": {
      "type": "string",
      "description": "Version of this file format.",
      "default": "0.2.0"
    },
    "configurations": {
      "type": "array",
      "description": "List of configurations. Add new configurations or edit existing ones by using IntelliSense.",
      "items": {
        "defaultSnippets": [
          {
            "label": "Node.js: Launch Program",
            "description": "Launch a node program in debug mode",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "${2:Launch Program}",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Launch via NPM",
            "markdownDescription": "Launch a node program through an npm `debug` script",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "${1:Launch via NPM}",
              "runtimeExecutable": "npm",
              "runtimeArgs": [
                "run-script",
                "debug"
              ],
              "port": 9229,
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Attach",
            "description": "Attach to a running node program",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "${1:Attach}",
              "port": 9229,
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Attach to Remote Program",
            "description": "Attach to the debug port of a remote node program",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "${1:Attach to Remote}",
              "address": "${2:TCP/IP address of process to be debugged}",
              "port": 9229,
              "localRoot": "^\"\\${workspaceFolder}\"",
              "remoteRoot": "${3:Absolute path to the remote directory containing the program}",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Attach to Process",
            "description": "Open process picker to select node process to attach to",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "${1:Attach by Process ID}",
              "processId": "^\"\\${command:PickProcess}\"",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Nodemon Setup",
            "description": "Use nodemon to relaunch a debug session on source changes",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "nodemon",
              "runtimeExecutable": "nodemon",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "restart": true,
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Mocha Tests",
            "description": "Debug mocha tests",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Mocha Tests",
              "program": "^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"",
              "args": [
                "-u",
                "tdd",
                "--timeout",
                "999999",
                "--colors",
                "^\"\\${workspaceFolder}/${1:test}\""
              ],
              "internalConsoleOptions": "openOnSessionStart",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Yeoman generator",
            "markdownDescription": "Debug yeoman generator (install by running `npm link` in project folder)",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Yeoman ${1:generator}",
              "program": "^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"",
              "args": [
                "${1:generator}"
              ],
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Gulp task",
            "description": "Debug gulp task (make sure to have a local gulp installed in your project)",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Gulp ${1:task}",
              "program": "^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"",
              "args": [
                "${1:task}"
              ],
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "Node.js: Electron Main",
            "description": "Debug the Electron main process",
            "body": {
              "type": "node",
              "request": "launch",
              "name": "Electron Main",
              "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/electron\"",
              "program": "^\"\\${workspaceFolder}/main.js\"",
              "skipFiles": [
                "<node_internals>/**"
              ]
            }
          },
          {
            "label": "VS Code Extension Development",
            "description": "Launch a VS Code extension in debug mode",
            "body": {
              "type": "extensionHost",
              "request": "launch",
              "name": "Launch Extension",
              "runtimeExecutable": "^\"\\${execPath}\"",
              "args": [
                "^\"--extensionDevelopmentPath=\\${workspaceFolder}\""
              ],
              "outFiles": [
                "^\"\\${workspaceFolder}/out/**/*.js\""
              ],
              "preLaunchTask": "npm"
            }
          }
        ],
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "auto",
                  "inspector",
                  "legacy"
                ],
                "enumDescriptions": [
                  "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                  "New protocol supported by Node.js versions >= 6.3",
                  "Old protocol supported by Node.js versions < 8.0"
                ],
                "description": "Node.js debug protocol to use.",
                "default": "inspector",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "program": {
                "type": "string",
                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "externalConsole": {
                "type": "boolean",
                "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "console": {
                "type": "string",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "VS Code Debug Console (which doesn't support to read input from a program)",
                  "VS Code's integrated terminal",
                  "External terminal that can be configured via user settings"
                ],
                "description": "Where to launch the debug target.",
                "default": "internalConsole",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged.",
                "default": "${workspaceFolder}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                "default": "node",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeVersion": {
                "type": "string",
                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                "default": "default",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeArgs": {
                "type": "array",
                "description": "Optional arguments passed to the runtime executable.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions.",
                "default": "${workspaceFolder}/.env",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 5858.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to the local directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Absolute path to the remote directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "useWSL": {
                "type": "boolean",
                "description": "Use Windows Subsystem for Linux.",
                "default": true,
                "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "enum": [
                  "console",
                  "std"
                ],
                "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                "default": "console",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "default": {
                  "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                  "webpack:///./*": "${workspaceRoot}/*",
                  "webpack:///*": "*"
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "autoAttachChildProcesses": {
                "type": "boolean",
                "description": "Attach debugger to new child processes automatically.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "externalConsole": {
                    "type": "boolean",
                    "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                    "default": true
                  },
                  "console": {
                    "type": "string",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "description": "Where to launch the debug target.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "default": "node"
                  },
                  "runtimeVersion": {
                    "type": "string",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "default": "default"
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "useWSL": {
                    "type": "boolean",
                    "description": "Use Windows Subsystem for Linux.",
                    "default": true,
                    "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "autoAttachChildProcesses": {
                    "type": "boolean",
                    "description": "Attach debugger to new child processes automatically.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ]
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    }
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "externalConsole": {
                    "type": "boolean",
                    "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                    "default": true
                  },
                  "console": {
                    "type": "string",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "description": "Where to launch the debug target.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "default": "node"
                  },
                  "runtimeVersion": {
                    "type": "string",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "default": "default"
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "useWSL": {
                    "type": "boolean",
                    "description": "Use Windows Subsystem for Linux.",
                    "default": true,
                    "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "autoAttachChildProcesses": {
                    "type": "boolean",
                    "description": "Attach debugger to new child processes automatically.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ]
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    }
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "externalConsole": {
                    "type": "boolean",
                    "deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                    "default": true
                  },
                  "console": {
                    "type": "string",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "description": "Where to launch the debug target.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "default": "node"
                  },
                  "runtimeVersion": {
                    "type": "string",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "default": "default"
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "useWSL": {
                    "type": "boolean",
                    "description": "Use Windows Subsystem for Linux.",
                    "default": true,
                    "deprecationMessage": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "autoAttachChildProcesses": {
                    "type": "boolean",
                    "description": "Attach debugger to new child processes automatically.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ]
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    }
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "auto",
                  "inspector",
                  "legacy"
                ],
                "enumDescriptions": [
                  "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                  "New protocol supported by Node.js versions >= 6.3",
                  "Old protocol supported by Node.js versions < 8.0"
                ],
                "description": "Node.js debug protocol to use.",
                "default": "inspector",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged.",
                "default": "${workspaceFolder}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "processId": {
                "type": "string",
                "description": "ID of process to attach to.",
                "default": "${command:PickProcess}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 5858.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to the local directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Absolute path to the remote directory containing the program.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "default": {
                  "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                  "webpack:///./*": "${workspaceRoot}/*",
                  "webpack:///*": "*"
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "attach"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "processId": {
                    "type": "string",
                    "description": "ID of process to attach to.",
                    "default": "${command:PickProcess}"
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "processId": {
                    "type": "string",
                    "description": "ID of process to attach to.",
                    "default": "${command:PickProcess}"
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "inspector",
                      "legacy"
                    ],
                    "enumDescriptions": [
                      "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
                      "New protocol supported by Node.js versions >= 6.3",
                      "Old protocol supported by Node.js versions < 8.0"
                    ],
                    "description": "Node.js debug protocol to use.",
                    "default": "inspector"
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "processId": {
                    "type": "string",
                    "description": "ID of process to attach to.",
                    "default": "${command:PickProcess}"
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 5858.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: [\"${workspaceFolder}/out/**/*.js\"]",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path to the local directory containing the program.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Absolute path to the remote directory containing the program.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "markdownDescription": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
                    "default": true
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
                    "default": true
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack:///./~/*": "${workspaceRoot}/node_modules/*",
                      "webpack:///./*": "${workspaceRoot}/*",
                      "webpack:///*": "*"
                    }
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          },
          {
            "required": [
              "name",
              "type",
              "request",
              "args"
            ],
            "properties": {
              "runtimeExecutable": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "Absolute path to VS Code.",
                "default": "${execPath}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": [
                  "--extensionDevelopmentPath=${workspaceFolder}"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "markdownDescription": "Environment variables passed to the extension host.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop the extension host after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": "${workspaceFolder}/out",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "default": [
                  "${workspaceFolder}/out/**/*.js"
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableSourceMapCaching": {
                "type": "boolean",
                "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "extensionHost"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Absolute path to VS Code.",
                    "default": "${execPath}"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the extension host.",
                    "default": {}
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop the extension host after launch.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": "${workspaceFolder}/out"
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "${workspaceFolder}/out/**/*.js"
                    ]
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Absolute path to VS Code.",
                    "default": "${execPath}"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the extension host.",
                    "default": {}
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop the extension host after launch.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": "${workspaceFolder}/out"
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "${workspaceFolder}/out/**/*.js"
                    ]
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Absolute path to VS Code.",
                    "default": "${execPath}"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "--extensionDevelopmentPath=${workspaceFolder}"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "markdownDescription": "Environment variables passed to the extension host.",
                    "default": {}
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop the extension host after launch.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": "${workspaceFolder}/out"
                  },
                  "outFiles": {
                    "type": "array",
                    "markdownDescription": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "${workspaceFolder}/out/**/*.js"
                    ]
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "extensionHost"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          {
            "required": [
              "name",
              "type",
              "request",
              "cwd"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Absolute path to the program.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "console": {
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                "default": "internalConsole",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged.",
                "default": "${workspaceFolder}",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeExecutable": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "runtimeArgs": {
                "type": "array",
                "description": "Optional arguments passed to the runtime executable.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 9229.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of debug port. Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "diagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs its own diagnostic info to the console",
                "default": true,
                "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "verboseDiagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                "default": true,
                "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "enum": [
                  "verbose",
                  true
                ],
                "default": true,
                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions.",
                "default": "${workspaceFolder}/.env",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outputCapture": {
                "enum": [
                  "console",
                  "std"
                ],
                "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                "default": "console",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableSourceMapCaching": {
                "type": "boolean",
                "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "serverReadyAction": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "openExternally"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                    "default": {
                      "action": "openExternally"
                    },
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "debugWithChrome"
                        ],
                        "enumDescriptions": [
                          "Open URI externally with the default application.",
                          "Start debugging with the 'Debugger for Chrome'."
                        ],
                        "markdownDescription": "What to do with the URI when the server is ready.",
                        "default": "openExternally"
                      },
                      "pattern": {
                        "type": "string",
                        "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                        "default": "listening on port ([0-9]+)"
                      },
                      "uriFormat": {
                        "type": "string",
                        "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                        "default": "http://localhost:%s"
                      },
                      "webRoot": {
                        "type": "string",
                        "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                        "default": "${workspaceFolder}"
                      }
                    }
                  }
                ],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node2"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "launch"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "console": {
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                    "default": null
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "console": {
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                    "default": null
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "program": {
                    "type": "string",
                    "description": "Absolute path to the program."
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "console": {
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                    "default": "internalConsole"
                  },
                  "args": {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Absolute path to the working directory of the program being debugged.",
                    "default": "${workspaceFolder}"
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
                    "default": null
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "default": {}
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env"
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
                    "default": "console"
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "serverReadyAction": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "openExternally"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                        "default": {
                          "action": "openExternally"
                        },
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "debugWithChrome"
                            ],
                            "enumDescriptions": [
                              "Open URI externally with the default application.",
                              "Start debugging with the 'Debugger for Chrome'."
                            ],
                            "markdownDescription": "What to do with the URI when the server is ready.",
                            "default": "openExternally"
                          },
                          "pattern": {
                            "type": "string",
                            "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                            "default": "listening on port ([0-9]+)"
                          },
                          "uriFormat": {
                            "type": "string",
                            "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                            "default": "http://localhost:%s"
                          },
                          "webRoot": {
                            "type": "string",
                            "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                            "default": "${workspaceFolder}"
                          }
                        }
                      }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "launch"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          {
            "properties": {
              "port": {
                "type": "number",
                "description": "Debug port to attach to. Default is 9229.",
                "default": 9229,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of debug port. Default is 'localhost'.",
                "default": "localhost",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "restart": {
                "type": "boolean",
                "description": "Restart session after Node.js has terminated.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outDir": {
                "type": [
                  "string",
                  "null"
                ],
                "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "outFiles": {
                "type": "array",
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The local source root that corresponds to the 'remoteRoot'.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The source root of the remote host.",
                "default": null,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "diagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs its own diagnostic info to the console",
                "default": true,
                "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "verboseDiagnosticLogging": {
                "type": "boolean",
                "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                "default": true,
                "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "enum": [
                  "verbose",
                  true
                ],
                "default": true,
                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                "default": {},
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                "default": [],
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "enableSourceMapCaching": {
                "type": "boolean",
                "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "disableOptimisticBPs": {
                "type": "boolean",
                "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                "default": true,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "type": {
                "enum": [
                  "node2"
                ],
                "description": "Type of configuration.",
                "pattern": "^(?!node2)",
                "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
              },
              "name": {
                "type": "string",
                "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                "default": "Launch",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "request": {
                "enum": [
                  "attach"
                ],
                "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "debugServer": {
                "type": "number",
                "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                "default": 4711,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "preLaunchTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run before debug session starts.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "postDebugTask": {
                "anyOf": [
                  {
                    "oneOf": []
                  },
                  {
                    "type": [
                      "string"
                    ]
                  }
                ],
                "default": "",
                "defaultSnippets": [
                  {
                    "body": {
                      "task": "",
                      "type": ""
                    }
                  }
                ],
                "description": "Task to run after debug session ends.",
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "presentation": {
                "type": "object",
                "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                "properties": {
                  "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                  },
                  "group": {
                    "type": "string",
                    "default": "",
                    "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                  },
                  "order": {
                    "type": "number",
                    "default": 1,
                    "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                  }
                },
                "default": {
                  "hidden": false,
                  "group": "",
                  "order": 1
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "internalConsoleOptions": {
                "enum": [
                  "neverOpen",
                  "openOnSessionStart",
                  "openOnFirstSessionStart"
                ],
                "default": "openOnFirstSessionStart",
                "description": "Controls when the internal debug console should open.",
                "scope": 3,
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "windows": {
                "type": "object",
                "description": "Windows specific launch configuration attributes.",
                "properties": {
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The local source root that corresponds to the 'remoteRoot'.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The source root of the remote host.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "osx": {
                "type": "object",
                "description": "OS X specific launch configuration attributes.",
                "properties": {
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The local source root that corresponds to the 'remoteRoot'.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The source root of the remote host.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              },
              "linux": {
                "type": "object",
                "description": "Linux specific launch configuration attributes.",
                "properties": {
                  "port": {
                    "type": "number",
                    "description": "Debug port to attach to. Default is 9229.",
                    "default": 9229
                  },
                  "address": {
                    "type": "string",
                    "description": "TCP/IP address of debug port. Default is 'localhost'.",
                    "default": "localhost"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "Restart session after Node.js has terminated.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "outDir": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
                    "default": null
                  },
                  "outFiles": {
                    "type": "array",
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "stopOnEntry": {
                    "type": "boolean",
                    "description": "Automatically stop program after launch.",
                    "default": true
                  },
                  "localRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The local source root that corresponds to the 'remoteRoot'.",
                    "default": null
                  },
                  "remoteRoot": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The source root of the remote host.",
                    "default": null
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "diagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs its own diagnostic info to the console",
                    "default": true,
                    "deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "verboseDiagnosticLogging": {
                    "type": "boolean",
                    "description": "When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
                    "default": true,
                    "deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."
                  },
                  "trace": {
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "enum": [
                      "verbose",
                      true
                    ],
                    "default": true,
                    "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
                    "default": {}
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                    "default": []
                  },
                  "showAsyncStacks": {
                    "type": "boolean",
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true
                  },
                  "enableSourceMapCaching": {
                    "type": "boolean",
                    "description": "When sourcemaps are downloaded from a URL, cache them to disk.",
                    "default": true
                  },
                  "disableOptimisticBPs": {
                    "type": "boolean",
                    "description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
                    "default": true
                  },
                  "type": {
                    "enum": [
                      "node2"
                    ],
                    "description": "Type of configuration.",
                    "pattern": "^(?!node2)",
                    "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                    "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of configuration; appears in the launch configuration dropdown menu.",
                    "default": "Launch"
                  },
                  "request": {
                    "enum": [
                      "attach"
                    ],
                    "description": "Request type of configuration. Can be \"launch\" or \"attach\"."
                  },
                  "debugServer": {
                    "type": "number",
                    "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
                    "default": 4711
                  },
                  "preLaunchTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run before debug session starts."
                  },
                  "postDebugTask": {
                    "anyOf": [
                      {
                        "oneOf": []
                      },
                      {
                        "type": [
                          "string"
                        ]
                      }
                    ],
                    "default": "",
                    "defaultSnippets": [
                      {
                        "body": {
                          "task": "",
                          "type": ""
                        }
                      }
                    ],
                    "description": "Task to run after debug session ends."
                  },
                  "presentation": {
                    "type": "object",
                    "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
                      },
                      "order": {
                        "type": "number",
                        "default": 1,
                        "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
                      }
                    },
                    "default": {
                      "hidden": false,
                      "group": "",
                      "order": 1
                    },
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  },
                  "internalConsoleOptions": {
                    "enum": [
                      "neverOpen",
                      "openOnSessionStart",
                      "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "Controls when the internal debug console should open.",
                    "scope": 3,
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                  }
                },
                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
              }
            },
            "required": [
              "name",
              "type",
              "request"
            ],
            "additionalProperties": false,
            "type": "object"
          }
        ]
      }
    },
    "compounds": {
      "type": "array",
      "description": "List of compounds. Each compound references multiple configurations which will get launched together.",
      "items": {
        "type": "object",
        "required": [
          "name",
          "configurations"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of compound. Appears in the launch configuration drop down menu."
          },
          "presentation": {
            "type": "object",
            "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
            "properties": {
              "hidden": {
                "type": "boolean",
                "default": false,
                "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
              },
              "group": {
                "type": "string",
                "default": "",
                "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
              },
              "order": {
                "type": "number",
                "default": 1,
                "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
              }
            },
            "default": {
              "hidden": false,
              "group": "",
              "order": 1
            },
            "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
            "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
          },
          "configurations": {
            "type": "array",
            "default": [],
            "items": {
              "oneOf": [
                {
                  "enum": [],
                  "description": "Please use unique configuration names."
                },
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "enum": [],
                      "description": "Name of compound. Appears in the launch configuration drop down menu."
                    },
                    "folder": {
                      "enum": [
                        "vscode-schemas"
                      ],
                      "description": "Name of folder in which the compound is located."
                    }
                  }
                }
              ]
            },
            "description": "Names of configurations that will be started as part of this compound."
          },
          "preLaunchTask": {
            "type": "string",
            "default": "",
            "description": "Task to run before any of the compound configurations start."
          }
        },
        "default": {
          "name": "Compound",
          "configurations": []
        }
      },
      "default": [
        {
          "name": "Compound",
          "configurations": []
        }
      ]
    },
    "inputs": {
      "type": "array",
      "description": "User inputs. Used for defining user input prompts, such as free string input or a choice from several options.",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "description"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "promptString"
                ],
                "enumDescriptions": [
                  "The 'promptString' type opens an input box to ask the user for input."
                ]
              },
              "description": {
                "type": "string",
                "description": "The description is shown when the user is prompted for input."
              },
              "default": {
                "type": "string",
                "description": "The default value for the input."
              },
              "password": {
                "type": "boolean",
                "description": "Controls if a password input is shown. Password input hides the typed text."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "description",
              "options"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "pickString"
                ],
                "enumDescriptions": [
                  "The 'pickString' type shows a selection list."
                ]
              },
              "description": {
                "type": "string",
                "description": "The description is shown when the user is prompted for input."
              },
              "default": {
                "type": "string",
                "description": "The default value for the input."
              },
              "options": {
                "type": "array",
                "description": "An array of strings that defines the options for a quick pick.",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "Label for the option."
                        },
                        "value": {
                          "type": "string",
                          "description": "Value for the option."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "command"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "command"
                ],
                "enumDescriptions": [
                  "The 'command' type executes a command."
                ]
              },
              "command": {
                "type": "string",
                "description": "The command to execute for this input variable."
              },
              "args": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Optional arguments passed to the command."
                  },
                  {
                    "type": "array",
                    "description": "Optional arguments passed to the command."
                  },
                  {
                    "type": "string",
                    "description": "Optional arguments passed to the command."
                  }
                ]
              }
            }
          }
        ]
      },
      "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
      "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
    }
  }
}